//+++ common
#define _GNU_SOURCE 1
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <setjmp.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <stdint.h>
#include <stdbool.h>
#include "fstest.h"

__attribute__((__unused__)) static void
init_map_anon(uintptr_t va, bool writable, char value)
{
  char *r = mmap((void*)va, 4096, PROT_READ | PROT_WRITE,
                 MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
  if (r == MAP_FAILED) setup_error("mmap");
  *r = value;
  if (!writable) {
    int r2 = mprotect(r, 4096, PROT_READ);
    if (r2 < 0) setup_error("mprotect");
  }
  // Ensure test cores don't shoot down the setup core
  xinvalidate(r, 4096);
}

__attribute__((__unused__)) static void
init_map_file(uintptr_t va, bool writable, const char *fname, off_t offset)
{
  int fd = open(fname, O_RDWR);
  if (fd < 0) setup_error("open");
  void *r = mmap((void*)va, 4096, PROT_READ | (writable ? PROT_WRITE : 0),
                 MAP_SHARED | MAP_FIXED, fd, offset);
  if (r == MAP_FAILED) setup_error("mmap");
  close(fd);
}

__attribute__((__weak__)) const char dataval0[4096] = {0};
__attribute__((__weak__)) const char dataval1[4096] = {1};
__attribute__((__weak__)) const char dataval2[4096] = {2};
__attribute__((__weak__)) const char dataval3[4096] = {3};
__attribute__((__weak__)) const char dataval4[4096] = {4};
__attribute__((__weak__)) const char dataval5[4096] = {5};
__attribute__((__weak__)) const char dataval6[4096] = {6};
__attribute__((__weak__)) const char dataval7[4096] = {7};
__attribute__((__weak__)) const char dataval8[4096] = {8};
__attribute__((__weak__)) const char dataval9[4096] = {9};
__attribute__((__weak__)) const char dataval10[4096] = {10};
__attribute__((__weak__)) const char dataval11[4096] = {11};
__attribute__((__weak__)) const char dataval12[4096] = {12};
__attribute__((__weak__)) const char dataval13[4096] = {13};
__attribute__((__weak__)) const char dataval14[4096] = {14};
__attribute__((__weak__)) const char dataval15[4096] = {15};
__attribute__((__weak__)) char datavalbuf[4096];

//+++ tests

/*
 * calls: fstat read
 */
static int test_fstat_read_pfc_0_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, 0);
  expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
static int test_fstat_read_pfc_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(11, data, 4096);
  expect_result("r", r, -1);
  expect_errno(9);
  if (r < 0) return xerrno(r);
  return data[0];
}
static void setup_fstat_read_pfc_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pfc_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pfc_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pfc_0_final(void) {
  unlink("__i0");
  close(20);
  close(21);
}
static void setup_fstat_read_pfc_0_procfinal(void) {
  close(20);
  close(21);
}

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfc_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfc_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
static void setup_fstat_read_pfc_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pfc_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pfc_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pfc_1_final(void) {
  unlink("__i0");
  close(20);
  close(21);
  close(22);
  close(23);
}
static void setup_fstat_read_pfc_1_procfinal(void) {
  close(20);
  close(21);
  close(22);
  close(23);
}

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfc_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfc_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
static void setup_fstat_read_pfc_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pfc_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc0
// static void setup_fstat_read_pfc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
static void setup_fstat_read_pfc_2_final(void) {
  unlink("__i1");
  unlink("__i0");
  close(20);
  close(21);
  close(22);
  close(23);
}
// static void setup_fstat_read_pfc_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfc_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfc_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_pfc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_2_common
static void setup_fstat_read_pfc_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
// static void setup_fstat_read_pfc_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pfc_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfc_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfc_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_pfc_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
static void setup_fstat_read_pfc_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfc_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfc_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pfc_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfc_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfc_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_pfc_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_1_common
// static void setup_fstat_read_pfc_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_3_proc0
// static void setup_fstat_read_pfc_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
// static void setup_fstat_read_pfc_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pfc_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfc_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
static int test_fstat_read_pfc_6_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(10, data, 4096);
  expect_result("r", r, -1);
  expect_errno(9);
  if (r < 0) return xerrno(r);
  return data[0];
}
// static void setup_fstat_read_pfc_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
static void setup_fstat_read_pfc_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfc_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfc_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pfc_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfc_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfc_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
static void setup_fstat_read_pfc_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pfc_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_4_proc0
// static void setup_fstat_read_pfc_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
static void setup_fstat_read_pfc_7_final(void) {
  unlink("__i1");
  unlink("__i0");
  close(20);
  close(21);
}
// static void setup_fstat_read_pfc_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfc_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfc_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_pfc_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_7_common
// static void setup_fstat_read_pfc_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc0
// static void setup_fstat_read_pfc_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfc_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pfc_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfb_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
static int test_fstat_read_pfb_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(11, data, 4096);
  expect_result("r", r, -1);
  expect_errno(11);
  if (r < 0) return xerrno(r);
  return data[0];
}
static void setup_fstat_read_pfb_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pfb_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfb_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfb_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pfb_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfb_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfb_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
static void setup_fstat_read_pfb_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pfb_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_0_proc0
// static void setup_fstat_read_pfb_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
static void setup_fstat_read_pfb_1_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
}
// static void setup_fstat_read_pfb_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfb_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfb_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
static void setup_fstat_read_pfb_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pfb_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfb_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
static void setup_fstat_read_pfb_2_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
  close(22);
  close(23);
}
// static void setup_fstat_read_pfb_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfb_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfb_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
// static void setup_fstat_read_pfb_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_2_common
static void setup_fstat_read_pfb_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfb_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
// static void setup_fstat_read_pfb_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfb_2_final
// static void setup_fstat_read_pfb_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfb_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfb_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
static void setup_fstat_read_pfb_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pfb_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_2_proc0
// static void setup_fstat_read_pfb_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
// static void setup_fstat_read_pfb_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pfb_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfb_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfb_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
// static void setup_fstat_read_pfb_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_0_common
static void setup_fstat_read_pfb_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfb_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfb_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pfb_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfb_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfb_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
// static void setup_fstat_read_pfb_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_4_common
// static void setup_fstat_read_pfb_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_3_proc0
// static void setup_fstat_read_pfb_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
// static void setup_fstat_read_pfb_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pfb_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfb_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
static int test_fstat_read_pfb_7_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(10, data, 4096);
  expect_result("r", r, -1);
  expect_errno(11);
  if (r < 0) return xerrno(r);
  return data[0];
}
// static void setup_fstat_read_pfb_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_0_common
static void setup_fstat_read_pfb_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfb_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfb_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pfb_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfb_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfb_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
// static void setup_fstat_read_pfb_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_1_common
// static void setup_fstat_read_pfb_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_5_proc0
// static void setup_fstat_read_pfb_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfb_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfb_1_final
// static void setup_fstat_read_pfb_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfa_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
static int test_fstat_read_pfa_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(11, data, 4096);
  expect_result("r", r, 0);
  if (r < 0) return xerrno(r);
  return data[0];
}
static void setup_fstat_read_pfa_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pfa_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pfa_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pfa_0_final(void) {
  unlink("__i0");
  close(22);
  close(23);
  close(20);
  close(21);
}
static void setup_fstat_read_pfa_0_procfinal(void) {
  close(22);
  close(23);
  close(20);
  close(21);
}

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfa_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfa_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
static void setup_fstat_read_pfa_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pfa_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pfa_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfa_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfb_2_final
// static void setup_fstat_read_pfa_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfa_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfa_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
static void setup_fstat_read_pfa_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pfa_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_0_proc0
// static void setup_fstat_read_pfa_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfa_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pfa_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfa_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfa_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
static void setup_fstat_read_pfa_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pfa_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_0_proc0
// static void setup_fstat_read_pfa_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfa_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfb_1_final
// static void setup_fstat_read_pfa_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfa_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
static int test_fstat_read_pfa_4_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(10, data, 4096);
  expect_result("r", r, 0);
  if (r < 0) return xerrno(r);
  return data[0];
}
// static void setup_fstat_read_pfa_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_2_common
// static void setup_fstat_read_pfa_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pfa_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pfa_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pfa_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfa_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfa_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
static void setup_fstat_read_pfa_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pfa_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pfa_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfa_1_proc1
// static void setup_fstat_read_pfa_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pfa_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pfa_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pfa_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
// static void setup_fstat_read_pfa_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_1_common
// static void setup_fstat_read_pfa_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfa_5_proc0
// static void setup_fstat_read_pfa_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfa_1_proc1
// static void setup_fstat_read_pfa_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfb_2_final
// static void setup_fstat_read_pfa_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf8_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
static int test_fstat_read_pf8_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(11, data, 4096);
  expect_result("r", r, 4096);
  expect_result("data[0]", data[0], 0);
  if (r < 0) return xerrno(r);
  return data[0];
}
static void setup_fstat_read_pf8_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pf8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_0_proc0
// static void setup_fstat_read_pf8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pf8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf8_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
static void setup_fstat_read_pf8_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pf8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_2_proc0
// static void setup_fstat_read_pf8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
// static void setup_fstat_read_pf8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pf8_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf8_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
static void setup_fstat_read_pf8_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pf8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_2_proc0
// static void setup_fstat_read_pf8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
// static void setup_fstat_read_pf8_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pf8_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf8_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
// static void setup_fstat_read_pf8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_1_common
// static void setup_fstat_read_pf8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_3_proc0
// static void setup_fstat_read_pf8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
// static void setup_fstat_read_pf8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pf8_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf8_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
// static void setup_fstat_read_pf8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_2_common
// static void setup_fstat_read_pf8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_3_proc0
// static void setup_fstat_read_pf8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_1_proc1
// static void setup_fstat_read_pf8_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pf8_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf8_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
static int test_fstat_read_pf8_5_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(10, data, 4096);
  expect_result("r", r, 4096);
  expect_result("data[0]", data[0], 0);
  if (r < 0) return xerrno(r);
  return data[0];
}
// static void setup_fstat_read_pf8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_0_common
// static void setup_fstat_read_pf8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pf8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pf8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf8_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
static void setup_fstat_read_pf8_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pf8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_0_proc0
// static void setup_fstat_read_pf8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf8_6_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pf8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf8_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
// static void setup_fstat_read_pf8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_0_common
// static void setup_fstat_read_pf8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_5_proc0
// static void setup_fstat_read_pf8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pf8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf8_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf8_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
// static void setup_fstat_read_pf8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_6_common
// static void setup_fstat_read_pf8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_5_proc0
// static void setup_fstat_read_pf8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf8_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pf8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf4_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf4_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
static void setup_fstat_read_pf4_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pf4_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pf4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf4_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pf4_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf4_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf4_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
static void setup_fstat_read_pf4_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pf4_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pf4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf4_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pf4_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf4_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf4_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
static void setup_fstat_read_pf4_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pf4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pf4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf4_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pf4_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf4_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf4_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
// static void setup_fstat_read_pf4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf4_1_common
static void setup_fstat_read_pf4_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pf4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf4_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pf4_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf0_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
static void setup_fstat_read_pf0_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pf0_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pf0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pf0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf0_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
static void setup_fstat_read_pf0_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_read_pf0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pf0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf0_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pf0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf0_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
// static void setup_fstat_read_pf0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf0_0_common
static void setup_fstat_read_pf0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pf0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pf0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pf0_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pf0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
static void setup_fstat_read_pf0_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pf0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pf0_2_proc0
// static void setup_fstat_read_pf0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pf0_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfb_1_final
// static void setup_fstat_read_pf0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pe_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pe_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_pe_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
// static void setup_fstat_read_pe_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pe_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pe_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pe_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pe_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pe_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_pe_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
// static void setup_fstat_read_pe_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pe_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pe_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pe_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdc_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdc_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pdc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
// static void setup_fstat_read_pdc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pdc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pdc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pdc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdc_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdc_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pdc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_1_common
static void setup_fstat_read_pdc_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pdc_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(23, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pdc_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pdc_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdc_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdc_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pdc_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_2_common
// static void setup_fstat_read_pdc_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_1_proc0
// static void setup_fstat_read_pdc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_1_proc1
// static void setup_fstat_read_pdc_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pdc_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdc_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdc_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pdc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_1_common
static void setup_fstat_read_pdc_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pdc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_1_proc1
// static void setup_fstat_read_pdc_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pdc_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdc_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdc_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pdc_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_2_common
// static void setup_fstat_read_pdc_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_3_proc0
// static void setup_fstat_read_pdc_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_1_proc1
// static void setup_fstat_read_pdc_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pdc_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdc_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdc_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pdc_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_7_common
// static void setup_fstat_read_pdc_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pdc_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pdc_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pdc_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdc_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdc_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pdc_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
// static void setup_fstat_read_pdc_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pdc_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pdc_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pdc_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdc_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdc_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pdc_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_7_common
// static void setup_fstat_read_pdc_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pdc_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pdc_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pdc_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdb_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdb_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
// static void setup_fstat_read_pdb_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_0_common
// static void setup_fstat_read_pdb_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pdb_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pdb_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pdb_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdb_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdb_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
// static void setup_fstat_read_pdb_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_4_common
// static void setup_fstat_read_pdb_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_1_proc0
static void setup_fstat_read_pdb_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(22, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pdb_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pdb_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdb_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdb_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
static void setup_fstat_read_pdb_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pdb_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_1_proc0
// static void setup_fstat_read_pdb_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdb_1_proc1
// static void setup_fstat_read_pdb_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pdb_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdb_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdb_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
// static void setup_fstat_read_pdb_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_4_common
// static void setup_fstat_read_pdb_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_3_proc0
// static void setup_fstat_read_pdb_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdb_1_proc1
// static void setup_fstat_read_pdb_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pdb_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdb_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdb_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
// static void setup_fstat_read_pdb_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pdb_2_common
// static void setup_fstat_read_pdb_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_3_proc0
// static void setup_fstat_read_pdb_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdb_1_proc1
// static void setup_fstat_read_pdb_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pdb_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdb_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdb_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
static void setup_fstat_read_pdb_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pdb_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pdb_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pdb_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pdb_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdb_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdb_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
// static void setup_fstat_read_pdb_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_0_common
// static void setup_fstat_read_pdb_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pdb_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pdb_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pdb_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pdb_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pdb_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
// static void setup_fstat_read_pdb_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pdb_5_common
// static void setup_fstat_read_pdb_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pdb_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pdb_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pdb_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pda_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pda_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_pda_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_5_common
static void setup_fstat_read_pda_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pda_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(22, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pda_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pda_0_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pda_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pda_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
static void setup_fstat_read_pda_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pda_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pda_0_proc0
// static void setup_fstat_read_pda_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pda_0_proc1
// static void setup_fstat_read_pda_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pda_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pda_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pda_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_pda_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pda_1_common
static void setup_fstat_read_pda_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pda_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pda_0_proc1
// static void setup_fstat_read_pda_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pda_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pda_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pda_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
static void setup_fstat_read_pda_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pda_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pda_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pda_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pda_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pda_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pda_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_pda_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_2_common
// static void setup_fstat_read_pda_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pda_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pda_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pda_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pda_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pda_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_pda_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_5_common
// static void setup_fstat_read_pda_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pda_2_proc0
// static void setup_fstat_read_pda_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pda_0_proc1
// static void setup_fstat_read_pda_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pda_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd8_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pd8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_0_common
// static void setup_fstat_read_pd8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pd8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pd8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pd8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd8_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pd8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_6_common
// static void setup_fstat_read_pd8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pd8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pd8_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pd8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd8_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pd8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_2_common
// static void setup_fstat_read_pd8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_1_proc0
// static void setup_fstat_read_pd8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdb_1_proc1
// static void setup_fstat_read_pd8_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pd8_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd8_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pd8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_6_common
// static void setup_fstat_read_pd8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pd8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pd8_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pd8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd8_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pd8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_2_common
// static void setup_fstat_read_pd8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_3_proc0
// static void setup_fstat_read_pd8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdb_1_proc1
// static void setup_fstat_read_pd8_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_2_final
// static void setup_fstat_read_pd8_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd8_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pd8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_1_common
// static void setup_fstat_read_pd8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_1_proc0
// static void setup_fstat_read_pd8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdb_1_proc1
// static void setup_fstat_read_pd8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pd8_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd8_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pd8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_0_common
// static void setup_fstat_read_pd8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pd8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pd8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pd8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd8_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pd8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_1_common
// static void setup_fstat_read_pd8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdc_3_proc0
// static void setup_fstat_read_pd8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pdb_1_proc1
// static void setup_fstat_read_pd8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_final
// static void setup_fstat_read_pd8_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_read_pfc_1_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd4_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd4_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
static void setup_fstat_read_pd4_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pd4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
static void setup_fstat_read_pd4_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pd4_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pd4_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd4_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd4_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
static void setup_fstat_read_pd4_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pd4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
static void setup_fstat_read_pd4_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pd4_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pd4_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd4_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd4_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_pd4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pd4_0_common
// static void setup_fstat_read_pd4_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pd4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pd4_0_proc1
// static void setup_fstat_read_pd4_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pd4_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd4_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd4_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_pd4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pd4_1_common
// static void setup_fstat_read_pd4_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pd4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pd4_1_proc1
// static void setup_fstat_read_pd4_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pd4_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd0_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
static void setup_fstat_read_pd0_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pd0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pd0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pd4_0_proc1
// static void setup_fstat_read_pd0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pd0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd0_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
static void setup_fstat_read_pd0_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pd0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pd0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pd4_1_proc1
// static void setup_fstat_read_pd0_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pd0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd0_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
static void setup_fstat_read_pd0_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_read_pd0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pd0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pd4_1_proc1
// static void setup_fstat_read_pd0_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfb_1_final
// static void setup_fstat_read_pd0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pd0_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pd0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pd0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf0_0_common
// static void setup_fstat_read_pd0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pd0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pd4_0_proc1
// static void setup_fstat_read_pd0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pd0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pc_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pc_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
// static void setup_fstat_read_pc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_pc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pc_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pfc_0_0
// static int test_fstat_read_pc_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_pc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
// static void setup_fstat_read_pc_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_pc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pc_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pc_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
static int test_fstat_read_pbc_0_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, 0);
  expect_result("st.st_size", st.st_size, 0);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
// static int test_fstat_read_pbc_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_pbc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
static void setup_fstat_read_pbc_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pbc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pbc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pbc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pbc_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_pbc_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_pbc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_7_common
// static void setup_fstat_read_pbc_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pbc_0_proc0
// static void setup_fstat_read_pbc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pbc_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pbc_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
static int test_fstat_read_pbb_0_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, 0);
  expect_result("st.st_size", st.st_size, 8192);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
// static int test_fstat_read_pbb_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
// static void setup_fstat_read_pbb_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_0_common
static void setup_fstat_read_pbb_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pbb_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pbb_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pbb_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pbb_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbb_0_0
// static int test_fstat_read_pbb_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
// static void setup_fstat_read_pbb_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_1_common
static void setup_fstat_read_pbb_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pbb_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pbb_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfb_1_final
// static void setup_fstat_read_pbb_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
static int test_fstat_read_pba_0_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, 0);
  expect_result("st.st_size", st.st_size, 20480);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
// static int test_fstat_read_pba_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
// static void setup_fstat_read_pba_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_2_common
static void setup_fstat_read_pba_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_pba_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pba_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pba_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pba_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pba_0_0
// static int test_fstat_read_pba_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
// static void setup_fstat_read_pba_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_3_common
static void setup_fstat_read_pba_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_pba_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pba_0_proc1
// static void setup_fstat_read_pba_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfb_1_final
// static void setup_fstat_read_pba_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pb8_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbb_0_0
// static int test_fstat_read_pb8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
// static void setup_fstat_read_pb8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_0_common
// static void setup_fstat_read_pb8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pbb_0_proc0
// static void setup_fstat_read_pb8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pb8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_pb8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pb8_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbb_0_0
// static int test_fstat_read_pb8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
// static void setup_fstat_read_pb8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_6_common
// static void setup_fstat_read_pb8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pbb_0_proc0
// static void setup_fstat_read_pb8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_pb8_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_pb8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pb4_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_pb4_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
static void setup_fstat_read_pb4_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_fstat_read_pb4_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_fstat_read_pb4_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
}
static void setup_fstat_read_pb4_0_final(void) {
  unlink("__i0");
}
static void setup_fstat_read_pb4_0_procfinal(void) {
  
}

/*
 * calls: fstat read
 */
// static int test_fstat_read_pb4_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_pb4_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
static void setup_fstat_read_pb4_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_fstat_read_pb4_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_pb4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
static void setup_fstat_read_pb4_1_final(void) {
  unlink("__i1");
  unlink("__i0");
}
// static void setup_fstat_read_pb4_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pb4_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_pb4_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
// static void setup_fstat_read_pb4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_0_common
static void setup_fstat_read_pb4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_pb4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_pb4_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_pb4_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pb4_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_pb4_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_pb4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_0_common
static void setup_fstat_read_pb4_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_pb4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_pb4_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_pb4_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
static int test_fstat_read_pb2_0_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, 0);
  expect_result("st.st_size", st.st_size, 4096);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
// static int test_fstat_read_pb2_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
static void setup_fstat_read_pb2_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_fstat_read_pb2_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_pb2_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
static void setup_fstat_read_pb2_0_final(void) {
  unlink("__i0");
  unlink("__i1");
}
// static void setup_fstat_read_pb2_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pb2_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 4096);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pb2_0_0
// static int test_fstat_read_pb2_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
static void setup_fstat_read_pb2_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_fstat_read_pb2_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_pb2_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_pb2_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_pb2_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pb2_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbb_0_0
// static int test_fstat_read_pb2_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
static void setup_fstat_read_pb2_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_fstat_read_pb2_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_2_proc0
// static void setup_fstat_read_pb2_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_pb2_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_pb2_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pb2_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 4096);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pb2_0_0
// static int test_fstat_read_pb2_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_pb2_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_1_common
static void setup_fstat_read_pb2_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_pb2_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_pb2_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_pb2_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_pa_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_pa_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_pa_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_0_common
// static void setup_fstat_read_pa_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_pa_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_pa_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_pa_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p9c_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_p9c_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_p9c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
// static void setup_fstat_read_p9c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pd4_0_proc1
// static void setup_fstat_read_p9c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_p9c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p9c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p9c_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_p9c_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_p9c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_7_common
// static void setup_fstat_read_p9c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pd4_0_proc1
// static void setup_fstat_read_p9c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_p9c_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_p9c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p9b_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbb_0_0
// static int test_fstat_read_p9b_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
// static void setup_fstat_read_p9b_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_0_common
static void setup_fstat_read_p9b_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_p9b_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_p9b_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p9b_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p9b_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbb_0_0
// static int test_fstat_read_p9b_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
// static void setup_fstat_read_p9b_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pdb_5_common
// static void setup_fstat_read_p9b_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_p9b_0_proc0
// static void setup_fstat_read_p9b_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_p9b_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_p9b_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p9a_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pba_0_0
// static int test_fstat_read_p9a_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_p9a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_2_common
static void setup_fstat_read_p9a_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_read_p9a_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_p9a_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p9a_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p9a_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pba_0_0
// static int test_fstat_read_p9a_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_p9a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pda_3_common
// static void setup_fstat_read_p9a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_p9a_0_proc0
// static void setup_fstat_read_p9a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_p9a_0_proc1
// static void setup_fstat_read_p9a_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_p9a_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p98_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbb_0_0
// static int test_fstat_read_p98_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_p98_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_0_common
// static void setup_fstat_read_p98_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_p9b_0_proc0
// static void setup_fstat_read_p98_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_p98_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p98_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p98_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbb_0_0
// static int test_fstat_read_p98_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_p98_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_6_common
// static void setup_fstat_read_p98_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_p9b_0_proc0
// static void setup_fstat_read_p98_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_p98_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_7_final
// static void setup_fstat_read_p98_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p94_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_p94_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_p94_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_0_common
// static void setup_fstat_read_p94_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_p94_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_p94_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_p94_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p94_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_p94_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_p94_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_1_common
// static void setup_fstat_read_p94_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
static void setup_fstat_read_p94_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_p94_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_1_final
// static void setup_fstat_read_p94_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p94_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_p94_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_p94_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_0_common
static void setup_fstat_read_p94_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_p94_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_p94_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_p94_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p92_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 4096);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pb2_0_0
// static int test_fstat_read_p92_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
static void setup_fstat_read_p92_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_fstat_read_p92_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_p92_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_p94_1_proc1
// static void setup_fstat_read_p92_0_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_1_final
// static void setup_fstat_read_p92_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p92_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 4096);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pb2_0_0
// static int test_fstat_read_p92_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_p92_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_1_common
// static void setup_fstat_read_p92_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_p92_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_p92_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_p92_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p92_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbb_0_0
// static int test_fstat_read_p92_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_p92_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_2_common
static void setup_fstat_read_p92_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_p92_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_p94_2_proc0
// static void setup_fstat_read_p92_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_p92_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p8_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_pbc_0_0
// static int test_fstat_read_p8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_p8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_0_common
// static void setup_fstat_read_p8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_p8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_p8_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
static int test_fstat_read_p78_0_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, -1);
  expect_errno(9);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
// static int test_fstat_read_p78_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
// static void setup_fstat_read_p78_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
static void setup_fstat_read_p78_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_p78_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_p78_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p78_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p76_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p76_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_0_1
// static void setup_fstat_read_p76_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_0_common
static void setup_fstat_read_p76_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_p76_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_p76_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p76_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p74_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p74_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
// static void setup_fstat_read_p74_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_2_common
static void setup_fstat_read_p74_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_read_p74_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pba_0_proc1
// static void setup_fstat_read_p74_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p74_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p70_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p70_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
// static void setup_fstat_read_p70_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_0_common
// static void setup_fstat_read_p70_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_p76_0_proc0
// static void setup_fstat_read_p70_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_p70_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p70_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p68_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p68_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_0_1
// static void setup_fstat_read_p68_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_0_common
static void setup_fstat_read_p68_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_p68_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p68_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_p68_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p60_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p60_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_0_1
// static void setup_fstat_read_p60_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_1_common
static void setup_fstat_read_p60_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_read_p60_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p60_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_p60_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p4_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p4_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_0_1
static void setup_fstat_read_p4_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
}
// static void setup_fstat_read_p4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p4_0_final(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal
// static void setup_fstat_read_p4_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p4_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p4_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_p4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_read_p4_0_common
// static void setup_fstat_read_p4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p4_1_final(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal
// static void setup_fstat_read_p4_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p38_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p38_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_p38_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfc_0_common
// static void setup_fstat_read_p38_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_p38_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_6_proc0
// static void setup_fstat_read_p38_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p38_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p36_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p36_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfb_7_1
// static void setup_fstat_read_p36_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfb_0_common
// static void setup_fstat_read_p36_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_p36_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_p36_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p36_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p34_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p34_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_p34_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pfa_2_common
// static void setup_fstat_read_p34_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pba_0_proc1
// static void setup_fstat_read_p34_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_p9a_0_proc1
// static void setup_fstat_read_p34_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p34_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p30_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p30_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_p30_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_read_pf8_0_common
// static void setup_fstat_read_p30_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfc_0_proc1
// static void setup_fstat_read_p30_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_read_pfb_7_proc0
// static void setup_fstat_read_p30_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_final
// static void setup_fstat_read_p30_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_read_pfc_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p28_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p28_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfa_4_1
// static void setup_fstat_read_p28_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_read_pb4_0_common
// static void setup_fstat_read_p28_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p28_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_p28_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_p28_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p20_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p20_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pf8_5_1
// static void setup_fstat_read_p20_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_1_common
// static void setup_fstat_read_p20_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p20_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_read_pb2_3_proc0
// static void setup_fstat_read_p20_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_read_pb4_0_final
// static void setup_fstat_read_p20_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

/*
 * calls: fstat read
 */
// static int test_fstat_read_p0_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_read_p78_0_0
// static int test_fstat_read_p0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_fstat_read_pfc_6_1
// static void setup_fstat_read_p0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_read_p4_0_common
// static void setup_fstat_read_p0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_read_pb4_0_proc1
// static void setup_fstat_read_p0_0_final(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal
// static void setup_fstat_read_p0_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_read_pb4_0_procfinal

//+++ common
static void cleanup(void) {
  unlink("__f0");
  unlink("__f1");
  unlink("__f2");
  unlink("__f3");
  unlink("__f4");
  unlink("__f5");
}

struct fstest fstests[] = {
//+++ tests
  { "fs-fstat_read_pfc_0",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfc_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfc_1",
    &setup_fstat_read_pfc_1_common,
    { { &setup_fstat_read_pfc_1_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfc_2",
    &setup_fstat_read_pfc_2_common,
    { { &setup_fstat_read_pfc_1_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfc_3",
    &setup_fstat_read_pfc_2_common,
    { { &setup_fstat_read_pfc_3_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfc_4",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfc_4_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfc_5",
    &setup_fstat_read_pfc_1_common,
    { { &setup_fstat_read_pfc_3_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfc_6",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfc_7",
    &setup_fstat_read_pfc_7_common,
    { { &setup_fstat_read_pfc_4_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfc_8",
    &setup_fstat_read_pfc_7_common,
    { { &setup_fstat_read_pfc_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfb_0",
    &setup_fstat_read_pfb_0_common,
    { { &setup_fstat_read_pfb_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfb_1",
    &setup_fstat_read_pfb_1_common,
    { { &setup_fstat_read_pfb_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfb_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfb_2",
    &setup_fstat_read_pfb_2_common,
    { { &setup_fstat_read_pfb_2_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfb_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfb_3",
    &setup_fstat_read_pfb_2_common,
    { { &setup_fstat_read_pfb_3_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfb_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfb_4",
    &setup_fstat_read_pfb_4_common,
    { { &setup_fstat_read_pfb_2_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfb_5",
    &setup_fstat_read_pfb_0_common,
    { { &setup_fstat_read_pfb_5_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfb_6",
    &setup_fstat_read_pfb_4_common,
    { { &setup_fstat_read_pfb_3_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfb_7",
    &setup_fstat_read_pfb_0_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfb_8",
    &setup_fstat_read_pfb_1_common,
    { { &setup_fstat_read_pfb_5_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfb_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfa_0",
    &setup_fstat_read_pfa_0_common,
    { { &setup_fstat_read_pfa_0_proc0 }, { &setup_fstat_read_pfa_0_proc1 } },
    &setup_fstat_read_pfa_0_procfinal,
    &setup_fstat_read_pfa_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfa_1",
    &setup_fstat_read_pfa_1_common,
    { { &setup_fstat_read_pfa_1_proc0 }, { &setup_fstat_read_pfa_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfb_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfa_2",
    &setup_fstat_read_pfa_2_common,
    { { &setup_fstat_read_pfb_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfa_3",
    &setup_fstat_read_pfa_3_common,
    { { &setup_fstat_read_pfb_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfb_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfa_4",
    &setup_fstat_read_pfa_2_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfa_5",
    &setup_fstat_read_pfa_5_common,
    { { &setup_fstat_read_pfa_5_proc0 }, { &setup_fstat_read_pfa_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pfa_6",
    &setup_fstat_read_pfa_1_common,
    { { &setup_fstat_read_pfa_5_proc0 }, { &setup_fstat_read_pfa_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfb_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf8_0",
    &setup_fstat_read_pf8_0_common,
    { { &setup_fstat_read_pfb_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf8_1",
    &setup_fstat_read_pf8_1_common,
    { { &setup_fstat_read_pfb_2_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf8_2",
    &setup_fstat_read_pf8_2_common,
    { { &setup_fstat_read_pfb_2_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf8_3",
    &setup_fstat_read_pf8_1_common,
    { { &setup_fstat_read_pfb_3_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf8_4",
    &setup_fstat_read_pf8_2_common,
    { { &setup_fstat_read_pfb_3_proc0 }, { &setup_fstat_read_pfc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf8_5",
    &setup_fstat_read_pf8_0_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf8_6",
    &setup_fstat_read_pf8_6_common,
    { { &setup_fstat_read_pfb_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf8_7",
    &setup_fstat_read_pf8_0_common,
    { { &setup_fstat_read_pfb_5_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf8_8",
    &setup_fstat_read_pf8_6_common,
    { { &setup_fstat_read_pfb_5_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf4_0",
    &setup_fstat_read_pf4_0_common,
    { { &setup_fstat_read_pf4_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf4_1",
    &setup_fstat_read_pf4_1_common,
    { { &setup_fstat_read_pf4_1_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf4_2",
    &setup_fstat_read_pf4_2_common,
    { { &setup_fstat_read_pf4_2_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf4_3",
    &setup_fstat_read_pf4_1_common,
    { { &setup_fstat_read_pf4_3_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf0_0",
    &setup_fstat_read_pf0_0_common,
    { { &setup_fstat_read_pf0_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf0_1",
    &setup_fstat_read_pf0_1_common,
    { { &setup_fstat_read_pf0_1_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf0_2",
    &setup_fstat_read_pf0_0_common,
    { { &setup_fstat_read_pf0_2_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pf0_3",
    &setup_fstat_read_pf0_3_common,
    { { &setup_fstat_read_pf0_2_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfb_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pe_0",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pe_1",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pdc_0",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfc_6_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdc_1",
    &setup_fstat_read_pfc_1_common,
    { { &setup_fstat_read_pdc_1_proc0 }, { &setup_fstat_read_pdc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdc_2",
    &setup_fstat_read_pfc_2_common,
    { { &setup_fstat_read_pdc_1_proc0 }, { &setup_fstat_read_pdc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdc_3",
    &setup_fstat_read_pfc_1_common,
    { { &setup_fstat_read_pdc_3_proc0 }, { &setup_fstat_read_pdc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdc_4",
    &setup_fstat_read_pfc_2_common,
    { { &setup_fstat_read_pdc_3_proc0 }, { &setup_fstat_read_pdc_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdc_5",
    &setup_fstat_read_pfc_7_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfc_6_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdc_6",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pfc_6_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdc_7",
    &setup_fstat_read_pfc_7_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pfc_6_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdb_0",
    &setup_fstat_read_pfb_0_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdb_1",
    &setup_fstat_read_pfb_4_common,
    { { &setup_fstat_read_pdc_1_proc0 }, { &setup_fstat_read_pdb_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdb_2",
    &setup_fstat_read_pdb_2_common,
    { { &setup_fstat_read_pdc_1_proc0 }, { &setup_fstat_read_pdb_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdb_3",
    &setup_fstat_read_pfb_4_common,
    { { &setup_fstat_read_pdc_3_proc0 }, { &setup_fstat_read_pdb_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdb_4",
    &setup_fstat_read_pdb_2_common,
    { { &setup_fstat_read_pdc_3_proc0 }, { &setup_fstat_read_pdb_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdb_5",
    &setup_fstat_read_pdb_5_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdb_6",
    &setup_fstat_read_pfb_0_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pdb_7",
    &setup_fstat_read_pdb_5_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pda_0",
    &setup_fstat_read_pfa_5_common,
    { { &setup_fstat_read_pda_0_proc0 }, { &setup_fstat_read_pda_0_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pda_1",
    &setup_fstat_read_pda_1_common,
    { { &setup_fstat_read_pda_0_proc0 }, { &setup_fstat_read_pda_0_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pda_2",
    &setup_fstat_read_pda_1_common,
    { { &setup_fstat_read_pda_2_proc0 }, { &setup_fstat_read_pda_0_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pda_3",
    &setup_fstat_read_pda_3_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pda_4",
    &setup_fstat_read_pfa_2_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pda_5",
    &setup_fstat_read_pfa_5_common,
    { { &setup_fstat_read_pda_2_proc0 }, { &setup_fstat_read_pda_0_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd8_0",
    &setup_fstat_read_pf8_0_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd8_1",
    &setup_fstat_read_pf8_6_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd8_2",
    &setup_fstat_read_pf8_2_common,
    { { &setup_fstat_read_pdc_1_proc0 }, { &setup_fstat_read_pdb_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd8_3",
    &setup_fstat_read_pf8_6_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd8_4",
    &setup_fstat_read_pf8_2_common,
    { { &setup_fstat_read_pdc_3_proc0 }, { &setup_fstat_read_pdb_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_2_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd8_5",
    &setup_fstat_read_pf8_1_common,
    { { &setup_fstat_read_pdc_1_proc0 }, { &setup_fstat_read_pdb_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd8_6",
    &setup_fstat_read_pf8_0_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd8_7",
    &setup_fstat_read_pf8_1_common,
    { { &setup_fstat_read_pdc_3_proc0 }, { &setup_fstat_read_pdb_1_proc1 } },
    &setup_fstat_read_pfc_1_procfinal,
    &setup_fstat_read_pfc_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd4_0",
    &setup_fstat_read_pd4_0_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pd4_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd4_1",
    &setup_fstat_read_pd4_1_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pd4_1_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd4_2",
    &setup_fstat_read_pd4_0_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pd4_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd4_3",
    &setup_fstat_read_pd4_1_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pd4_1_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd0_0",
    &setup_fstat_read_pd0_0_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pd4_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd0_1",
    &setup_fstat_read_pd0_1_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pd4_1_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd0_2",
    &setup_fstat_read_pd0_2_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pd4_1_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfb_1_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pd0_3",
    &setup_fstat_read_pf0_0_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pd4_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pc_0",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfb_7_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pc_1",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfc_6_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pfc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_pbc_0",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pbc_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pbc_1",
    &setup_fstat_read_pfc_7_common,
    { { &setup_fstat_read_pbc_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pbb_0",
    &setup_fstat_read_pfb_0_common,
    { { &setup_fstat_read_pbb_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pbb_1",
    &setup_fstat_read_pfb_1_common,
    { { &setup_fstat_read_pbb_1_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfb_1_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pba_0",
    &setup_fstat_read_pfa_2_common,
    { { &setup_fstat_read_pba_0_proc0 }, { &setup_fstat_read_pba_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pba_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pba_1",
    &setup_fstat_read_pfa_3_common,
    { { &setup_fstat_read_pba_1_proc0 }, { &setup_fstat_read_pba_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfb_1_final,
    { { &test_fstat_read_pba_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb8_0",
    &setup_fstat_read_pf8_0_common,
    { { &setup_fstat_read_pbb_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb8_1",
    &setup_fstat_read_pf8_6_common,
    { { &setup_fstat_read_pbb_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb4_0",
    &setup_fstat_read_pb4_0_common,
    { { &setup_fstat_read_pb4_0_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb4_1",
    &setup_fstat_read_pb4_1_common,
    { { &setup_fstat_read_pb4_1_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_1_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb4_2",
    &setup_fstat_read_pb4_0_common,
    { { &setup_fstat_read_pb4_2_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb4_3",
    &setup_fstat_read_pb4_0_common,
    { { &setup_fstat_read_pb4_3_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb2_0",
    &setup_fstat_read_pb2_0_common,
    { { &setup_fstat_read_pb2_0_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb2_0_final,
    { { &test_fstat_read_pb2_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb2_1",
    &setup_fstat_read_pb2_1_common,
    { { &setup_fstat_read_pb2_1_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pb2_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb2_2",
    &setup_fstat_read_pb2_2_common,
    { { &setup_fstat_read_pb4_2_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pb2_3",
    &setup_fstat_read_pb2_1_common,
    { { &setup_fstat_read_pb2_3_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pb2_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_pa_0",
    &setup_fstat_read_pb4_0_common,
    { { &setup_fstat_read_pb2_3_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_p9c_0",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pd4_0_proc1 }, { &setup_fstat_read_pfc_6_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p9c_1",
    &setup_fstat_read_pfc_7_common,
    { { &setup_fstat_read_pd4_0_proc1 }, { &setup_fstat_read_pfc_6_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p9b_0",
    &setup_fstat_read_pfb_0_common,
    { { &setup_fstat_read_p9b_0_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p9b_1",
    &setup_fstat_read_pdb_5_common,
    { { &setup_fstat_read_p9b_0_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p9a_0",
    &setup_fstat_read_pfa_2_common,
    { { &setup_fstat_read_p9a_0_proc0 }, { &setup_fstat_read_p9a_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pba_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p9a_1",
    &setup_fstat_read_pda_3_common,
    { { &setup_fstat_read_p9a_0_proc0 }, { &setup_fstat_read_p9a_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pba_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p98_0",
    &setup_fstat_read_pf8_0_common,
    { { &setup_fstat_read_p9b_0_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p98_1",
    &setup_fstat_read_pf8_6_common,
    { { &setup_fstat_read_p9b_0_proc0 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_7_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p94_0",
    &setup_fstat_read_pb4_0_common,
    { { &setup_fstat_read_pb2_3_proc0 }, { &setup_fstat_read_pb2_3_proc0 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p94_1",
    &setup_fstat_read_pb4_1_common,
    { { &setup_fstat_read_pb2_3_proc0 }, { &setup_fstat_read_p94_1_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_1_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p94_2",
    &setup_fstat_read_pb4_0_common,
    { { &setup_fstat_read_p94_2_proc0 }, { &setup_fstat_read_pb2_3_proc0 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p92_0",
    &setup_fstat_read_p92_0_common,
    { { &setup_fstat_read_pb2_3_proc0 }, { &setup_fstat_read_p94_1_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_1_final,
    { { &test_fstat_read_pb2_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p92_1",
    &setup_fstat_read_pb2_1_common,
    { { &setup_fstat_read_pb2_3_proc0 }, { &setup_fstat_read_pb2_3_proc0 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pb2_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p92_2",
    &setup_fstat_read_pb2_2_common,
    { { &setup_fstat_read_p92_2_proc0 }, { &setup_fstat_read_p94_2_proc0 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pbb_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p8_0",
    &setup_fstat_read_pb4_0_common,
    { { &setup_fstat_read_pb2_3_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_pbc_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p78_0",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_p78_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_p76_0",
    &setup_fstat_read_pfb_0_common,
    { { &setup_fstat_read_p76_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_p74_0",
    &setup_fstat_read_pfa_2_common,
    { { &setup_fstat_read_p74_0_proc0 }, { &setup_fstat_read_pba_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_p70_0",
    &setup_fstat_read_pf8_0_common,
    { { &setup_fstat_read_p76_0_proc0 }, { &setup_fstat_read_pfc_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_p68_0",
    &setup_fstat_read_pb4_0_common,
    { { &setup_fstat_read_p68_0_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_p60_0",
    &setup_fstat_read_pb2_1_common,
    { { &setup_fstat_read_p60_0_proc0 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_p4_0",
    &setup_fstat_read_p4_0_common,
    { { &setup_fstat_read_pb4_0_proc1 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_procfinal,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_p4_1",
    &setup_fstat_read_p4_0_common,
    { { &setup_fstat_read_pb4_0_proc1 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_procfinal,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 0, "read" } },
    &cleanup },
  { "fs-fstat_read_p38_0",
    &setup_fstat_read_pfc_0_common,
    { { &setup_fstat_read_pfc_0_proc1 }, { &setup_fstat_read_pfc_6_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p36_0",
    &setup_fstat_read_pfb_0_common,
    { { &setup_fstat_read_pfc_0_proc1 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfb_7_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p34_0",
    &setup_fstat_read_pfa_2_common,
    { { &setup_fstat_read_pba_0_proc1 }, { &setup_fstat_read_p9a_0_proc1 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p30_0",
    &setup_fstat_read_pf8_0_common,
    { { &setup_fstat_read_pfc_0_proc1 }, { &setup_fstat_read_pfb_7_proc0 } },
    &setup_fstat_read_pfc_0_procfinal,
    &setup_fstat_read_pfc_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p28_0",
    &setup_fstat_read_pb4_0_common,
    { { &setup_fstat_read_pb4_0_proc1 }, { &setup_fstat_read_pb2_3_proc0 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfa_4_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p20_0",
    &setup_fstat_read_pb2_1_common,
    { { &setup_fstat_read_pb4_0_proc1 }, { &setup_fstat_read_pb2_3_proc0 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_final,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pf8_5_1, 1, "read" } },
    &cleanup },
  { "fs-fstat_read_p0_0",
    &setup_fstat_read_p4_0_common,
    { { &setup_fstat_read_pb4_0_proc1 }, { &setup_fstat_read_pb4_0_proc1 } },
    &setup_fstat_read_pb4_0_procfinal,
    &setup_fstat_read_pb4_0_procfinal,
    { { &test_fstat_read_p78_0_0, 0, "fstat" },
      { &test_fstat_read_pfc_6_1, 1, "read" } },
    &cleanup },
//+++ common
  {}
};
