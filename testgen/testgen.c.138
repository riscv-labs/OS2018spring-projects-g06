//+++ common
#define _GNU_SOURCE 1
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <setjmp.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <stdint.h>
#include <stdbool.h>
#include "fstest.h"

__attribute__((__unused__)) static void
init_map_anon(uintptr_t va, bool writable, char value)
{
  char *r = mmap((void*)va, 4096, PROT_READ | PROT_WRITE,
                 MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
  if (r == MAP_FAILED) setup_error("mmap");
  *r = value;
  if (!writable) {
    int r2 = mprotect(r, 4096, PROT_READ);
    if (r2 < 0) setup_error("mprotect");
  }
  // Ensure test cores don't shoot down the setup core
  xinvalidate(r, 4096);
}

__attribute__((__unused__)) static void
init_map_file(uintptr_t va, bool writable, const char *fname, off_t offset)
{
  int fd = open(fname, O_RDWR);
  if (fd < 0) setup_error("open");
  void *r = mmap((void*)va, 4096, PROT_READ | (writable ? PROT_WRITE : 0),
                 MAP_SHARED | MAP_FIXED, fd, offset);
  if (r == MAP_FAILED) setup_error("mmap");
  close(fd);
}

__attribute__((__weak__)) const char dataval0[4096] = {0};
__attribute__((__weak__)) const char dataval1[4096] = {1};
__attribute__((__weak__)) const char dataval2[4096] = {2};
__attribute__((__weak__)) const char dataval3[4096] = {3};
__attribute__((__weak__)) const char dataval4[4096] = {4};
__attribute__((__weak__)) const char dataval5[4096] = {5};
__attribute__((__weak__)) const char dataval6[4096] = {6};
__attribute__((__weak__)) const char dataval7[4096] = {7};
__attribute__((__weak__)) const char dataval8[4096] = {8};
__attribute__((__weak__)) const char dataval9[4096] = {9};
__attribute__((__weak__)) const char dataval10[4096] = {10};
__attribute__((__weak__)) const char dataval11[4096] = {11};
__attribute__((__weak__)) const char dataval12[4096] = {12};
__attribute__((__weak__)) const char dataval13[4096] = {13};
__attribute__((__weak__)) const char dataval14[4096] = {14};
__attribute__((__weak__)) const char dataval15[4096] = {15};
__attribute__((__weak__)) char datavalbuf[4096];

//+++ tests

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_pe_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
static int test_mmap_unlink_pe_0_1(void) {
  int r = unlink("__f0");
  expect_result("r", r, 0);
  return xerrno(r);
}
static void setup_mmap_unlink_pe_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = link("__i0", "__f0");
  if (r < 0) setup_error("link");
}
static void setup_mmap_unlink_pe_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
}
static void setup_mmap_unlink_pe_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
}
static void setup_mmap_unlink_pe_0_final(void) {
  unlink("__i0");
}
static void setup_mmap_unlink_pe_0_procfinal(void) {
  
}

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pe_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pe_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_pe_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
static void setup_mmap_unlink_pe_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_unlink_pe_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pe_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_pe_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pe_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pe_2_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_pe_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
static void setup_mmap_unlink_pe_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_unlink_pe_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pe_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_pe_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pe_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pe_3_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
static void setup_mmap_unlink_pe_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = link("__i0", "__f0");
  if (r < 0) setup_error("link");
}
static void setup_mmap_unlink_pe_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_unlink_pe_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
static void setup_mmap_unlink_pe_3_final(void) {
  unlink("__i0");
  unlink("__i1");
}
// static void setup_mmap_unlink_pe_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pe_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pe_4_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_pe_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
static void setup_mmap_unlink_pe_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_unlink_pe_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pe_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_pe_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pe_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pe_5_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_pe_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
static void setup_mmap_unlink_pe_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_unlink_pe_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pe_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_pe_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pe_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pe_6_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_pe_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_3_common
static void setup_mmap_unlink_pe_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_unlink_pe_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pe_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_unlink_pe_3_final
// static void setup_mmap_unlink_pe_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pc_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
static int test_mmap_unlink_pc_0_1(void) {
  int r = unlink("__f0");
  expect_result("r", r, -1);
  expect_errno(2);
  return xerrno(r);
}
static void setup_mmap_unlink_pc_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
}
// static void setup_mmap_unlink_pc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pc_0_final(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal
// static void setup_mmap_unlink_pc_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pc_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pc_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_pc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pc_0_common
// static void setup_mmap_unlink_pc_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_unlink_pe_1_proc0
// static void setup_mmap_unlink_pc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pc_1_final(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal
// static void setup_mmap_unlink_pc_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pc_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pc_2_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
static void setup_mmap_unlink_pc_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_mmap_unlink_pc_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_unlink_pc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pc_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_pc_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pc_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pc_3_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_pc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pc_0_common
// static void setup_mmap_unlink_pc_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_unlink_pe_4_proc0
// static void setup_mmap_unlink_pc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pc_3_final(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal
// static void setup_mmap_unlink_pc_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pc_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_0
// static int test_mmap_unlink_pc_4_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_pc_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pc_2_common
static void setup_mmap_unlink_pc_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_unlink_pc_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pc_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_pc_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_pb8_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static int test_mmap_unlink_pb8_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
static void setup_mmap_unlink_pb8_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = link("__i0", "__f0");
  if (r < 0) setup_error("link");
}
static void setup_mmap_unlink_pb8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_unlink_pb8_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_unlink_pb8_0_final(void) {
  unlink("__i0");
  close(20);
  close(21);
}
static void setup_mmap_unlink_pb8_0_procfinal(void) {
  close(20);
  close(21);
}

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pb8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pb8_0_0
// static int test_mmap_unlink_pb8_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
static void setup_mmap_unlink_pb8_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = link("__i1", "__f0");
  if (r < 0) setup_error("link");
}
// static void setup_mmap_unlink_pb8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc0
// static void setup_mmap_unlink_pb8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
static void setup_mmap_unlink_pb8_1_final(void) {
  unlink("__i1");
  unlink("__i0");
  close(20);
  close(21);
}
// static void setup_mmap_unlink_pb8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pb8_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pb8_0_0
// static int test_mmap_unlink_pb8_2_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_pb8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pb8_0_common
static void setup_mmap_unlink_pb8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_unlink_pb8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_pb8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_final
// static void setup_mmap_unlink_pb8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pb8_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pb8_0_0
// static int test_mmap_unlink_pb8_3_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_pb8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = link("__i1", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pb8_1_common
// static void setup_mmap_unlink_pb8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_2_proc0
// static void setup_mmap_unlink_pb8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_pb8_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_1_final
// static void setup_mmap_unlink_pb8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pb0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pb8_0_0
// static int test_mmap_unlink_pb0_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
static void setup_mmap_unlink_pb0_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_unlink_pb0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc0
// static void setup_mmap_unlink_pb0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_pb0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_final
// static void setup_mmap_unlink_pb0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pb0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pb8_0_0
// static int test_mmap_unlink_pb0_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_pb0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_unlink_pb0_0_common
// static void setup_mmap_unlink_pb0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_2_proc0
// static void setup_mmap_unlink_pb0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_pb0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_final
// static void setup_mmap_unlink_pb0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_pa8_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
// static int test_mmap_unlink_pa8_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_pa8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
static void setup_mmap_unlink_pa8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_unlink_pa8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pa8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_pa8_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pa8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pa8_0_0
// static int test_mmap_unlink_pa8_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
static void setup_mmap_unlink_pa8_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = link("__i1", "__f0");
  if (r < 0) setup_error("link");
}
// static void setup_mmap_unlink_pa8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pa8_0_proc0
// static void setup_mmap_unlink_pa8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
static void setup_mmap_unlink_pa8_1_final(void) {
  unlink("__i1");
  unlink("__i0");
}
// static void setup_mmap_unlink_pa8_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_pa0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pa8_0_0
// static int test_mmap_unlink_pa0_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_pa0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pc_2_common
static void setup_mmap_unlink_pa0_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_unlink_pa0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_pa0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_pa0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p90_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static int test_mmap_unlink_p90_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p90_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
// static void setup_mmap_unlink_p90_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p90_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p90_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p90_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p90_0_0
// static int test_mmap_unlink_p8_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_p8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pc_0_common
// static void setup_mmap_unlink_p8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p8_0_final(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal
// static void setup_mmap_unlink_p8_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p70_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_unlink_p70_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p70_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
// static void setup_mmap_unlink_p70_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p70_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p70_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p70_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p70_1_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_unlink_p70_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p70_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
// static void setup_mmap_unlink_p70_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p70_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p70_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p70_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p50_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p70_0_0
// static int test_mmap_unlink_p50_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_p50_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pc_0_common
// static void setup_mmap_unlink_p50_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p50_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p50_0_final(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal
// static void setup_mmap_unlink_p50_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p50_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p70_1_0
// static int test_mmap_unlink_p50_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_p50_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pc_0_common
// static void setup_mmap_unlink_p50_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p50_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p50_1_final(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal
// static void setup_mmap_unlink_p50_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p38_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static int test_mmap_unlink_p38_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p38_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pb8_0_common
// static void setup_mmap_unlink_p38_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc0
// static void setup_mmap_unlink_p38_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_p38_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_final
// static void setup_mmap_unlink_p38_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p38_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p38_0_0
// static int test_mmap_unlink_p38_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p38_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = link("__i1", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pb8_1_common
// static void setup_mmap_unlink_p38_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc0
// static void setup_mmap_unlink_p38_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_p38_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_1_final
// static void setup_mmap_unlink_p38_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p38_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p38_0_0
// static int test_mmap_unlink_p38_2_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p38_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pb8_0_common
// static void setup_mmap_unlink_p38_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_2_proc0
// static void setup_mmap_unlink_p38_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_p38_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_final
// static void setup_mmap_unlink_p38_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p38_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p38_0_0
// static int test_mmap_unlink_p38_3_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p38_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = link("__i1", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pb8_1_common
// static void setup_mmap_unlink_p38_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_2_proc0
// static void setup_mmap_unlink_p38_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_p38_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_1_final
// static void setup_mmap_unlink_p38_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p30_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p38_0_0
// static int test_mmap_unlink_p30_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_p30_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_unlink_pb0_0_common
// static void setup_mmap_unlink_p30_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc0
// static void setup_mmap_unlink_p30_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_p30_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_final
// static void setup_mmap_unlink_p30_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p30_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p38_0_0
// static int test_mmap_unlink_p30_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_p30_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_unlink_pb0_0_common
// static void setup_mmap_unlink_p30_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_2_proc0
// static void setup_mmap_unlink_p30_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_unlink_pb8_0_proc1
// static void setup_mmap_unlink_p30_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_final
// static void setup_mmap_unlink_p30_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_unlink_pb8_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p2c_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_unlink_p2c_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p2c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
// static void setup_mmap_unlink_p2c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pa8_0_proc0
// static void setup_mmap_unlink_p2c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p2c_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p2c_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p2c_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p2c_0_0
// static int test_mmap_unlink_p2c_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p2c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i1", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pa8_1_common
// static void setup_mmap_unlink_p2c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pa8_0_proc0
// static void setup_mmap_unlink_p2c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p2c_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pa8_1_final
// static void setup_mmap_unlink_p2c_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p2c_2_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_unlink_p2c_2_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p2c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i1", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pa8_1_common
// static void setup_mmap_unlink_p2c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pa8_0_proc0
// static void setup_mmap_unlink_p2c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p2c_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pa8_1_final
// static void setup_mmap_unlink_p2c_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p2c_3_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x705000UL);
  
  return xerrno(r);
}
// static int test_mmap_unlink_p2c_3_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
static void setup_mmap_unlink_p2c_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = link("__i0", "__f0");
  if (r < 0) setup_error("link");
}
static void setup_mmap_unlink_p2c_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7360512, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_unlink_p2c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p2c_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p2c_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p2c_4_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x20ae000UL);
  
  return xerrno(r);
}
// static int test_mmap_unlink_p2c_4_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
static void setup_mmap_unlink_p2c_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = link("__i1", "__f0");
  if (r < 0) setup_error("link");
}
static void setup_mmap_unlink_p2c_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 34267136, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_unlink_p2c_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p2c_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pa8_1_final
// static void setup_mmap_unlink_p2c_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p2c_5_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x20ae000UL);
  
  return xerrno(r);
}
// static int test_mmap_unlink_p2c_5_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
static void setup_mmap_unlink_p2c_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = link("__i0", "__f0");
  if (r < 0) setup_error("link");
}
static void setup_mmap_unlink_p2c_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_unlink_p2c_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p2c_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p2c_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p2c_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x20ae000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p2c_5_0
// static int test_mmap_unlink_p2c_6_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p2c_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_p2c_5_common
// static void setup_mmap_unlink_p2c_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 34267136, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_p2c_4_proc0
// static void setup_mmap_unlink_p2c_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p2c_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p2c_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p2c_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p2c_2_0
// static int test_mmap_unlink_p2c_7_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
static void setup_mmap_unlink_p2c_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = link("__i1", "__f0");
  if (r < 0) setup_error("link");
}
// static void setup_mmap_unlink_p2c_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pa0_0_proc0
// static void setup_mmap_unlink_p2c_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p2c_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_unlink_pe_3_final
// static void setup_mmap_unlink_p2c_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p24_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p2c_0_0
// static int test_mmap_unlink_p24_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_p24_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pc_2_common
// static void setup_mmap_unlink_p24_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pa0_0_proc0
// static void setup_mmap_unlink_p24_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p24_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p24_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p24_1_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
  
  return xerrno(r);
}
// static int test_mmap_unlink_p24_1_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
static void setup_mmap_unlink_p24_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_mmap_unlink_p24_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pa0_0_proc0
// static void setup_mmap_unlink_p24_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p24_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p24_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p24_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p2c_2_0
// static int test_mmap_unlink_p24_2_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_p24_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pc_2_common
// static void setup_mmap_unlink_p24_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pa0_0_proc0
// static void setup_mmap_unlink_p24_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p24_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p24_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p24_3_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
  
  return xerrno(r);
}
// static int test_mmap_unlink_p24_3_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_p24_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_unlink_p24_1_common
// static void setup_mmap_unlink_p24_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_unlink_pa0_0_proc0
// static void setup_mmap_unlink_p24_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p24_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p24_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
static int test_mmap_unlink_p10_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static int test_mmap_unlink_p10_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pe_0_1
// static void setup_mmap_unlink_p10_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = link("__i0", "__f0");
//   if (r < 0) setup_error("link");
// }
// ^ See setup_mmap_unlink_pe_0_common
// static void setup_mmap_unlink_p10_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p10_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p10_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_unlink_pe_0_final
// static void setup_mmap_unlink_p10_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

/*
 * calls: mmap unlink
 */
// static int test_mmap_unlink_p0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_p10_0_0
// static int test_mmap_unlink_p0_0_1(void) {
//   int r = unlink("__f0");
//   expect_result("r", r, -1);
//   expect_errno(2);
//   return xerrno(r);
// }
// ^ See test_mmap_unlink_pc_0_1
// static void setup_mmap_unlink_p0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pc_0_common
// static void setup_mmap_unlink_p0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_unlink_pe_0_proc1
// static void setup_mmap_unlink_p0_0_final(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal
// static void setup_mmap_unlink_p0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_unlink_pe_0_procfinal

//+++ common
static void cleanup(void) {
  unlink("__f0");
  unlink("__f1");
  unlink("__f2");
  unlink("__f3");
  unlink("__f4");
  unlink("__f5");
}

struct fstest fstests[] = {
//+++ tests
  { "fs-mmap_unlink_pe_0",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pe_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pe_1",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pe_1_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pe_2",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pe_2_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pe_3",
    &setup_mmap_unlink_pe_3_common,
    { { &setup_mmap_unlink_pe_3_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_3_final,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pe_4",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pe_4_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pe_5",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pe_5_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pe_6",
    &setup_mmap_unlink_pe_3_common,
    { { &setup_mmap_unlink_pe_6_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_3_final,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pc_0",
    &setup_mmap_unlink_pc_0_common,
    { { &setup_mmap_unlink_pe_0_proc1 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_procfinal,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pc_1",
    &setup_mmap_unlink_pc_0_common,
    { { &setup_mmap_unlink_pe_1_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_procfinal,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pc_2",
    &setup_mmap_unlink_pc_2_common,
    { { &setup_mmap_unlink_pc_2_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pc_3",
    &setup_mmap_unlink_pc_0_common,
    { { &setup_mmap_unlink_pe_4_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_procfinal,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pc_4",
    &setup_mmap_unlink_pc_2_common,
    { { &setup_mmap_unlink_pc_4_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_pe_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pb8_0",
    &setup_mmap_unlink_pb8_0_common,
    { { &setup_mmap_unlink_pb8_0_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_0_final,
    { { &test_mmap_unlink_pb8_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pb8_1",
    &setup_mmap_unlink_pb8_1_common,
    { { &setup_mmap_unlink_pb8_0_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_1_final,
    { { &test_mmap_unlink_pb8_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pb8_2",
    &setup_mmap_unlink_pb8_0_common,
    { { &setup_mmap_unlink_pb8_2_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_0_final,
    { { &test_mmap_unlink_pb8_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pb8_3",
    &setup_mmap_unlink_pb8_1_common,
    { { &setup_mmap_unlink_pb8_2_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_1_final,
    { { &test_mmap_unlink_pb8_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pb0_0",
    &setup_mmap_unlink_pb0_0_common,
    { { &setup_mmap_unlink_pb8_0_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_0_final,
    { { &test_mmap_unlink_pb8_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pb0_1",
    &setup_mmap_unlink_pb0_0_common,
    { { &setup_mmap_unlink_pb8_2_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_0_final,
    { { &test_mmap_unlink_pb8_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pa8_0",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pa8_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_pa8_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pa8_1",
    &setup_mmap_unlink_pa8_1_common,
    { { &setup_mmap_unlink_pa8_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pa8_1_final,
    { { &test_mmap_unlink_pa8_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_pa0_0",
    &setup_mmap_unlink_pc_2_common,
    { { &setup_mmap_unlink_pa0_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_pa8_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p90_0",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pe_0_proc1 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p90_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p8_0",
    &setup_mmap_unlink_pc_0_common,
    { { &setup_mmap_unlink_pe_0_proc1 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_procfinal,
    { { &test_mmap_unlink_p90_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p70_0",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pe_0_proc1 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p70_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p70_1",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pe_0_proc1 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p70_1_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p50_0",
    &setup_mmap_unlink_pc_0_common,
    { { &setup_mmap_unlink_pe_0_proc1 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_procfinal,
    { { &test_mmap_unlink_p70_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p50_1",
    &setup_mmap_unlink_pc_0_common,
    { { &setup_mmap_unlink_pe_0_proc1 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_procfinal,
    { { &test_mmap_unlink_p70_1_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p38_0",
    &setup_mmap_unlink_pb8_0_common,
    { { &setup_mmap_unlink_pb8_0_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_0_final,
    { { &test_mmap_unlink_p38_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p38_1",
    &setup_mmap_unlink_pb8_1_common,
    { { &setup_mmap_unlink_pb8_0_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_1_final,
    { { &test_mmap_unlink_p38_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p38_2",
    &setup_mmap_unlink_pb8_0_common,
    { { &setup_mmap_unlink_pb8_2_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_0_final,
    { { &test_mmap_unlink_p38_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p38_3",
    &setup_mmap_unlink_pb8_1_common,
    { { &setup_mmap_unlink_pb8_2_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_1_final,
    { { &test_mmap_unlink_p38_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p30_0",
    &setup_mmap_unlink_pb0_0_common,
    { { &setup_mmap_unlink_pb8_0_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_0_final,
    { { &test_mmap_unlink_p38_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p30_1",
    &setup_mmap_unlink_pb0_0_common,
    { { &setup_mmap_unlink_pb8_2_proc0 }, { &setup_mmap_unlink_pb8_0_proc1 } },
    &setup_mmap_unlink_pb8_0_procfinal,
    &setup_mmap_unlink_pb8_0_final,
    { { &test_mmap_unlink_p38_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p2c_0",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pa8_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p2c_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p2c_1",
    &setup_mmap_unlink_pa8_1_common,
    { { &setup_mmap_unlink_pa8_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pa8_1_final,
    { { &test_mmap_unlink_p2c_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p2c_2",
    &setup_mmap_unlink_pa8_1_common,
    { { &setup_mmap_unlink_pa8_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pa8_1_final,
    { { &test_mmap_unlink_p2c_2_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p2c_3",
    &setup_mmap_unlink_p2c_3_common,
    { { &setup_mmap_unlink_p2c_3_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p2c_3_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p2c_4",
    &setup_mmap_unlink_p2c_4_common,
    { { &setup_mmap_unlink_p2c_4_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pa8_1_final,
    { { &test_mmap_unlink_p2c_4_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p2c_5",
    &setup_mmap_unlink_p2c_5_common,
    { { &setup_mmap_unlink_p2c_5_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p2c_5_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p2c_6",
    &setup_mmap_unlink_p2c_5_common,
    { { &setup_mmap_unlink_p2c_4_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p2c_5_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p2c_7",
    &setup_mmap_unlink_p2c_7_common,
    { { &setup_mmap_unlink_pa0_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_3_final,
    { { &test_mmap_unlink_p2c_2_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p24_0",
    &setup_mmap_unlink_pc_2_common,
    { { &setup_mmap_unlink_pa0_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p2c_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p24_1",
    &setup_mmap_unlink_p24_1_common,
    { { &setup_mmap_unlink_pa0_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p24_1_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p24_2",
    &setup_mmap_unlink_pc_2_common,
    { { &setup_mmap_unlink_pa0_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p2c_2_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p24_3",
    &setup_mmap_unlink_p24_1_common,
    { { &setup_mmap_unlink_pa0_0_proc0 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p24_3_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p10_0",
    &setup_mmap_unlink_pe_0_common,
    { { &setup_mmap_unlink_pe_0_proc1 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_final,
    { { &test_mmap_unlink_p10_0_0, 0, "mmap" },
      { &test_mmap_unlink_pe_0_1, 0, "unlink" } },
    &cleanup },
  { "fs-mmap_unlink_p0_0",
    &setup_mmap_unlink_pc_0_common,
    { { &setup_mmap_unlink_pe_0_proc1 }, { &setup_mmap_unlink_pe_0_proc1 } },
    &setup_mmap_unlink_pe_0_procfinal,
    &setup_mmap_unlink_pe_0_procfinal,
    { { &test_mmap_unlink_p10_0_0, 0, "mmap" },
      { &test_mmap_unlink_pc_0_1, 0, "unlink" } },
    &cleanup },
//+++ common
  {}
};
