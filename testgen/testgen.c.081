//+++ common
#define _GNU_SOURCE 1
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <setjmp.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <stdint.h>
#include <stdbool.h>
#include "fstest.h"

__attribute__((__unused__)) static void
init_map_anon(uintptr_t va, bool writable, char value)
{
  char *r = mmap((void*)va, 4096, PROT_READ | PROT_WRITE,
                 MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
  if (r == MAP_FAILED) setup_error("mmap");
  *r = value;
  if (!writable) {
    int r2 = mprotect(r, 4096, PROT_READ);
    if (r2 < 0) setup_error("mprotect");
  }
  // Ensure test cores don't shoot down the setup core
  xinvalidate(r, 4096);
}

__attribute__((__unused__)) static void
init_map_file(uintptr_t va, bool writable, const char *fname, off_t offset)
{
  int fd = open(fname, O_RDWR);
  if (fd < 0) setup_error("open");
  void *r = mmap((void*)va, 4096, PROT_READ | (writable ? PROT_WRITE : 0),
                 MAP_SHARED | MAP_FIXED, fd, offset);
  if (r == MAP_FAILED) setup_error("mmap");
  close(fd);
}

__attribute__((__weak__)) const char dataval0[4096] = {0};
__attribute__((__weak__)) const char dataval1[4096] = {1};
__attribute__((__weak__)) const char dataval2[4096] = {2};
__attribute__((__weak__)) const char dataval3[4096] = {3};
__attribute__((__weak__)) const char dataval4[4096] = {4};
__attribute__((__weak__)) const char dataval5[4096] = {5};
__attribute__((__weak__)) const char dataval6[4096] = {6};
__attribute__((__weak__)) const char dataval7[4096] = {7};
__attribute__((__weak__)) const char dataval8[4096] = {8};
__attribute__((__weak__)) const char dataval9[4096] = {9};
__attribute__((__weak__)) const char dataval10[4096] = {10};
__attribute__((__weak__)) const char dataval11[4096] = {11};
__attribute__((__weak__)) const char dataval12[4096] = {12};
__attribute__((__weak__)) const char dataval13[4096] = {13};
__attribute__((__weak__)) const char dataval14[4096] = {14};
__attribute__((__weak__)) const char dataval15[4096] = {15};
__attribute__((__weak__)) char datavalbuf[4096];

//+++ tests

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_pf8_0_0(void) {
  int r = lseek(10, 0, 999);
  expect_result("r", r, -1);
  expect_errno(22);
  return xerrno(r);
}
static int test_lseek_mmap_pf8_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
static void setup_lseek_mmap_pf8_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_pf8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_lseek_mmap_pf8_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_lseek_mmap_pf8_0_final(void) {
  unlink("__i0");
  close(20);
  close(21);
}
static void setup_lseek_mmap_pf8_0_procfinal(void) {
  close(20);
  close(21);
}

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pf8_1_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
// static void setup_lseek_mmap_pf8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pf8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pf8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pf8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pf8_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_pf8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
static void setup_lseek_mmap_pf8_4_final(void) {
  unlink("__i1");
  unlink("__i0");
  close(20);
  close(21);
}
// static void setup_lseek_mmap_pf8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_6_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_9_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pf8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_12_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pf8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_14_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pf8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pf8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_15_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pf8_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pf8_14_proc0
// static void setup_lseek_mmap_pf8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_16_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pf8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_17_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_18_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_18_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_19_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_20_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf8_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_21_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_22_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_22_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_23_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_23_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_24_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_24_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_24_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_25_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_25_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_26_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_26_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_26_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_27_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_27_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pf8_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_28_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_28_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pf8_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_28_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_29_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_29_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pf8_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_29_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_30_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_30_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_30_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_30_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_31_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_31_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_31_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_32_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_32_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_32_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_32_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_33_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_33_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_33_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_34_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_34_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_35_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_35_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_35_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_35_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_36_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_36_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pf8_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_36_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_36_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_37_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_37_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
static void setup_lseek_mmap_pf8_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_pf8_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_37_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pf8_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_38_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_38_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pf8_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_38_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_38_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf8_39_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf8_39_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pf8_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf8_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pf8_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf8_39_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf8_39_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pf6_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static void setup_lseek_mmap_pf6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pf6_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
static void setup_lseek_mmap_pf6_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_pf6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_0_proc0
// static void setup_lseek_mmap_pf6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
static void setup_lseek_mmap_pf6_1_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
}
// static void setup_lseek_mmap_pf6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
static void setup_lseek_mmap_pf6_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_pf6_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_lseek_mmap_pf6_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_lseek_mmap_pf6_2_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
  close(22);
  close(23);
}
static void setup_lseek_mmap_pf6_2_procfinal(void) {
  close(20);
  close(21);
  close(22);
  close(23);
}

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pf6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_7_proc0
// static void setup_lseek_mmap_pf6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pf6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
static void setup_lseek_mmap_pf6_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pf6_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
static void setup_lseek_mmap_pf6_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pf6_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pf6_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
static void setup_lseek_mmap_pf6_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_pf6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc0
// static void setup_lseek_mmap_pf6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
static void setup_lseek_mmap_pf6_6_final(void) {
  unlink("__i0");
  close(20);
  close(21);
  close(22);
  close(23);
}
// static void setup_lseek_mmap_pf6_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pf6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_4_proc0
// static void setup_lseek_mmap_pf6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf6_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf6_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pf6_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_5_proc0
// static void setup_lseek_mmap_pf6_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pf6_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pf6_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pf6_9_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static void setup_lseek_mmap_pf6_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pf6_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pf6_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf6_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf6_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
static void setup_lseek_mmap_pf6_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf6_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pf6_10_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pf6_10_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
static void setup_lseek_mmap_pf6_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf6_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pf6_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pf6_11_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
static void setup_lseek_mmap_pf6_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf6_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf6_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pf6_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pf6_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_12_proc0
// static void setup_lseek_mmap_pf6_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf6_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf6_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_14_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pf6_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_11_proc0
// static void setup_lseek_mmap_pf6_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pf6_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pf6_14_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_15_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pf6_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_7_proc0
// static void setup_lseek_mmap_pf6_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf6_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf6_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_16_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pf6_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pf6_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_10_proc0
// static void setup_lseek_mmap_pf6_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pf6_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pf6_16_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf6_17_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf6_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pf6_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pf6_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pf6_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf6_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf6_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf4_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pf4_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
static void setup_lseek_mmap_pf4_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_pf4_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf4_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf4_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf4_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf4_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
static void setup_lseek_mmap_pf4_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_pf4_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf4_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pf4_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf4_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf4_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pf4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pf4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf4_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf4_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf4_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf4_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pf4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
static void setup_lseek_mmap_pf4_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pf4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf4_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pf4_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf0_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pf0_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static void setup_lseek_mmap_pf0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pf0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pf0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pf0_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pf0_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_pf0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pf0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pf0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pf0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pf0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pec_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pec_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pec_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pec_1_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pec_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pec_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pec_2_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pec_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pec_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pec_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pec_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pec_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pec_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pec_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pec_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pec_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pec_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_7_proc0
// static void setup_lseek_mmap_pec_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pec_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pec_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_20_proc0
// static void setup_lseek_mmap_pec_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pec_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pec_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_0_proc0
// static void setup_lseek_mmap_pec_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pec_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pec_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_pec_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pec_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pec_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pec_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_7_proc0
// static void setup_lseek_mmap_pec_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pec_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pec_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pec_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pec_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_20_proc0
// static void setup_lseek_mmap_pec_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pec_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pec_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pe6_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static void setup_lseek_mmap_pe6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pe6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_0_proc0
// static void setup_lseek_mmap_pe6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pe6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_0_proc0
// static void setup_lseek_mmap_pe6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pe6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc0
// static void setup_lseek_mmap_pe6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pe6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pe6_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pe6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_10_proc0
// static void setup_lseek_mmap_pe6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pe6_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pe6_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pe6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_10_proc0
// static void setup_lseek_mmap_pe6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pe6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pe6_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pe6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_11_proc0
// static void setup_lseek_mmap_pe6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pe6_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pe6_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pe6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_5_proc0
// static void setup_lseek_mmap_pe6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pe6_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pe6_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pe6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc0
// static void setup_lseek_mmap_pe6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pe6_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pe6_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pe6_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_5_proc0
// static void setup_lseek_mmap_pe6_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pe6_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pe6_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pe6_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_11_proc0
// static void setup_lseek_mmap_pe6_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_2_proc1
// static void setup_lseek_mmap_pe6_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pe6_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pe6_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_4_proc0
// static void setup_lseek_mmap_pe6_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe6_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pe6_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_4_proc0
// static void setup_lseek_mmap_pe6_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe6_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pe6_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_7_proc0
// static void setup_lseek_mmap_pe6_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe6_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pe6_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_12_proc0
// static void setup_lseek_mmap_pe6_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_13_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe6_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_14_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pe6_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf6_12_proc0
// static void setup_lseek_mmap_pe6_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe6_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_15_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pe6_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pe6_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_7_proc0
// static void setup_lseek_mmap_pe6_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe6_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_16_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pe6_16_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static void setup_lseek_mmap_pe6_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pe6_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pe6_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe6_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe6_17_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe6_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pe6_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pe6_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pe6_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe6_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe6_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pe5_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pe5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pe5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf4_0_proc0
// static void setup_lseek_mmap_pe5_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe5_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pe5_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pe5_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf4_1_proc0
// static void setup_lseek_mmap_pe5_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe5_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pe5_2_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pe5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pe5_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf4_1_proc0
// static void setup_lseek_mmap_pe5_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe5_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pe5_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
static void setup_lseek_mmap_pe5_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pe5_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe5_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pe5_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pe5_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pec_8_proc0
// static void setup_lseek_mmap_pe5_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe5_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pe5_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pe5_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf4_2_proc0
// static void setup_lseek_mmap_pe5_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe5_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pe5_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pe5_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf4_3_proc0
// static void setup_lseek_mmap_pe5_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe5_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pe5_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pe5_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_20_proc0
// static void setup_lseek_mmap_pe5_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe5_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pe5_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
static void setup_lseek_mmap_pe5_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pe5_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe5_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pe5_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pe5_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf4_2_proc0
// static void setup_lseek_mmap_pe5_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe5_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pe5_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pe5_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf4_3_proc0
// static void setup_lseek_mmap_pe5_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_10_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe5_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pe5_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pe5_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pe5_3_proc0
// static void setup_lseek_mmap_pe5_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe5_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pe5_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pe5_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pe5_8_proc0
// static void setup_lseek_mmap_pe5_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pe5_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pe5_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pe5_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf4_0_proc0
// static void setup_lseek_mmap_pe5_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe5_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_14_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pe5_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pe5_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pec_8_proc0
// static void setup_lseek_mmap_pe5_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe5_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe5_15_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe5_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pe5_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pe5_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_20_proc0
// static void setup_lseek_mmap_pe5_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe5_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe5_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe0_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pe0_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static void setup_lseek_mmap_pe0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pe0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pe0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pe0_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pe0_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_pe0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pe0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pe0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pe0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pe0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pd8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pd8_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pd8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pd8_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pd8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pd8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pd8_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_pd8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pd8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pd8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x0);
// }
// ^ See setup_lseek_mmap_pd8_3_proc1
// static void setup_lseek_mmap_pd8_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pd8_6_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pd8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pd8_7_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pd8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pd8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pd8_8_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_pd8_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pd8_6_proc1
// static void setup_lseek_mmap_pd8_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pd8_7_proc1
// static void setup_lseek_mmap_pd8_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pd8_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x0);
// }
// ^ See setup_lseek_mmap_pd8_8_proc1
// static void setup_lseek_mmap_pd8_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd8_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pd8_1_proc1
// static void setup_lseek_mmap_pd8_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd8_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd8_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pd8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd8_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pd8_2_proc1
// static void setup_lseek_mmap_pd8_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd8_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
static void setup_lseek_mmap_pd6_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_lseek_mmap_pd6_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(22, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pd6_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pd6_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pd6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc0
// static void setup_lseek_mmap_pd6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc1
// static void setup_lseek_mmap_pd6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pd6_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
static void setup_lseek_mmap_pd6_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pd6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc1
// static void setup_lseek_mmap_pd6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pd6_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pd6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc0
static void setup_lseek_mmap_pd6_4_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(23, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pd6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pd6_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pd6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_3_proc0
// static void setup_lseek_mmap_pd6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_4_proc1
// static void setup_lseek_mmap_pd6_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pd6_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd6_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd6_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pd6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc0
// static void setup_lseek_mmap_pd6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_4_proc1
// static void setup_lseek_mmap_pd6_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pd6_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd6_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd6_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd6_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd6_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pd6_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_3_proc0
// static void setup_lseek_mmap_pd6_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc1
// static void setup_lseek_mmap_pd6_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pd6_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd6_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd6_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd6_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd6_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pd6_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_3_proc0
// static void setup_lseek_mmap_pd6_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_4_proc1
// static void setup_lseek_mmap_pd6_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pd6_11_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pd6_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd6_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd6_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd6_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pd6_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd6_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd6_13_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd6_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_14_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pd6_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd6_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd6_14_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd6_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd6_15_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd6_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pd6_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pd6_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd6_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd6_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd6_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd4_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pd4_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
// static void setup_lseek_mmap_pd4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pd4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pd4_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pd4_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd4_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd4_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd4_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pd4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pd4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pd4_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pd4_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd4_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd4_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd4_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pd4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pd4_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pd4_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd4_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd4_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd4_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pd4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pd4_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_1_proc1
// static void setup_lseek_mmap_pd4_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pd4_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd0_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pd0_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static void setup_lseek_mmap_pd0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pd0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pd0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pd0_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pd0_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_pd0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pd0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pd0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pd0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pd0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pcc_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pcc_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_pcc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pcc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pcc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pcc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pcc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pcc_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pcc_1_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pcc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pcc_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pcc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pcc_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pcc_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pcc_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pcc_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_pcc_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pcc_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pcc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pcc_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pcc_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pcc_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pcc_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_pcc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pcc_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pcc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pcc_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pcc_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pc6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pc6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pc6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc0
// static void setup_lseek_mmap_pc6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc1
// static void setup_lseek_mmap_pc6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pc6_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pc6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_3_proc0
// static void setup_lseek_mmap_pc6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc1
// static void setup_lseek_mmap_pc6_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pc6_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pc6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_3_proc0
// static void setup_lseek_mmap_pc6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc1
// static void setup_lseek_mmap_pc6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pc6_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pc6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc0
// static void setup_lseek_mmap_pc6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_4_proc1
// static void setup_lseek_mmap_pc6_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pc6_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_2_common
// static void setup_lseek_mmap_pc6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_3_proc0
// static void setup_lseek_mmap_pc6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_4_proc1
// static void setup_lseek_mmap_pc6_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_final
// static void setup_lseek_mmap_pc6_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pc6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc0
// static void setup_lseek_mmap_pc6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc1
// static void setup_lseek_mmap_pc6_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pc6_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pc6_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_1_proc0
// static void setup_lseek_mmap_pc6_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_4_proc1
// static void setup_lseek_mmap_pc6_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pc6_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_6_common
// static void setup_lseek_mmap_pc6_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_3_proc0
// static void setup_lseek_mmap_pc6_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd6_4_proc1
// static void setup_lseek_mmap_pc6_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_6_final
// static void setup_lseek_mmap_pc6_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_lseek_mmap_pf6_2_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pc6_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc6_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc6_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc6_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pc6_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc6_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc6_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc6_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pc6_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc6_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc6_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc6_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pc6_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc6_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc6_13_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc6_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_14_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pc6_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc6_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc6_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc6_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc6_15_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc6_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pc6_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_pc6_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc6_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc6_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc6_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pc5_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pc5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pc5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc5_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pc5_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc5_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pc5_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pc5_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc5_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_1_proc1
// static void setup_lseek_mmap_pc5_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc5_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pc5_2_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pc5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pc5_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc5_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_1_proc1
// static void setup_lseek_mmap_pc5_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc5_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pc5_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pc5_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc5_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_1_proc1
// static void setup_lseek_mmap_pc5_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc5_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pc5_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pc5_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc5_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_1_proc1
// static void setup_lseek_mmap_pc5_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc5_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pc5_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pc5_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pc5_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pc5_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc5_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pc5_6_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pc5_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pc5_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
static void setup_lseek_mmap_pc5_6_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pc5_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc5_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pc5_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pc5_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc5_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pc5_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc5_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pc5_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pc5_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc5_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pc5_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc5_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pc5_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pc5_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc5_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_5_proc1
// static void setup_lseek_mmap_pc5_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc5_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pc5_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pc5_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc5_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pc5_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc5_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pc5_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pc5_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc5_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_5_proc1
// static void setup_lseek_mmap_pc5_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc5_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pc5_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pc5_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc5_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_5_proc1
// static void setup_lseek_mmap_pc5_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pc5_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pc5_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pc5_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
static void setup_lseek_mmap_pc5_13_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pc5_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc5_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_14_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pc5_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pc5_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc5_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pc5_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc5_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc5_15_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc5_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pc5_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pc5_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc5_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pc5_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc5_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc0_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
static int test_lseek_mmap_pc0_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static void setup_lseek_mmap_pc0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pc0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pc0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pc0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pc0_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_pc0_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_pc0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_pc0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pc0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pc0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pc0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_pbe_0_0(void) {
  int r = lseek(10, -4096, SEEK_SET);
  expect_result("r", r, -1);
  expect_errno(22);
  return xerrno(r);
}
// static int test_lseek_mmap_pbe_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pbe_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_pbe_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_lseek_mmap_pbe_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
}
static void setup_lseek_mmap_pbe_0_final(void) {
  unlink("__i0");
}
static void setup_lseek_mmap_pbe_0_procfinal(void) {
  
}

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pbe_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pbe_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_pbe_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pbe_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbe_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbe_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pbe_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_4_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pbe_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_5_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2297000);
}
// static void setup_lseek_mmap_pbe_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_6_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pbe_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_7_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pbe_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_pbe_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 34267136, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x20ad000);
}
// static void setup_lseek_mmap_pbe_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
static void setup_lseek_mmap_pbe_7_final(void) {
  unlink("__i1");
  unlink("__i0");
}
// static void setup_lseek_mmap_pbe_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_8_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_7_common
static void setup_lseek_mmap_pbe_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 34267136, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x20ad000);
}
// static void setup_lseek_mmap_pbe_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pbe_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_9_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pbe_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_10_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2297000);
}
// static void setup_lseek_mmap_pbe_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_11_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_7_common
static void setup_lseek_mmap_pbe_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2297000);
}
// static void setup_lseek_mmap_pbe_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pbe_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_12_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pbe_12_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_pbe_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pbe_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_13_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
static void setup_lseek_mmap_pbe_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pbe_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbe_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbe_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_14_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
static void setup_lseek_mmap_pbe_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2297000);
}
// static void setup_lseek_mmap_pbe_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbe_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbe_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_15_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pbe_15_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_pbe_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2297000);
}
// static void setup_lseek_mmap_pbe_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbe_15_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pbe_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_16_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2297000);
}
// static void setup_lseek_mmap_pbe_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_17_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pbe_17_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_pbe_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pbe_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_18_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pbe_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pbe_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbe_18_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbe_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_19_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pbe_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_20_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
static void setup_lseek_mmap_pbe_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2297000);
}
// static void setup_lseek_mmap_pbe_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_21_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_7_common
static void setup_lseek_mmap_pbe_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2297000);
}
// static void setup_lseek_mmap_pbe_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_21_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pbe_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_22_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_22_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
static void setup_lseek_mmap_pbe_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2297000);
}
// static void setup_lseek_mmap_pbe_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbe_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbe_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_23_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_23_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_15_common
static void setup_lseek_mmap_pbe_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2297000);
}
// static void setup_lseek_mmap_pbe_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbe_23_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pbe_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_24_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_24_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pbe_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pbe_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbe_24_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbe_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_25_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_25_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pbe_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pbe_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbe_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbe_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbe_26_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbe_26_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pbe_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
static void setup_lseek_mmap_pbe_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pbe_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbe_26_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbe_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbd8_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbd8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pbd8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
// static void setup_lseek_mmap_pbd8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pbe_2_proc0
// static void setup_lseek_mmap_pbd8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbd8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbd8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbd8_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbd8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
static void setup_lseek_mmap_pbd8_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_pbd8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pbe_2_proc0
// static void setup_lseek_mmap_pbd8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbd8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pbd8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbd8_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbd8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pbd8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
static void setup_lseek_mmap_pbd8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pbd8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbd8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbd8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbd8_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbd8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pbd8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbd8_1_common
// static void setup_lseek_mmap_pbd8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pbd8_2_proc0
// static void setup_lseek_mmap_pbd8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbd8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pbd8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbd0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbd0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pbd0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pbd0_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pbd0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbd0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbd0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbd0_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbd0_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
static void setup_lseek_mmap_pbd0_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_pbd0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pbd0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
static void setup_lseek_mmap_pbd0_1_final(void) {
  unlink("__i0");
  unlink("__i1");
}
// static void setup_lseek_mmap_pbd0_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbd0_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbd0_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pbd0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pbd0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pbd0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbd0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbd0_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbd0_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbd0_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pbd0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pbd0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pbd0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbd0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbd0_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbc_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbc_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_pbc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pbc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pbc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbc_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbc_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbb0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbb0_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pbb0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pbb0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_proc0
// static void setup_lseek_mmap_pbb0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbb0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbb0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbb0_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbb0_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pbb0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pbb0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pbb0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbb0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbb0_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbb0_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbb0_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pbb0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
// static void setup_lseek_mmap_pbb0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pbe_2_proc0
// static void setup_lseek_mmap_pbb0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbb0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbb0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbb0_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbb0_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pbb0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pbb0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_proc0
// static void setup_lseek_mmap_pbb0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbb0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbb0_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbb0_4_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbb0_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pbb0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pbb0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pbb0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pbb0_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pbb0_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pbb0_5_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pbb0_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pbb0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
// static void setup_lseek_mmap_pbb0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pbe_2_proc0
// static void setup_lseek_mmap_pbb0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pbb0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pbb0_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb98_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb98_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pb98_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
// static void setup_lseek_mmap_pb98_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pbe_2_proc0
// static void setup_lseek_mmap_pb98_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pb98_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pb98_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb98_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb98_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pb98_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbd8_1_common
// static void setup_lseek_mmap_pb98_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pbe_2_proc0
// static void setup_lseek_mmap_pb98_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pb98_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pb98_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb98_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb98_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pb98_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
// static void setup_lseek_mmap_pb98_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pbd8_2_proc0
// static void setup_lseek_mmap_pb98_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pb98_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pb98_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb98_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb98_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pb98_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbd8_1_common
// static void setup_lseek_mmap_pb98_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pbd8_2_proc0
// static void setup_lseek_mmap_pb98_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pb98_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pb98_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pb94_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pb94_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_pb94_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pb94_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pb94_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb94_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
static void setup_lseek_mmap_pb94_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_lseek_mmap_pb94_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pb94_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pb94_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
static void setup_lseek_mmap_pb94_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb94_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb94_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_4_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
static int test_lseek_mmap_pb94_4_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
  
  return xerrno(r);
}
static void setup_lseek_mmap_pb94_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_pb94_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb94_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb94_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_5_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
static int test_lseek_mmap_pb94_5_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pb94_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pb94_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_proc0
// static void setup_lseek_mmap_pb94_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb94_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_6_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_pb94_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_pb94_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb94_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_7_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pb94_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_pb94_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb94_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_8_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_pb94_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb94_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pb94_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_9_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_pb94_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb94_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pb94_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_10_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_pb94_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb94_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pb94_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_11_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_pb94_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
static void setup_lseek_mmap_pb94_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb94_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb94_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_12_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pb94_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb94_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pb94_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_13_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pb94_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pb94_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb94_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_14_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pb94_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_pb94_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb94_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_15_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pb94_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb94_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb94_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_16_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb94_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pb94_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pb94_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb94_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb94_17_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
static int test_lseek_mmap_pb94_17_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x2000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pb94_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb94_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pb94_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb94_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb94_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb8_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb8_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_pb8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pb8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb8_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb6_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb6_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pb6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pb6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb6_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb6_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb6_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pb6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
static void setup_lseek_mmap_pb6_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pb6_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb6_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb6_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pb6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
static void setup_lseek_mmap_pb6_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x4d4000);
}
// static void setup_lseek_mmap_pb6_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb6_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb6_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
static void setup_lseek_mmap_pb6_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_lseek_mmap_pb6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
static void setup_lseek_mmap_pb6_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x4d4000);
}
// static void setup_lseek_mmap_pb6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb6_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb6_4_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb6_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pb6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
static void setup_lseek_mmap_pb6_4_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pb6_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb6_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb6_5_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb6_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pb6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
static void setup_lseek_mmap_pb6_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
}
// static void setup_lseek_mmap_pb6_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb6_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb6_6_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb6_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pb6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb6_3_common
// static void setup_lseek_mmap_pb6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
static void setup_lseek_mmap_pb6_6_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x4d4000);
}
// static void setup_lseek_mmap_pb6_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb6_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb6_7_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb6_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pb6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pb6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pb6_7_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pb6_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb6_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb6_8_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb6_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pb6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pb6_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pb6_8_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pb6_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb6_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb58_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb58_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pb58_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
static void setup_lseek_mmap_pb58_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 7356416, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pb58_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pb58_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pb58_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb58_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb58_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pb58_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbd8_1_common
// static void setup_lseek_mmap_pb58_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pb58_0_proc0
// static void setup_lseek_mmap_pb58_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pb58_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pb58_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb58_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb58_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pb58_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
// static void setup_lseek_mmap_pb58_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pb58_0_proc0
// static void setup_lseek_mmap_pb58_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pb58_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pb58_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb58_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb58_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pb58_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbd8_1_common
// static void setup_lseek_mmap_pb58_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pb58_0_proc0
// static void setup_lseek_mmap_pb58_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pb58_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pb58_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb50_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb50_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pb50_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pb50_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_lseek_mmap_pb50_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb50_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb50_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb50_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb50_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pb50_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_pb50_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
static void setup_lseek_mmap_pb50_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb50_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb50_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb50_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb50_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pb50_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb50_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb50_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb50_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb50_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb4_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb4_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_pb4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pb4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb4_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb4_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb30_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb30_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_pb30_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb30_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pb30_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb30_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb30_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb30_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb30_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_pb30_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb30_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pb30_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb30_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb30_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb18_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb18_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pb18_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
// static void setup_lseek_mmap_pb18_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pb58_0_proc0
// static void setup_lseek_mmap_pb18_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pb18_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pb18_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb18_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb18_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pb18_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbd8_1_common
// static void setup_lseek_mmap_pb18_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pb58_0_proc0
// static void setup_lseek_mmap_pb18_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pb18_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pb18_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb18_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb18_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pb18_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbe_2_common
// static void setup_lseek_mmap_pb18_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pb58_0_proc0
// static void setup_lseek_mmap_pb18_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pb18_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pb18_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb18_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb18_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pb18_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pbd8_1_common
// static void setup_lseek_mmap_pb18_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pb58_0_proc0
// static void setup_lseek_mmap_pb18_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pb18_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pb18_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pb14_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pb14_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pb14_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pb14_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_1_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pb14_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pb14_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_2_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
static int test_lseek_mmap_pb14_2_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pb14_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb14_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb14_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_3_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pb14_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pb14_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pb14_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb14_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb14_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_4_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pb14_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb14_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_5_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pb14_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pb14_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_pb14_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb14_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_6_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pb14_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pb14_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
static void setup_lseek_mmap_pb14_6_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pb14_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb14_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_7_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_pb14_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb14_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb14_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_8_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_pb14_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pb14_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb14_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_pb14_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pb14_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_9_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_pb14_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb14_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pb14_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_10_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pb14_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb14_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb14_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb14_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_11_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pb14_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb14_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb14_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_12_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pb14_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb14_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb14_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pb14_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb14_13_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb14_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pb14_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pb14_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pb14_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pb14_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb14_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pb0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_SET);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pbe_0_0
// static int test_lseek_mmap_pb0_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_pb0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_common
// static void setup_lseek_mmap_pb0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_pb0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pb0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pb0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_pae_0_0(void) {
  int r = lseek(10, 0, SEEK_SET);
  expect_result("r", r, 0);
  return xerrno(r);
}
// static int test_lseek_mmap_pae_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pae_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
// static void setup_lseek_mmap_pae_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pae_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pae_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pae_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pae_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pae_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_4_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_pae_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pae_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pae_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pae_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_pae_7_0(void) {
  int r = lseek(10, 4096, SEEK_SET);
  expect_result("r", r, 4096);
  return xerrno(r);
}
// static int test_lseek_mmap_pae_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pae_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_8_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_pae_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_9_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pae_9_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_pae_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_pae_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_9_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pae_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_10_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pae_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_11_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_pae_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_pae_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pae_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_12_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_pae_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_13_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_pae_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_14_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_pae_14_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_pae_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_pae_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_14_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pae_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_15_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pae_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_6_proc0
// static void setup_lseek_mmap_pae_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_16_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_pae_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x1000);
}
// static void setup_lseek_mmap_pae_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_16_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pae_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_17_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_pae_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x1000);
}
// static void setup_lseek_mmap_pae_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_17_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pae_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_18_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pae_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_pae_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_18_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_19_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pae_14_common
static void setup_lseek_mmap_pae_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x1000);
}
// static void setup_lseek_mmap_pae_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_19_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pae_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_20_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pae_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_7_proc0
// static void setup_lseek_mmap_pae_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_21_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pae_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_21_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_22_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_22_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_pae_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x1000);
}
// static void setup_lseek_mmap_pae_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_22_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pae_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_23_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_23_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pae_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_23_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_24_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_24_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_pae_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x1000);
}
// static void setup_lseek_mmap_pae_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_24_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pae_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_25_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_25_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pae_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_26_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_26_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pae_14_common
static void setup_lseek_mmap_pae_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x1000);
}
// static void setup_lseek_mmap_pae_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_26_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pae_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_27_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_27_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pae_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_12_proc0
// static void setup_lseek_mmap_pae_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_28_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_28_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pae_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_28_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_29_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_29_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_pae_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_30_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_30_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_pae_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_31_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_31_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_pae_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_pae_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_31_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pae_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_32_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_32_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_pae_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_pae_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_32_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_pae_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_33_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_33_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pae_14_common
static void setup_lseek_mmap_pae_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_pae_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_33_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_pae_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_34_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_34_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pae_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_34_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_35_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_35_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_pae_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_35_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_35_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_36_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_36_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_pae_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_36_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_37_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_37_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_pae_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_37_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_38_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_38_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x26000);
}
// static void setup_lseek_mmap_pae_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_38_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_38_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_39_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_39_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pae_39_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_6_proc0
// static void setup_lseek_mmap_pae_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_39_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_39_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_40_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_40_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x26000);
}
// static void setup_lseek_mmap_pae_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_40_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_40_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_41_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_41_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pae_41_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_12_proc0
// static void setup_lseek_mmap_pae_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_41_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_41_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_42_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_42_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_42_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pae_42_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_17_proc0
// static void setup_lseek_mmap_pae_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_42_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_42_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_43_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_43_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_43_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_pae_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_43_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_43_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_44_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_44_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_44_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_44_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_pae_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_44_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_44_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_45_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_45_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_45_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_pae_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_45_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_45_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_46_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_46_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_46_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_pae_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_46_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_46_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_47_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_47_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_47_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_47_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_pae_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_47_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_47_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_48_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_48_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_48_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_48_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_pae_48_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_48_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_48_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_49_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_49_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_49_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_49_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_pae_49_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_49_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_49_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_50_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_50_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_50_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_50_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_pae_50_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_50_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_50_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_51_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pae_51_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_51_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pae_51_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_25_proc0
// static void setup_lseek_mmap_pae_51_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_51_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_51_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_52_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_52_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_52_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_52_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x26000);
}
// static void setup_lseek_mmap_pae_52_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_52_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_52_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_53_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_53_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_53_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pae_53_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_17_proc0
// static void setup_lseek_mmap_pae_53_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_53_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_53_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_54_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_54_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_54_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_54_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x26000);
}
// static void setup_lseek_mmap_pae_54_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_54_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_54_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_55_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_55_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_55_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pae_55_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_18_proc0
// static void setup_lseek_mmap_pae_55_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_55_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_55_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_56_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_56_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_56_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pae_56_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x26000);
}
// static void setup_lseek_mmap_pae_56_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_56_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_56_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_57_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_57_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_57_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pae_57_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_24_proc0
// static void setup_lseek_mmap_pae_57_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pae_57_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pae_57_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_58_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_58_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_58_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pae_58_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x26000);
}
// static void setup_lseek_mmap_pae_58_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_58_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_58_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pae_59_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pae_59_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_pae_59_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pae_59_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_25_proc0
// static void setup_lseek_mmap_pae_59_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pae_59_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pae_59_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad8_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pad8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pad8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pad8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pad8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pad8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad8_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pad8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pad8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_pad8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pad8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pad8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad8_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pad8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
static void setup_lseek_mmap_pad8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pad8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pad8_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pad8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad8_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pad8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pad8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_pad8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pad8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pad8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad8_4_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad8_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pad8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pad8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_pad8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pad8_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pad8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad8_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad8_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pad8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pad8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pad8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pad8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pad8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad8_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad8_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pad8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pad8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_pad8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pad8_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pad8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad8_7_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad8_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_pad8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pad8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pad8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pad8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pad8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad0_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pad0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pad0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_pad0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pad0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pad0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad0_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad0_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pad0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_pad0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_pad0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pad0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pad0_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad0_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad0_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pad0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_pad0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pad0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pad0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pad0_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad0_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad0_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pad0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_pad0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pad0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pad0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pad0_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad0_4_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad0_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pad0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
static void setup_lseek_mmap_pad0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pad0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pad0_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pad0_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad0_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad0_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pad0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pad0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pad0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pad0_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pad0_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad0_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad0_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pad0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pad0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pad0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pad0_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pad0_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad0_7_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad0_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_pad0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pad0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pad0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pad0_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pad0_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pad0_8_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pad0_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pad0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pad0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pad0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pad0_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pad0_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pac_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pac_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_pac_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pac_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pac_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pac_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pac_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pac_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pac_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_pac_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pac_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pac_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pac_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pac_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pab0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_pab0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pab0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pab0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pab0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pab0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pab0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_pab0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pab0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pab0_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pab0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pab0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pab0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pab0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pab0_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pab0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pab0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_pab0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pab0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pab0_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_4_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pab0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pab0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pab0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pab0_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pab0_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pab0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
static void setup_lseek_mmap_pab0_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_pab0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pab0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pab0_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pab0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pab0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pab0_5_proc0
// static void setup_lseek_mmap_pab0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pab0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pab0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_7_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pab0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pab0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pab0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pab0_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pab0_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_8_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_pab0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pab0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_pab0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pab0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pab0_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_9_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pab0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pab0_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pab0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pab0_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pab0_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_10_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pab0_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pab0_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pab0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pab0_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pab0_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pab0_11_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pab0_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_pab0_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pab0_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_pab0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pab0_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pab0_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa98_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa98_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pa98_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa98_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_pa98_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pa98_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa98_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa98_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa98_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pa98_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa98_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_pa98_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pa98_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa98_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa98_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa98_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pa98_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa98_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_pa98_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pa98_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa98_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa98_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa98_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pa98_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa98_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_pa98_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pa98_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa98_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa98_4_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa98_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pa98_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa98_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_pa98_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pa98_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa98_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa98_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa98_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pa98_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa98_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_pa98_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pa98_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa98_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa98_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa98_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pa98_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa98_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_pa98_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pa98_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa98_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa98_7_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa98_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_pa98_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa98_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_pa98_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_pa98_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa98_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_pa94_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_1_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_pa94_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pa94_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_pa94_3_0(void) {
  int r = lseek(10, 8192, SEEK_SET);
  expect_result("r", r, 8192);
  return xerrno(r);
}
static int test_lseek_mmap_pa94_3_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x2000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pa94_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pa94_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_4_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa94_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_proc0
// static void setup_lseek_mmap_pa94_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa94_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pa94_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa94_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_proc0
// static void setup_lseek_mmap_pa94_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa94_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_7_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa94_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_proc0
// static void setup_lseek_mmap_pa94_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa94_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_8_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa94_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_pa94_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pa94_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_9_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_pa94_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa94_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_3_proc0
// static void setup_lseek_mmap_pa94_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa94_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_10_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_pa94_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pa94_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_11_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_pa94_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa94_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_3_proc0
// static void setup_lseek_mmap_pa94_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa94_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_12_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_pa94_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa94_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_13_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_pa94_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa94_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_14_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
static int test_lseek_mmap_pa94_14_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pa94_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa94_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_15_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pa94_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_16_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa94_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa94_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_17_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pa94_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_18_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_18_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_pa94_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa94_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_19_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa94_19_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
static void setup_lseek_mmap_pa94_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pa94_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_19_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa94_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_20_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_20_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_pa94_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_proc0
// static void setup_lseek_mmap_pa94_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_20_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa94_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_21_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa94_21_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa94_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa94_19_proc0
// static void setup_lseek_mmap_pa94_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_21_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa94_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_22_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa94_22_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_pa94_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_22_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_6_proc0
// static void setup_lseek_mmap_pa94_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_22_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_23_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_23_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pa94_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_23_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_24_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_24_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_pa94_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pa94_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_24_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_25_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_25_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_25_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pa94_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_25_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_26_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_26_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_pa94_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pa94_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_26_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_26_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_27_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_27_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_pa94_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pa94_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_27_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_27_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_28_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_28_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_pa94_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pa94_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_28_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_29_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa94_29_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_pa94_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_30_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa94_30_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_pa94_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pa94_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_31_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_31_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_31_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pa94_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_32_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_32_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_pa94_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_32_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_33_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_33_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa94_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_33_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa94_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_33_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_34_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_34_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_34_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_pa94_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_34_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_35_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_35_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa94_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa94_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_35_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_36_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa94_36_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_pa94_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_36_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pa94_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_36_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_37_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa94_37_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_pa94_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa94_28_proc0
// static void setup_lseek_mmap_pa94_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_37_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_38_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_38_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_pa94_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_38_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pa94_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_38_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_38_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_39_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_39_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa94_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_39_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa94_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_39_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_39_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_40_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_40_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_pa94_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_40_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_pa94_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_40_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_40_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_41_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_41_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa94_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa94_41_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa94_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_41_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_41_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_42_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
static int test_lseek_mmap_pa94_42_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x3000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pa94_42_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_42_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pa94_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_42_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_42_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_43_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
static int test_lseek_mmap_pa94_43_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x3000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pa94_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_43_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pa94_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_43_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_43_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_44_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa94_44_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_17_1
// static void setup_lseek_mmap_pa94_44_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_44_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_pa94_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_44_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_44_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_45_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa94_45_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_17_1
// static void setup_lseek_mmap_pa94_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_45_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_pa94_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_45_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_45_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_46_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa94_46_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_17_1
// static void setup_lseek_mmap_pa94_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_46_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa94_28_proc0
// static void setup_lseek_mmap_pa94_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_46_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_46_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa94_47_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
static int test_lseek_mmap_pa94_47_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_pa94_47_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa94_47_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa94_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa94_47_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa94_47_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa8_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa8_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_pa8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa8_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa8_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa8_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_pa8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa8_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa8_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_pa6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa6_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa6_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_pa6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_pa6_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_pa6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_pa6_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_4_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
static void setup_lseek_mmap_pa6_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
// static void setup_lseek_mmap_pa6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pa6_4_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_pa6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa6_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_pa6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
static void setup_lseek_mmap_pa6_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_pa6_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa6_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_pa6_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_7_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
static void setup_lseek_mmap_pa6_7_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_pa6_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_8_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa6_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pa6_8_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_pa6_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_9_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa6_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pa6_9_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_pa6_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_10_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa6_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_pa6_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pa6_10_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x1000);
}
// static void setup_lseek_mmap_pa6_10_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa6_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_11_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa6_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa6_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_pa6_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_12_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa6_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_pa6_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_13_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa6_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa6_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa6_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_pa6_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_14_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa6_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa6_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_pa6_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_15_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa6_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa6_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_pa6_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_16_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa6_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa6_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_pa6_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_17_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pa6_17_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_pa6_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_18_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_pa6_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pa6_18_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x1e27000);
}
// static void setup_lseek_mmap_pa6_18_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa6_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa6_19_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa6_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_pa6_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa6_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa6_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_pa6_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa6_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa58_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa58_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pa58_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa58_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pa58_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pa58_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa58_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa58_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa58_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pa58_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa58_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pa58_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pa58_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa58_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa58_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa58_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pa58_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa58_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pa58_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pa58_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa58_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa58_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa58_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pa58_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa58_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pa58_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pa58_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa58_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa58_4_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa58_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pa58_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa58_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pa58_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pa58_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa58_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa58_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa58_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pa58_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa58_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pa58_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pa58_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa58_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa58_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa58_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pa58_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa58_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pa58_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pa58_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa58_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa58_7_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa58_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_pa58_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa58_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pa58_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pa58_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa58_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa50_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa50_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pa50_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa50_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa50_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa50_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa50_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa50_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa50_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pa50_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa50_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa50_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa50_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa50_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa50_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa50_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pa50_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa50_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pa50_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pa50_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa50_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa50_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa50_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pa50_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa50_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_pa50_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_pa50_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa50_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa50_4_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa50_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pa50_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa50_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa50_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_pa50_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa50_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa50_5_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa50_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pa50_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa50_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa50_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa50_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa50_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa50_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa50_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_pa50_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa50_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa50_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa50_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa50_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa4_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa4_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_pa4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa4_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa4_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa4_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa4_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_pa4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa4_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa4_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa30_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa30_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_pa30_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_pa30_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa30_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa30_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa30_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa30_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa30_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_pa30_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa30_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa30_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa30_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa30_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa30_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa30_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_pa30_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_pa30_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa30_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa30_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa30_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa30_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa30_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_pa30_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa30_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa30_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa30_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa30_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa18_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa18_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pa18_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa18_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pa18_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pa18_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa18_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa18_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa18_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pa18_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa18_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pa18_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pa18_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa18_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa18_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa18_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pa18_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa18_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pa18_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pa18_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa18_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa18_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa18_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pa18_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa18_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pa18_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_pa18_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa18_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa18_4_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa18_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pa18_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa18_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pa18_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pa18_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa18_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa18_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa18_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pa18_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa18_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_pa18_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pa18_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa18_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa18_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa18_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pa18_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_pa18_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pa18_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pa18_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_pa18_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa18_7_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa18_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_pa18_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_pa18_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_pa18_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_pa18_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_pa18_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa14_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_1_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa14_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_2_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_3_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_4_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_pa14_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_5_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa14_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_3_proc1
// static void setup_lseek_mmap_pa14_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa14_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_6_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_pa14_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_7_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa14_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_3_proc1
// static void setup_lseek_mmap_pa14_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa14_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_8_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa14_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_1_proc1
// static void setup_lseek_mmap_pa14_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa14_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_9_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_10_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa14_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_1_proc1
// static void setup_lseek_mmap_pa14_10_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa14_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_11_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_12_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_13_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_14_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa14_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_pa14_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_pa14_14_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa14_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_15_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_16_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa14_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_pa14_16_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa14_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_17_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_18_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_18_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa14_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_pa14_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_pa14_18_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa14_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_19_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa14_19_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_pa14_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_20_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_20_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_21_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_21_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_47_1
// static void setup_lseek_mmap_pa14_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_21_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_22_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_22_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_pa14_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_22_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_22_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_23_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_23_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_23_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_24_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_24_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_pa14_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_pa14_24_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_pa14_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_25_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa14_25_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_25_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_25_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_26_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_26_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_pa14_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_26_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_26_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_pa14_27_0(void) {
  int r = lseek(10, 12288, SEEK_SET);
  expect_result("r", r, 12288);
  return xerrno(r);
}
// static int test_lseek_mmap_pa14_27_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_14_1
// static void setup_lseek_mmap_pa14_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_27_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_27_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_28_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_28_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_28_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_28_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_29_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_29_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_30_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_30_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_30_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_31_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_31_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_pa14_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_31_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_32_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_32_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_32_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_33_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa14_33_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_pa14_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_33_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_33_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_34_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_34_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_14_1
// static void setup_lseek_mmap_pa14_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_34_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_34_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_35_0(void) {
//   int r = lseek(10, 12288, SEEK_SET);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa14_27_0
// static int test_lseek_mmap_pa14_35_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_47_1
// static void setup_lseek_mmap_pa14_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_pa14_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_35_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_36_0(void) {
//   int r = lseek(10, 8192, SEEK_SET);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_0
// static int test_lseek_mmap_pa14_36_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_pa14_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_36_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_36_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa14_37_0(void) {
//   int r = lseek(10, 4096, SEEK_SET);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_7_0
// static int test_lseek_mmap_pa14_37_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_pa14_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_pa14_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa14_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa14_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa14_37_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa0_0_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa0_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_pa0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_pa0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_pa0_1_0(void) {
//   int r = lseek(10, 0, SEEK_SET);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pae_0_0
// static int test_lseek_mmap_pa0_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_pa0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_pa0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_pa0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_pa0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_pa0_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p9f0_0_0(void) {
  int r = lseek(10, -4096, SEEK_CUR);
  expect_result("r", r, -1);
  expect_errno(22);
  return xerrno(r);
}
// static int test_lseek_mmap_p9f0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9f0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p9f0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p9f0_1_0(void) {
  int r = lseek(10, -8192, SEEK_CUR);
  expect_result("r", r, -1);
  expect_errno(22);
  return xerrno(r);
}
// static int test_lseek_mmap_p9f0_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9f0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p9f0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_2_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9f0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9f0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9f0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_6_proc0
// static void setup_lseek_mmap_p9f0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_4_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p9f0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p9f0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_5_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9f0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_7_proc0
// static void setup_lseek_mmap_p9f0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_6_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9f0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_6_proc0
// static void setup_lseek_mmap_p9f0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_7_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p9f0_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_p9f0_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_p9f0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p9f0_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_8_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9f0_7_common
static void setup_lseek_mmap_p9f0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_p9f0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p9f0_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_9_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p9f0_9_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_p9f0_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pab0_5_proc0
// static void setup_lseek_mmap_p9f0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9f0_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9f0_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p9f0_10_0(void) {
  int r = lseek(10, -31625216, SEEK_CUR);
  expect_result("r", r, -1);
  expect_errno(22);
  return xerrno(r);
}
// static int test_lseek_mmap_p9f0_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p9f0_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_p9f0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_11_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9f0_7_common
static void setup_lseek_mmap_p9f0_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x1000);
}
// static void setup_lseek_mmap_p9f0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p9f0_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_12_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9f0_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_21_proc0
// static void setup_lseek_mmap_p9f0_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_13_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9f0_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_pae_30_proc0
// static void setup_lseek_mmap_p9f0_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_14_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
// static void setup_lseek_mmap_p9f0_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_lseek_mmap_pae_31_proc0
// static void setup_lseek_mmap_p9f0_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_14_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p9f0_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_15_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9f0_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_24_proc0
// static void setup_lseek_mmap_p9f0_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_16_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9f0_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_12_proc0
// static void setup_lseek_mmap_p9f0_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_17_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pae_14_common
// static void setup_lseek_mmap_p9f0_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_lseek_mmap_pae_14_proc0
// static void setup_lseek_mmap_p9f0_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9f0_17_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p9f0_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_18_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p9f0_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p9f0_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_19_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
static void setup_lseek_mmap_p9f0_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p9f0_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9f0_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9f0_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_20_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p9f0_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pae_44_proc0
// static void setup_lseek_mmap_p9f0_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9f0_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9f0_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_21_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p9f0_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p9f0_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_21_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_22_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_22_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p9f0_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p9f0_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_22_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_23_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_23_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p9f0_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_45_proc0
// static void setup_lseek_mmap_p9f0_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9f0_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9f0_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_24_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_24_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p9f0_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p9f0_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_24_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_25_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_25_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p9f0_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p9f0_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_25_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_26_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_26_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9f0_7_common
static void setup_lseek_mmap_p9f0_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x1000);
}
// static void setup_lseek_mmap_p9f0_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_26_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p9f0_26_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_27_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_27_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
static void setup_lseek_mmap_p9f0_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p9f0_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9f0_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9f0_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_28_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_28_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p9f0_28_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p9f0_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x1000);
}
// static void setup_lseek_mmap_p9f0_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9f0_28_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p9f0_28_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_29_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_29_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p9f0_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_35_proc0
// static void setup_lseek_mmap_p9f0_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9f0_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9f0_29_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_30_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_30_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9f0_30_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_17_proc0
// static void setup_lseek_mmap_p9f0_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_31_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_31_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p9f0_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p9f0_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_32_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_32_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_p9f0_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p9f0_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_32_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p9f0_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_33_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_33_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p9f0_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p9f0_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_33_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_34_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_34_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p9f0_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_p9f0_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_34_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_35_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_35_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
static void setup_lseek_mmap_p9f0_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_p9f0_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9f0_35_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9f0_35_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_36_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9f0_36_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9f0_36_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_23_proc0
// static void setup_lseek_mmap_p9f0_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_36_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9f0_37_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9f0_37_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p9f0_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p9f0_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_p9f0_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9f0_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9f0_37_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ec_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ec_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p9ec_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p9ec_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p9ec_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9ec_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9ec_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ec_1_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ec_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p9ec_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p9ec_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p9ec_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9ec_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p9ec_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ec_2_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ec_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p9ec_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p9ec_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p9ec_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9ec_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9ec_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ec_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ec_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p9ec_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p9ec_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p9ec_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9ec_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p9ec_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9e8_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9e8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p9e8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9e8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p9e8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9e8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9e8_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9e8_1_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9e8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p9e8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p9e8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_3_proc0
// static void setup_lseek_mmap_p9e8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9e8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p9e8_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9e8_2_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9e8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p9e8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9e8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p9e8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9e8_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9e8_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9e8_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9e8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p9e8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9e8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9e8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9e8_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9e8_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9e0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9e0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_p9e0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9e0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9e0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9e0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9e0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9d8_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9d8_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p9d8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9d8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p9d8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9d8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9d8_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9d8_1_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9d8_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p9d8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9d8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p9d8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9d8_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9d8_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9d8_2_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9d8_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p9d8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9d8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9d8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9d8_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9d8_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9d8_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9d8_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p9d8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9d8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p9d8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9d8_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9d8_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9d8_4_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9d8_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p9d8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9d8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9d8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9d8_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9d8_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9d8_5_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9d8_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p9d8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p9d8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p9d8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9d8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9d8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9d8_6_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9d8_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p9d8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p9d8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p9d8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9d8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9d8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9d8_7_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9d8_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p9d8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9d8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p9d8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9d8_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9d8_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9cc_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9cc_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p9cc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p9cc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p9cc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9cc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9cc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9cc_1_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9cc_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p9cc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p9cc_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p9cc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9cc_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p9cc_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9cc_2_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9cc_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p9cc_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p9cc_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p9cc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9cc_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9cc_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9cc_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9cc_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p9cc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p9cc_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p9cc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p9cc_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p9cc_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ca_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p9ca_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9ca_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p9ca_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_1_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p9ca_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
static void setup_lseek_mmap_p9ca_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p9ca_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p9ca_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_2_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p9ca_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_p9ca_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ca_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p9ca_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9ca_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p9ca_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_4_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ca_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p9ca_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p9ca_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_3_proc0
// static void setup_lseek_mmap_p9ca_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p9ca_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_5_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ca_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p9ca_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p9ca_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_6_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ca_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p9ca_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p9ca_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_3_proc0
// static void setup_lseek_mmap_p9ca_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p9ca_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_7_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ca_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p9ca_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9ca_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9ca_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_8_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ca_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p9ca_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9ca_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9ca_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_9_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p9ca_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_p9ca_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_10_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p9ca_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p9ca_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_11_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p9ca_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p9ca_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9ca_1_proc0
// static void setup_lseek_mmap_p9ca_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p9ca_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_12_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p9ca_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p9ca_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_13_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ca_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p9ca_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p9ca_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_14_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p9ca_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_2_proc0
// static void setup_lseek_mmap_p9ca_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_15_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p9ca_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p9ca_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_16_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p9ca_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_2_proc0
// static void setup_lseek_mmap_p9ca_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ca_17_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9ca_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p9ca_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9ca_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p9ca_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9ca_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9ca_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9c0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9c0_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_p9c0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9c0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9c0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9c0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9c0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9b0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9b0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p9b0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9b0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9b0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9b0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9b0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9b0_1_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9b0_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p9b0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9b0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9b0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_p9b0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9b0_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9b0_2_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9b0_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p9b0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9b0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9b0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_pa6_7_proc1
// static void setup_lseek_mmap_p9b0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9b0_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9b0_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9b0_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p9b0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p9b0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9b0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_lseek_mmap_pa6_5_proc1
// static void setup_lseek_mmap_p9b0_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p9b0_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9b0_4_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9b0_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p9b0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9b0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9b0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_p9b0_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9b0_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9b0_5_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9b0_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p9b0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p9b0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_p9b0_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p9b0_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p9b0_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9b0_6_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9b0_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p9b0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9b0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9b0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_p9b0_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9b0_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9b0_7_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9b0_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p9b0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9b0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_p9b0_7_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p9b0_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9b0_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9b0_8_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9b0_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p9b0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9b0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9b0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_p9b0_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9b0_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ac_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ac_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p9ac_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p9ac_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p9ac_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p9ac_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9ac_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ac_1_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ac_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p9ac_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p9ac_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p9ac_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p9ac_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p9ac_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ac_2_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ac_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p9ac_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p9ac_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p9ac_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p9ac_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p9ac_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9ac_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9ac_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p9ac_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p9ac_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p9ac_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p9ac_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p9ac_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9a8_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9a8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p9a8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9a8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9a8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9a8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9a8_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9a8_1_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p9a8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p9a8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p9a8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p9a8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9a8_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9a8_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9a8_2_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9a8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p9a8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p9a8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9a8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p9a8_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p9a8_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p9a0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p9a0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_p9a0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p9a0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p9a0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p9a0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p9a0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p998_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p998_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p998_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p998_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p998_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p998_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p998_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p998_1_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p998_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p998_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p998_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p998_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p998_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p998_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98c_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p98c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p98c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p98c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p98c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p98c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98c_1_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p98c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p98c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p98c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p98c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p98c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98c_2_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98c_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p98c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p98c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p98c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p98c_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p98c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98c_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98c_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p98c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p98c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p98c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p98c_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p98c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98a_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p98a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p98a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_1_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p98a_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p98a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p98a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_6_proc1
// static void setup_lseek_mmap_p98a_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p98a_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_2_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p98a_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p98a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p98a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_3_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98a_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p98a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p98a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_4_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98a_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p98a_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p98a_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p98a_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p98a_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_5_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98a_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p98a_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p98a_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_6_proc1
// static void setup_lseek_mmap_p98a_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p98a_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_6_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p98a_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_p98a_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p98a_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_7_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98a_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p98a_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p98a_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p98a_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p98a_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_8_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p98a_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p98a_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p98a_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_9_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p98a_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_14_1
// static void setup_lseek_mmap_p98a_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p98a_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_10_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98a_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_p98a_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p98a_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_11_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98a_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p98a_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p98a_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p98a_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_12_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p98a_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p98a_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p98a_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p98a_13_0(void) {
//   int r = lseek(10, -8192, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_1_0
// static int test_lseek_mmap_p98a_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p98a_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p98a_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p98a_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p98a_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p98a_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p980_0_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p9f0_0_0
// static int test_lseek_mmap_p980_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_p980_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p980_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p980_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p980_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p980_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_0_0(void) {
  int r = lseek(10, 0, SEEK_CUR);
  expect_result("r", r, 0);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p970_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p970_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_1_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p970_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_2_0(void) {
  int r = lseek(10, 8192, SEEK_CUR);
  expect_result("r", r, 8192);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p970_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_3_0(void) {
  int r = lseek(10, 4096, SEEK_CUR);
  expect_result("r", r, 4096);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p970_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_4_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p970_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_5_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_6_proc0
// static void setup_lseek_mmap_p970_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_6_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_p9f0_4_proc0
// static void setup_lseek_mmap_p970_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_7_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p970_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_8_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p970_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p970_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_9_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_p970_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p970_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_9_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_10_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
// static void setup_lseek_mmap_p970_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_lseek_mmap_pae_9_proc0
// static void setup_lseek_mmap_p970_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_10_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_11_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p970_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p970_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_12_0(void) {
  int r = lseek(10, 0, SEEK_CUR);
  expect_result("r", r, 4096);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p970_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_13_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p970_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p970_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_14_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p970_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p970_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p970_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_15_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p970_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p970_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p970_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_16_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p970_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_p970_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p970_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_16_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_17_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p970_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p970_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_p970_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_18_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
// static void setup_lseek_mmap_p970_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i1", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_16_proc0
// static void setup_lseek_mmap_p970_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_18_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_19_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p970_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p970_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p970_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_20_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_21_proc0
// static void setup_lseek_mmap_p970_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_21_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
// static void setup_lseek_mmap_p970_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_lseek_mmap_pae_31_proc0
// static void setup_lseek_mmap_p970_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_21_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_22_0(void) {
  int r = lseek(10, 4096, SEEK_CUR);
  expect_result("r", r, 12288);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_22_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p970_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p970_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_22_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_23_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p970_23_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x3000);
}
// static void setup_lseek_mmap_p970_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_23_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_24_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p970_24_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pae_36_proc0
// static void setup_lseek_mmap_p970_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_24_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_25_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p970_25_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_p970_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p970_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_25_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_26_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p970_26_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9f0_7_common
static void setup_lseek_mmap_p970_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_lseek_mmap_p970_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_26_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_26_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_27_0(void) {
  int r = lseek(10, 159744, SEEK_CUR);
  expect_result("r", r, 319488);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_27_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_12_common
static void setup_lseek_mmap_p970_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p970_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_27_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_27_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_28_0(void) {
//   int r = lseek(10, 159744, SEEK_CUR);
//   expect_result("r", r, 319488);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_27_0
// static int test_lseek_mmap_p970_28_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_12_common
static void setup_lseek_mmap_p970_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p970_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_28_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_29_0(void) {
//   int r = lseek(10, 159744, SEEK_CUR);
//   expect_result("r", r, 319488);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_27_0
// static int test_lseek_mmap_p970_29_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_12_common
static void setup_lseek_mmap_p970_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x28000);
}
// static void setup_lseek_mmap_p970_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_30_0(void) {
//   int r = lseek(10, 159744, SEEK_CUR);
//   expect_result("r", r, 319488);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_27_0
// static int test_lseek_mmap_p970_30_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p970_30_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_p970_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x28000);
}
// static void setup_lseek_mmap_p970_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_30_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_31_0(void) {
//   int r = lseek(10, 159744, SEEK_CUR);
//   expect_result("r", r, 319488);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_27_0
// static int test_lseek_mmap_p970_31_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_12_common
static void setup_lseek_mmap_p970_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x28000);
}
// static void setup_lseek_mmap_p970_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_32_0(void) {
//   int r = lseek(10, 159744, SEEK_CUR);
//   expect_result("r", r, 319488);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_27_0
// static int test_lseek_mmap_p970_32_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_12_common
static void setup_lseek_mmap_p970_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p970_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_32_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_33_0(void) {
//   int r = lseek(10, 159744, SEEK_CUR);
//   expect_result("r", r, 319488);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_27_0
// static int test_lseek_mmap_p970_33_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_12_common
static void setup_lseek_mmap_p970_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p970_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_33_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_34_0(void) {
  int r = lseek(10, 163840, SEEK_CUR);
  expect_result("r", r, 323584);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_34_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9f0_7_common
static void setup_lseek_mmap_p970_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x704000);
}
// static void setup_lseek_mmap_p970_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_34_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_35_0(void) {
//   int r = lseek(10, 163840, SEEK_CUR);
//   expect_result("r", r, 323584);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_34_0
// static int test_lseek_mmap_p970_35_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p970_35_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p970_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x704000);
}
// static void setup_lseek_mmap_p970_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_35_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p970_35_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_36_0(void) {
  int r = lseek(10, 155648, SEEK_CUR);
  expect_result("r", r, 315392);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_36_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_12_common
static void setup_lseek_mmap_p970_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 163840, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2297000);
}
// static void setup_lseek_mmap_p970_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_36_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_37_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_37_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_28_common
// static void setup_lseek_mmap_p970_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_19_proc0
// static void setup_lseek_mmap_p970_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_37_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p970_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_38_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_38_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9f0_7_common
static void setup_lseek_mmap_p970_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x1000);
}
// static void setup_lseek_mmap_p970_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_38_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_38_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_39_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_39_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9f0_7_common
// static void setup_lseek_mmap_p970_39_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i1", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_24_proc0
// static void setup_lseek_mmap_p970_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_39_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_39_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_40_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_40_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_28_common
// static void setup_lseek_mmap_p970_40_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_26_proc0
// static void setup_lseek_mmap_p970_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_40_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p970_40_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_41_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_41_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_41_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_6_proc0
// static void setup_lseek_mmap_p970_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_41_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_41_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_42_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_42_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_42_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p970_42_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_12_proc0
// static void setup_lseek_mmap_p970_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_42_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_42_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_43_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_43_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_43_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p970_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_43_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_43_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_44_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_44_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_44_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_44_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_p9f0_31_proc0
// static void setup_lseek_mmap_p970_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_44_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_44_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_45_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p970_45_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_45_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p970_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_45_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_45_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_46_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_2_0
// static int test_lseek_mmap_p970_46_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_46_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_p9f0_31_proc0
// static void setup_lseek_mmap_p970_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_46_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_46_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_47_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_47_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_47_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p970_47_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_25_proc0
// static void setup_lseek_mmap_p970_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_47_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_47_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_48_0(void) {
  int r = lseek(10, 8192, SEEK_CUR);
  expect_result("r", r, 12288);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_48_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_48_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_48_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p970_48_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_48_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_48_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_49_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_49_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_49_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_49_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_p9f0_18_proc0
// static void setup_lseek_mmap_p970_49_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_49_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_49_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_50_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p970_50_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_50_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
static void setup_lseek_mmap_p970_50_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p970_50_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_50_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_50_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_51_0(void) {
  int r = lseek(10, 0, SEEK_CUR);
  expect_result("r", r, 8192);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_51_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_51_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p970_51_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_p970_50_proc0
// static void setup_lseek_mmap_p970_51_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_51_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_51_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_52_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_52_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_52_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_52_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_p970_52_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_52_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_52_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_53_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_48_0
// static int test_lseek_mmap_p970_53_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_53_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p970_53_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_45_proc0
// static void setup_lseek_mmap_p970_53_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_53_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_53_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_54_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_54_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_54_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_54_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_43_proc0
// static void setup_lseek_mmap_p970_54_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_54_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_54_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_55_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_55_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_55_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_55_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_17_proc0
// static void setup_lseek_mmap_p970_55_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_55_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_55_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_56_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p970_56_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_56_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_56_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_lseek_mmap_p970_56_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_56_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_56_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_57_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_57_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_57_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
static void setup_lseek_mmap_p970_57_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p970_57_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_57_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_57_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_58_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_2_0
// static int test_lseek_mmap_p970_58_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_58_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9f0_7_common
static void setup_lseek_mmap_p970_58_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_lseek_mmap_p970_58_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_58_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_58_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_59_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_59_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_59_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pae_14_common
static void setup_lseek_mmap_p970_59_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p970_59_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_59_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p970_59_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_60_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_60_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_60_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_9_common
// static void setup_lseek_mmap_p970_60_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_lseek_mmap_p9f0_32_proc0
// static void setup_lseek_mmap_p970_60_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_60_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p970_60_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_61_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_61_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_61_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_61_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p970_61_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_61_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_61_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_62_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_62_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_62_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_62_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x26000);
}
// static void setup_lseek_mmap_p970_62_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_62_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_62_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_63_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_2_0
// static int test_lseek_mmap_p970_63_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_63_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_63_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p970_63_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_63_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_63_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_64_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_64_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_64_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_64_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p970_64_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_64_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_64_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_65_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_65_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_65_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_65_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_p970_65_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_65_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_65_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_66_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_66_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_66_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_66_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_p970_66_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_66_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_66_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_67_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_67_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_67_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p970_67_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_pae_49_proc0
// static void setup_lseek_mmap_p970_67_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_67_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_67_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_68_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_68_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_68_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p970_68_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_50_proc0
// static void setup_lseek_mmap_p970_68_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_68_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_68_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_69_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_69_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_69_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p970_69_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_25_proc0
// static void setup_lseek_mmap_p970_69_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_69_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_69_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_70_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_70_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_70_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_70_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x26000);
// }
// ^ See setup_lseek_mmap_pae_56_proc0
// static void setup_lseek_mmap_p970_70_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_70_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_70_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_71_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_71_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_71_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_71_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_48_proc0
// static void setup_lseek_mmap_p970_71_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_71_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_71_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_72_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_72_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_72_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_72_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_24_proc0
// static void setup_lseek_mmap_p970_72_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_72_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_72_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_73_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_73_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_73_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_73_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_p970_8_proc0
// static void setup_lseek_mmap_p970_73_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_73_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_73_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_74_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_74_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_74_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_74_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p970_74_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_74_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_74_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_75_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_75_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_75_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p970_75_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_12_proc0
// static void setup_lseek_mmap_p970_75_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_75_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_75_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_76_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_76_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_76_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_76_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_23_proc0
// static void setup_lseek_mmap_p970_76_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_76_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_76_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_77_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_77_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_77_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p970_77_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p970_77_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_77_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_77_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_78_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_78_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_78_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_78_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p970_78_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_78_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_78_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_79_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p970_79_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_79_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p970_79_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_25_proc0
// static void setup_lseek_mmap_p970_79_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_79_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_79_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_80_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_80_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_80_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_80_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x26000);
}
// static void setup_lseek_mmap_p970_80_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_80_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_80_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_81_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_81_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_81_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_81_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_43_proc0
// static void setup_lseek_mmap_p970_81_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_81_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_81_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_82_0(void) {
  int r = lseek(10, 4096, SEEK_CUR);
  expect_result("r", r, 8192);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_82_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_82_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_82_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_p970_82_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_82_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_82_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_83_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p970_83_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_83_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_83_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_p9f0_22_proc0
// static void setup_lseek_mmap_p970_83_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_83_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_83_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_84_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_84_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_84_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_84_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_17_proc0
// static void setup_lseek_mmap_p970_84_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_84_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_84_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_85_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_85_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_85_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p970_85_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x26000);
// }
// ^ See setup_lseek_mmap_pae_54_proc0
// static void setup_lseek_mmap_p970_85_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_85_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_85_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_86_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_86_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_86_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_86_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_48_proc0
// static void setup_lseek_mmap_p970_86_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_86_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_86_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_87_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_87_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_87_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p970_87_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_50_proc0
// static void setup_lseek_mmap_p970_87_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_87_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_87_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_88_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_88_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_88_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_88_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_23_proc0
// static void setup_lseek_mmap_p970_88_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_88_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_88_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_89_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p970_89_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_89_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p970_89_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_45_proc0
// static void setup_lseek_mmap_p970_89_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_89_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_89_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_90_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p970_90_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_90_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_90_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_p9f0_25_proc0
// static void setup_lseek_mmap_p970_90_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_90_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_90_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_91_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p970_91_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_91_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p9f0_9_common
// static void setup_lseek_mmap_p970_91_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_p9f0_27_proc0
// static void setup_lseek_mmap_p970_91_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p970_91_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p970_91_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_92_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_92_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_92_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p970_92_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_p970_64_proc0
// static void setup_lseek_mmap_p970_92_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_92_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_92_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p970_93_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p970_93_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_93_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p970_93_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_24_proc0
// static void setup_lseek_mmap_p970_93_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_93_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_93_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p970_94_0(void) {
  int r = lseek(10, 8192, SEEK_CUR);
  expect_result("r", r, 16384);
  return xerrno(r);
}
// static int test_lseek_mmap_p970_94_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p970_94_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
static void setup_lseek_mmap_p970_94_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p970_94_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p970_94_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p970_94_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p96c_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p96c_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p96c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p96c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p96c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p96c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p96c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p96c_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p96c_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p96c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p96c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p96c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p96c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p96c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p96c_2_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p96c_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p96c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p96c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p96c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p96c_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p96c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p96c_3_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p96c_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p96c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p96c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p96c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p96c_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p96c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p96c_4_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p96c_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p96c_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p96c_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p96c_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p96c_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p96c_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p96c_5_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p96c_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p96c_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p96c_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p96c_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p96c_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p96c_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p96c_6_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p96c_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p96c_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p96c_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p96c_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p96c_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p96c_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p96c_7_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p96c_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p96c_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p96c_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p96c_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p96c_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p96c_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p968_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p968_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p968_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p968_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p968_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p968_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p968_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p968_1_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p968_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p968_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p968_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p968_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p968_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p968_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p968_2_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_2_0
// static int test_lseek_mmap_p968_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p968_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p968_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p968_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p968_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p968_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p968_3_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p968_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p968_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p968_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p968_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p968_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p968_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p968_4_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p968_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p968_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p968_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_3_proc0
// static void setup_lseek_mmap_p968_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p968_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p968_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p968_5_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p968_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p968_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p968_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p968_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p968_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p968_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p968_6_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p968_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p968_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p968_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p968_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p968_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p968_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p968_7_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p968_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p968_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p968_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_4_proc0
// static void setup_lseek_mmap_p968_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p968_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p968_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p968_8_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p968_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p968_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p968_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p968_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p968_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p968_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p960_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p960_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_p960_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p960_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p960_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p960_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p960_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p960_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p960_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_p960_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p960_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p960_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p960_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p960_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p958_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p958_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p958_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p958_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_1_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p958_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p958_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p958_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_2_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p958_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p958_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa94_28_proc0
// static void setup_lseek_mmap_p958_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_3_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p958_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p958_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_4_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p958_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p958_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_5_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p958_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p958_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_6_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p958_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p958_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_7_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p958_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p958_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p958_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p958_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p958_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_8_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p958_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p958_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p958_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p958_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p958_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_9_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p958_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p958_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p958_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_10_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p958_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p958_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p958_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p958_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p958_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p958_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_11_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p958_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p958_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p958_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_12_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p958_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p958_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p958_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_13_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p958_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p958_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p958_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p958_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p958_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p958_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_14_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p958_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p958_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_15_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p958_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p958_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_16_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p958_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p958_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p958_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p958_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p958_17_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p958_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p958_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p958_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa94_28_proc0
// static void setup_lseek_mmap_p958_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p958_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p958_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94c_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p94c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p94c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p94c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p94c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p94c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94c_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p94c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p94c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p94c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p94c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p94c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94c_2_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94c_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p94c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p94c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p94c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p94c_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p94c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94c_3_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94c_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p94c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p94c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p94c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p94c_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p94c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p94c_4_0(void) {
  int r = lseek(10, -4096, SEEK_CUR);
  expect_result("r", r, 0);
  return xerrno(r);
}
// static int test_lseek_mmap_p94c_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p94c_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p94c_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pab0_5_proc0
// static void setup_lseek_mmap_p94c_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p94c_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p94c_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94c_5_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94c_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p94c_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p94c_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p94c_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p94c_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p94c_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94c_6_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94c_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p94c_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p94c_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p94c_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p94c_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p94c_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94c_7_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94c_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p94c_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p94c_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p94c_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p94c_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p94c_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p94a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p94a_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p94a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p94a_2_0(void) {
  int r = lseek(10, 12288, SEEK_CUR);
  expect_result("r", r, 20480);
  return xerrno(r);
}
// static int test_lseek_mmap_p94a_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa94_30_proc0
// static void setup_lseek_mmap_p94a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_3_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p94a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_4_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_2_0
// static int test_lseek_mmap_p94a_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p94a_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_5_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_48_0
// static int test_lseek_mmap_p94a_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_p94a_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_6_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p94a_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_7_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p94a_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_3_proc0
// static void setup_lseek_mmap_p94a_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p94a_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_8_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p94a_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_9_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p94a_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_3_proc0
// static void setup_lseek_mmap_p94a_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p94a_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_10_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p94a_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_11_proc0
// static void setup_lseek_mmap_p94a_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_10_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p94a_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_11_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p94a_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p94a_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_12_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p94a_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_11_proc0
// static void setup_lseek_mmap_p94a_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p94a_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_13_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p94a_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_14_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p94a_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p94a_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_15_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_p94a_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p94a_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_16_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_p94a_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p94a_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_17_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p94a_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p94a_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p94a_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_18_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p94a_18_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_p94a_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_19_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p94a_19_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p94a_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_20_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p94a_20_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p94a_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p94a_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_21_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_21_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_p94a_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p94a_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_4_proc0
// static void setup_lseek_mmap_p94a_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_21_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p94a_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_22_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_22_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_p94a_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p94a_22_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_11_proc0
// static void setup_lseek_mmap_p94a_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_22_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p94a_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_23_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_23_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_p94a_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p94a_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_4_proc0
// static void setup_lseek_mmap_p94a_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_23_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p94a_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_24_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_24_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_p94a_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p94a_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_11_proc0
// static void setup_lseek_mmap_p94a_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_24_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p94a_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_25_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p94a_25_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_1
// static void setup_lseek_mmap_p94a_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_25_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p94a_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_25_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_26_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_26_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_p94a_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p94a_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_26_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_26_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_27_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p94a_27_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_p94a_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p94a_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_27_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_27_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_28_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p94a_28_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_28_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_p94a_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_28_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_29_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p94a_29_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p94a_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_30_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_30_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_30_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p94a_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_31_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_31_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_31_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p94a_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_32_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p94a_32_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p94a_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p94a_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_32_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_33_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_33_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p94a_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_33_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p94a_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_33_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_34_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p94a_34_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p94a_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_34_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p94a_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_34_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_35_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p94a_35_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p94a_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p94a_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p94a_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_35_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_36_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p94c_4_0
// static int test_lseek_mmap_p94a_36_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_1
// static void setup_lseek_mmap_p94a_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_36_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_2_proc0
// static void setup_lseek_mmap_p94a_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_36_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_37_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p94a_37_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p94a_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p94a_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_37_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_38_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 16384);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_94_0
// static int test_lseek_mmap_p94a_38_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_38_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa94_30_proc0
// static void setup_lseek_mmap_p94a_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_38_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_38_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_39_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p94a_39_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_39_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p94a_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_39_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_39_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_40_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p94a_40_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_40_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_6_proc0
// static void setup_lseek_mmap_p94a_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_40_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_40_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_41_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p94c_4_0
// static int test_lseek_mmap_p94a_41_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p94a_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_41_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p94a_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_41_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_41_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_42_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p94a_42_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_42_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_42_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_2_proc0
// static void setup_lseek_mmap_p94a_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_42_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_42_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_43_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p94c_4_0
// static int test_lseek_mmap_p94a_43_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_p94a_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_43_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p94a_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_43_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_43_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_44_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p94a_44_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p94a_44_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_44_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa94_30_proc0
// static void setup_lseek_mmap_p94a_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_44_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_44_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_45_0(void) {
//   int r = lseek(10, 12288, SEEK_CUR);
//   expect_result("r", r, 20480);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p94a_2_0
// static int test_lseek_mmap_p94a_45_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_p94a_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_45_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_6_proc0
// static void setup_lseek_mmap_p94a_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_45_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_45_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_46_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p94a_46_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_5_1
// static void setup_lseek_mmap_p94a_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_46_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_6_proc0
// static void setup_lseek_mmap_p94a_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_46_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_46_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p94a_47_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_48_0
// static int test_lseek_mmap_p94a_47_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p94a_47_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p94a_47_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_2_proc0
// static void setup_lseek_mmap_p94a_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p94a_47_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p94a_47_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p940_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p940_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_p940_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p940_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p940_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p940_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p940_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p940_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p940_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_p940_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p940_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p940_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p940_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p940_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p930_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p930_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p930_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p930_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p930_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_2_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p930_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_p930_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_3_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p930_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_pa6_7_proc1
// static void setup_lseek_mmap_p930_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_4_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p930_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_p930_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_5_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p930_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_p930_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x26000);
}
// static void setup_lseek_mmap_p930_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_6_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p930_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p930_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_p930_6_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x26000);
}
// static void setup_lseek_mmap_p930_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p930_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_7_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p930_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_p930_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_8_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p930_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p930_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_p930_8_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x26000);
}
// static void setup_lseek_mmap_p930_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p930_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_9_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p930_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_p930_9_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x26000);
}
// static void setup_lseek_mmap_p930_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_10_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p930_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_p930_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_11_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_48_0
// static int test_lseek_mmap_p930_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p930_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p930_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i1", 0x0);
// }
// ^ See setup_lseek_mmap_pa6_4_proc1
// static void setup_lseek_mmap_p930_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p930_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_12_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p930_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_p930_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_13_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p930_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pa6_9_proc1
// static void setup_lseek_mmap_p930_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p930_14_0(void) {
  int r = lseek(10, 12288, SEEK_CUR);
  expect_result("r", r, 16384);
  return xerrno(r);
}
// static int test_lseek_mmap_p930_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p930_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p930_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_p930_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_15_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p930_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p930_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_p930_15_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_p930_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p930_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_16_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p930_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_p930_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_17_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p930_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pa6_8_proc1
// static void setup_lseek_mmap_p930_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_18_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p930_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_p930_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p930_19_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p930_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p930_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p930_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p930_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_p930_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p930_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p92c_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p92c_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p92c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p92c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p92c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p92c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p92c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p92c_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p92c_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p92c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p92c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p92c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p92c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p92c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p92c_2_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p92c_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p92c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p92c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p92c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p92c_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p92c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p92c_3_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p92c_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p92c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p92c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p92c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p92c_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p92c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p92c_4_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p92c_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p92c_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p92c_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p92c_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p92c_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p92c_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p92c_5_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p92c_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p92c_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p92c_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p92c_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p92c_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p92c_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p92c_6_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p92c_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p92c_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p92c_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p92c_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p92c_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p92c_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p92c_7_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p92c_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p92c_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p92c_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p92c_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p92c_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p92c_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p928_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p928_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p928_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p928_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p928_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p928_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p928_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p928_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p928_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p928_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p928_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p928_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p928_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p928_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p928_2_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p928_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p928_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p928_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p928_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p928_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p928_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p928_3_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p928_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p928_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p928_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p928_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p928_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p928_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p928_4_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_48_0
// static int test_lseek_mmap_p928_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p928_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p928_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p928_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p928_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p928_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p928_5_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p928_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p928_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p928_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p928_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p928_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p928_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p928_6_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p928_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p928_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p928_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p928_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p928_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p928_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p920_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p920_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_p920_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p920_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p920_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p920_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p920_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p920_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p920_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_p920_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p920_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p920_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p920_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p920_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p918_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p918_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p918_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p918_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p918_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p918_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p918_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p918_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p918_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p918_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p918_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p918_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p918_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p918_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p918_2_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p918_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p918_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p918_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p918_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p918_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p918_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p918_3_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p918_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p918_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p918_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p918_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p918_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p918_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90c_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p90c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p90c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p90c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p90c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p90c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p90c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90c_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p90c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p90c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p90c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p90c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p90c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90c_2_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90c_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p90c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p90c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p90c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p90c_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p90c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90c_3_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90c_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p90c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p90c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p90c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p90c_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p90c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90c_4_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90c_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p90c_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p90c_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p90c_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p90c_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p90c_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90c_5_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p90c_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p90c_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p90c_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p90c_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p90c_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p90c_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90c_6_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p90c_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p90c_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p90c_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p90c_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p90c_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p90c_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90c_7_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p90c_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p90c_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_1_common
// static void setup_lseek_mmap_p90c_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p90c_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p90c_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p90c_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p90a_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p90a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p90a_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p90a_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_2_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p90a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_3_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p90a_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_p90a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_4_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p90a_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_p90a_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p90a_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p90a_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p90a_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_5_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p90a_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p90a_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_6_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p90a_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p90a_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p90a_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p90a_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p90a_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_7_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p90a_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_8_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_14_1
// static void setup_lseek_mmap_p90a_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_9_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 16384);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_94_0
// static int test_lseek_mmap_p90a_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p90a_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_10_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_48_0
// static int test_lseek_mmap_p90a_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_p90a_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p90a_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p90a_10_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p90a_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_11_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_12_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p90a_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_6_proc1
// static void setup_lseek_mmap_p90a_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p90a_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_13_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p90a_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_p90a_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_14_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_2_0
// static int test_lseek_mmap_p90a_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_15_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p90a_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_16_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_12_0
// static int test_lseek_mmap_p90a_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p90a_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p90a_16_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p90a_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_17_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p90a_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_18_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_18_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p90a_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p90a_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_6_proc1
// static void setup_lseek_mmap_p90a_18_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p90a_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_19_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_19_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_p90a_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_20_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_48_0
// static int test_lseek_mmap_p90a_20_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p90a_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_21_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_21_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_21_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_22_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_22_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_22_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_22_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_23_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p90a_23_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p90a_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p90a_23_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p90a_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_24_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p90a_24_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p90a_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p90a_24_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p90a_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_25_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_82_0
// static int test_lseek_mmap_p90a_25_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_25_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_25_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_26_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p90a_26_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p90a_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_26_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_26_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_27_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p90a_27_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p90a_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_27_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_27_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_28_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_28_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_14_1
// static void setup_lseek_mmap_p90a_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_28_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_p90a_28_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p90a_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_28_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_29_0(void) {
//   int r = lseek(10, 8192, SEEK_CUR);
//   expect_result("r", r, 8192);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_2_0
// static int test_lseek_mmap_p90a_29_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_14_1
// static void setup_lseek_mmap_p90a_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_30_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p90a_30_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p90a_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_30_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p90a_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_31_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p94c_4_0
// static int test_lseek_mmap_p90a_31_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_31_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_32_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p94c_4_0
// static int test_lseek_mmap_p90a_32_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p90a_32_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_33_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p90a_33_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_33_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p90a_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_33_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_34_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 12288);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_22_0
// static int test_lseek_mmap_p90a_34_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p90a_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_34_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p90a_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_34_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_35_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p90a_35_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_6_1
// static void setup_lseek_mmap_p90a_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_35_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_36_0(void) {
//   int r = lseek(10, -4096, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p94c_4_0
// static int test_lseek_mmap_p90a_36_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_47_1
// static void setup_lseek_mmap_p90a_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_36_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p90a_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p90a_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_36_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p90a_37_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p90a_37_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p90a_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p90a_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p90a_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p90a_37_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p900_0_0(void) {
//   int r = lseek(10, 0, SEEK_CUR);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_0_0
// static int test_lseek_mmap_p900_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_p900_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p900_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p900_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p900_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p900_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p900_1_0(void) {
//   int r = lseek(10, 4096, SEEK_CUR);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p970_3_0
// static int test_lseek_mmap_p900_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_p900_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p900_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p900_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p900_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p900_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8f8_0_0(void) {
  int r = lseek(10, -4096, SEEK_END);
  expect_result("r", r, -1);
  expect_errno(22);
  return xerrno(r);
}
// static int test_lseek_mmap_p8f8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8f8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_proc0
// static void setup_lseek_mmap_p8f8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8f8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p8f8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8f8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8f8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8f8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_4_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p8f8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_5_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8f8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_6_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x4d4000);
}
// static void setup_lseek_mmap_p8f8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_7_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x4d4000);
}
// static void setup_lseek_mmap_p8f8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_8_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8f8_8_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_p8f8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8f8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8f8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_9_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8f8_9_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_p8f8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8f8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f8_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_10_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8f8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_11_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8f8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_12_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8f8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_13_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8f8_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_p970_22_proc0
// static void setup_lseek_mmap_p8f8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_14_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8f8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_15_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x1e27000);
}
// static void setup_lseek_mmap_p8f8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_16_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p8f8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_16_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_17_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8f8_17_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_lseek_mmap_p8f8_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i2", 0x4d4000);
}
// static void setup_lseek_mmap_p8f8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
static void setup_lseek_mmap_p8f8_17_final(void) {
  unlink("__i0");
  unlink("__i2");
  unlink("__i1");
}
// static void setup_lseek_mmap_p8f8_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_18_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p8f8_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_18_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_19_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
static void setup_lseek_mmap_p8f8_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p8f8_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_19_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f8_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_20_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8f8_20_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8f8_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i2", 0x2000);
}
// static void setup_lseek_mmap_p8f8_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
static void setup_lseek_mmap_p8f8_20_final(void) {
  unlink("__i0");
  unlink("__i2");
  unlink("__i1");
  close(20);
  close(21);
}
// static void setup_lseek_mmap_p8f8_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_21_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8f8_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_lseek_mmap_p8f8_19_proc0
// static void setup_lseek_mmap_p8f8_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_21_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f8_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_22_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_22_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8f8_22_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8f8_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p8f8_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_22_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p8f8_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_23_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_23_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8f8_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_23_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_24_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_24_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p8f8_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_24_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_25_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_25_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8f8_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_25_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_26_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_26_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8f8_26_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8f8_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8f8_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_26_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p8f8_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_27_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_27_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8f8_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_p8f8_22_proc0
// static void setup_lseek_mmap_p8f8_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8f8_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_28_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_28_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
static void setup_lseek_mmap_p8f8_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1e28000);
}
// static void setup_lseek_mmap_p8f8_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8f8_28_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_29_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_29_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p8f8_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_30_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_30_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p8f8_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_30_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_31_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_31_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p8f8_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_31_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_32_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_32_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i2", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_17_common
static void setup_lseek_mmap_p8f8_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i2", 0x2000);
}
// static void setup_lseek_mmap_p8f8_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_32_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_p8f8_17_final
// static void setup_lseek_mmap_p8f8_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_33_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_33_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p8f8_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_33_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_34_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_34_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8f8_34_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_lseek_mmap_p8f8_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8f8_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_34_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p8f8_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_35_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_35_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8f8_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_35_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_36_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_36_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
static void setup_lseek_mmap_p8f8_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p8f8_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_36_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8f8_36_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_37_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_37_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8f8_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_p8f8_36_proc0
// static void setup_lseek_mmap_p8f8_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_37_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f8_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_38_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_38_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i2", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_20_common
static void setup_lseek_mmap_p8f8_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i2", 0x2000);
}
// static void setup_lseek_mmap_p8f8_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_38_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_p8f8_20_final
// static void setup_lseek_mmap_p8f8_38_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_39_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_39_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
static void setup_lseek_mmap_p8f8_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p8f8_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_39_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f8_39_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_40_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_40_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8f8_40_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_lseek_mmap_p8f8_39_proc0
// static void setup_lseek_mmap_p8f8_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_40_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f8_40_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_41_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_41_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_26_common
static void setup_lseek_mmap_p8f8_41_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8f8_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_41_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p8f8_41_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_42_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_42_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8f8_42_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_p8f8_42_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
// }
// ^ See setup_lseek_mmap_p8f8_41_proc0
// static void setup_lseek_mmap_p8f8_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_42_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8f8_42_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_43_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_43_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
static void setup_lseek_mmap_p8f8_43_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8f8_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_43_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8f8_43_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_44_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_44_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_44_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8f8_44_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_p8f8_43_proc0
// static void setup_lseek_mmap_p8f8_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_44_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f8_44_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_45_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_45_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f8_45_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8f8_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_45_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f8_45_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_46_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_46_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8f8_46_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8f8_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f8_46_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f8_46_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_47_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_47_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_47_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
static void setup_lseek_mmap_p8f8_47_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8f8_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_47_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8f8_47_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f8_48_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f8_48_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8f8_48_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8f8_48_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_p8f8_47_proc0
// static void setup_lseek_mmap_p8f8_48_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f8_48_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f8_48_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f6_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f6_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8f6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8f6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8f6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8f6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f6_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8f6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8f6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8f6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f6_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8f6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8f6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_p8f6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8f6_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f6_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8f6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8f6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_p8f6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8f6_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8f6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f4_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f4_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8f4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8f4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p8f4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f4_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f4_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f4_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f4_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8f4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8f4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p8f4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f4_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8f4_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f4_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f4_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8f4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8f4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8f4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f4_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f4_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f4_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f4_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p8f4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8f4_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8f4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f4_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f4_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8f0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8f0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_p8f0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8f0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8f0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8f0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8f0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ec_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ec_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_0_proc0
// static void setup_lseek_mmap_p8ec_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ec_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ec_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ec_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8ec_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p8ec_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ec_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8ec_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ec_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ec_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8ec_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ec_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ec_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ec_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8ec_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p8ec_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ec_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8ec_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_4_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ec_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ec_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8ec_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ec_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ec_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_5_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ec_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8ec_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8ec_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ec_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8ec_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_6_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ec_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8ec_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8ec_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ec_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8ec_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_7_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ec_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ec_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p8ec_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ec_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ec_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_8_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ec_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8ec_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8ec_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ec_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8ec_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ec_9_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8ec_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ec_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8ec_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8ec_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ec_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8ec_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e6_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e6_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8e6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8e6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8e6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8e6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8e6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e6_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e6_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8e6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8e6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8e6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8e6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8e6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e6_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e6_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8e6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8e6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_p8e6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8e6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8e6_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e6_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e6_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8e6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8e6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_p8e6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8e6_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8e6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e5_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p8e5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8e5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p8e5_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_1_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e27000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_2_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x27000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_3_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e28000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8e5_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8e5_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_4_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_4_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1e28000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8e5_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_1_proc0
// static void setup_lseek_mmap_p8e5_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_5_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e5_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1e28000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_4_1
// static void setup_lseek_mmap_p8e5_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8e5_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_3_proc0
// static void setup_lseek_mmap_p8e5_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8e5_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_6_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e5_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_2_1
// static void setup_lseek_mmap_p8e5_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 163840, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_7_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e5_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_1_1
// static void setup_lseek_mmap_p8e5_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8e5_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_3_proc0
// static void setup_lseek_mmap_p8e5_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8e5_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_8_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_8_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1e27000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8e5_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_3_proc0
// static void setup_lseek_mmap_p8e5_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8e5_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_9_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e5_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_1_1
// static void setup_lseek_mmap_p8e5_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_10_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e5_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p8e5_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8e5_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_2_proc0
// static void setup_lseek_mmap_p8e5_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_11_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e5_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p8e5_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_12_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_12_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x2297000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36270080, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36274176, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_13_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_13_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x27000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_14_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_14_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e28000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_15_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_15_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x4d4000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_16_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_16_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x4d4000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8e5_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8e5_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e5_17_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8e5_17_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x4d4000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8e5_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8e5_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p8e5_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e5_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e5_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8e0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8e0_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_p8e0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8e0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8e0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8e0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8e0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d8_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p8d8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8d8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8d8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8d8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d8_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d8_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p8d8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8d8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8d8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_p8d8_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d8_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d8_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p8d8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8d8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8d8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x4d4000);
// }
// ^ See setup_lseek_mmap_pb6_2_proc1
// static void setup_lseek_mmap_p8d8_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d8_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d8_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p8d8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8d8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8d8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i1", 0x4d4000);
// }
// ^ See setup_lseek_mmap_pb6_3_proc1
// static void setup_lseek_mmap_p8d8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8d8_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d8_4_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d8_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p8d8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8d8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8d8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_p8d8_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d8_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d8_5_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d8_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p8d8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8d8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 9347072, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_lseek_mmap_p8d8_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x8ea000);
}
// static void setup_lseek_mmap_p8d8_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d8_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d8_6_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d8_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p8d8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8d8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8d8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
// }
// ^ See setup_lseek_mmap_pb6_5_proc1
// static void setup_lseek_mmap_p8d8_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d8_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d8_7_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d8_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p8d8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8d8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8d8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i1", 0x4d4000);
// }
// ^ See setup_lseek_mmap_pb6_6_proc1
// static void setup_lseek_mmap_p8d8_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8d8_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d8_8_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d8_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p8d8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8d8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p8d8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
// }
// ^ See setup_lseek_mmap_pb6_5_proc1
// static void setup_lseek_mmap_p8d8_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d8_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d6_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d6_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p8d6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8d6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p8d6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p8d6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8d6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d6_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p8d6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8d6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p8d6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p8d6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8d6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d6_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p8d6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8d6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p8d6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p8d6_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8d6_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d6_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p8d6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8d6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p8d6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p8d6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8d6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d4_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d4_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p8d4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8d4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8d4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8d4_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d4_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d4_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d4_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p8d4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8d4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
static void setup_lseek_mmap_p8d4_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8d4_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d4_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d4_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d4_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p8d4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8d4_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8d4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_1_proc1
// static void setup_lseek_mmap_p8d4_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8d4_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8d0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8d0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_p8d0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8d0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8d0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8d0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8d0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8cc_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8cc_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p8cc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8cc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8cc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8cc_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8cc_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8cc_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8cc_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p8cc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8cc_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 7356416, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_1_proc0
// static void setup_lseek_mmap_p8cc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8cc_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8cc_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c6_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c6_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p8c6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8c6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p8c6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p8c6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8c6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c6_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c6_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p8c6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8c6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p8c6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p8c6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8c6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c6_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c6_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p8c6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8c6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p8c6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p8c6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8c6_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c6_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c6_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p8c6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8c6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p8c6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p8c6_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8c6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p8c5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8c5_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8c5_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8c5_1_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8c5_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c5_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_2_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8c5_2_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x27000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8c5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8c5_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8c5_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p8c5_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_3_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8c5_3_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e28000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8c5_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8c5_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
static void setup_lseek_mmap_p8c5_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8c5_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8c5_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_4_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e28000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_14_1
// static void setup_lseek_mmap_p8c5_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c5_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_5_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e28000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_14_1
// static void setup_lseek_mmap_p8c5_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8c5_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_3_proc1
// static void setup_lseek_mmap_p8c5_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8c5_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_6_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_1_1
// static void setup_lseek_mmap_p8c5_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8c5_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_3_proc1
// static void setup_lseek_mmap_p8c5_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8c5_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_7_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
static int test_lseek_mmap_p8c5_7_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8c5_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8c5_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_3_proc1
// static void setup_lseek_mmap_p8c5_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8c5_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_8_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_2_1
// static void setup_lseek_mmap_p8c5_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c5_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
static void setup_lseek_mmap_p8c5_8_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 163840, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8c5_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_9_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p8c5_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c5_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_2_proc0
// static void setup_lseek_mmap_p8c5_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p8c5_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_10_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_7_1
// static void setup_lseek_mmap_p8c5_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c5_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p8c5_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_11_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_1_1
// static void setup_lseek_mmap_p8c5_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c5_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p8c5_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_12_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_7_1
// static void setup_lseek_mmap_p8c5_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c5_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p8c5_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8c5_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c5_13_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c5_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x4d4000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_17_1
// static void setup_lseek_mmap_p8c5_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c5_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p8c5_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p8c5_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c5_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8c0_0_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8f8_0_0
// static int test_lseek_mmap_p8c0_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_p8c0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8c0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8c0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8c0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8c0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8b8_0_0(void) {
  int r = lseek(10, 0, SEEK_END);
  expect_result("r", r, 0);
  return xerrno(r);
}
// static int test_lseek_mmap_p8b8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p8b8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8b8_1_0(void) {
  int r = lseek(10, 4096, SEEK_END);
  expect_result("r", r, 4096);
  return xerrno(r);
}
// static int test_lseek_mmap_p8b8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p8b8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_2_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8b8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8b8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p8b8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_3_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8b8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8b8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_4_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8b8_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8b8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_p8b8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_5_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8b8_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8b8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p9ca_1_proc0
// static void setup_lseek_mmap_p8b8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_6_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8b8_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p8b8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_7_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8b8_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_4_common
// static void setup_lseek_mmap_p8b8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pab0_5_proc0
// static void setup_lseek_mmap_p8b8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_8_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8b8_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_8_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_p8b8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 28672, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b8_4_proc0
// static void setup_lseek_mmap_p8b8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_9_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8b8_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_8_common
// static void setup_lseek_mmap_p8b8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pab0_5_proc0
// static void setup_lseek_mmap_p8b8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_10_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8b8_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8b8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_11_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8b8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_12_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_lseek_mmap_p8b8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_13_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_p970_15_proc0
// static void setup_lseek_mmap_p8b8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8b8_14_0(void) {
  int r = lseek(10, 31617024, SEEK_END);
  expect_result("r", r, 31617024);
  return xerrno(r);
}
// static int test_lseek_mmap_p8b8_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8b8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_14_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_15_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b8_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x4d4000);
}
// static void setup_lseek_mmap_p8b8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8b8_16_0(void) {
  int r = lseek(10, -4096, SEEK_END);
  expect_result("r", r, 0);
  return xerrno(r);
}
// static int test_lseek_mmap_p8b8_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_16_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_p8b8_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i2", 0x0);
}
// static void setup_lseek_mmap_p8b8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_16_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_p8f8_17_final
// static void setup_lseek_mmap_p8b8_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8b8_17_0(void) {
  int r = lseek(10, 159744, SEEK_END);
  expect_result("r", r, 159744);
  return xerrno(r);
}
// static int test_lseek_mmap_p8b8_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 147456, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x3000);
}
// static void setup_lseek_mmap_p8b8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_17_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_18_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 147456, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p8b8_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_19_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 147456, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8b8_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_20_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 147456, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x3000);
}
// static void setup_lseek_mmap_p8b8_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_21_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_21_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_lseek_mmap_p8b8_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_p8b8_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_21_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_22_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_22_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_21_common
// static void setup_lseek_mmap_p8b8_22_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_lseek_mmap_pae_31_proc0
// static void setup_lseek_mmap_p8b8_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_22_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_23_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_23_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_23_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_lseek_mmap_p8b8_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_12_proc0
// static void setup_lseek_mmap_p8b8_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_23_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8b8_24_0(void) {
  int r = lseek(10, 31617024, SEEK_END);
  expect_result("r", r, 31621120);
  return xerrno(r);
}
// static int test_lseek_mmap_p8b8_24_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_23_common
// static void setup_lseek_mmap_p8b8_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
// }
// ^ See setup_lseek_mmap_p8f8_14_proc0
// static void setup_lseek_mmap_p8b8_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_24_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_25_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_25_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_21_common
static void setup_lseek_mmap_p8b8_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_lseek_mmap_p8b8_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_25_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_26_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_26_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_26_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_p8b8_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_lseek_mmap_pae_13_proc0
// static void setup_lseek_mmap_p8b8_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_26_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_27_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_27_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_27_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8b8_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_p8b8_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_27_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_28_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_28_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_28_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_7_proc0
// static void setup_lseek_mmap_p8b8_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_28_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_29_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_29_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x26000);
// }
// ^ See setup_lseek_mmap_pae_38_proc0
// static void setup_lseek_mmap_p8b8_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_30_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_30_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x26000);
}
// static void setup_lseek_mmap_p8b8_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_30_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_31_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_31_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_31_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_6_proc0
// static void setup_lseek_mmap_p8b8_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_32_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_32_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_21_proc0
// static void setup_lseek_mmap_p8b8_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_32_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_33_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_33_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_33_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x26000);
// }
// ^ See setup_lseek_mmap_pae_40_proc0
// static void setup_lseek_mmap_p8b8_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_33_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_34_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_34_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x26000);
}
// static void setup_lseek_mmap_p8b8_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_34_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_35_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_35_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b8_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_12_proc0
// static void setup_lseek_mmap_p8b8_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_35_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_36_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_36_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_4_common
static void setup_lseek_mmap_p8b8_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x26000);
}
// static void setup_lseek_mmap_p8b8_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_36_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_36_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_37_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_37_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_37_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8b8_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i2", 0x26000);
}
// static void setup_lseek_mmap_p8b8_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_37_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_p8f8_20_final
// static void setup_lseek_mmap_p8b8_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_38_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_38_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_4_common
static void setup_lseek_mmap_p8b8_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 163840, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x3000);
}
// static void setup_lseek_mmap_p8b8_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_38_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_38_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_39_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_39_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
static void setup_lseek_mmap_p8b8_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x26000);
}
// static void setup_lseek_mmap_p8b8_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_39_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p8b8_39_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_40_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_40_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_26_common
// static void setup_lseek_mmap_p8b8_40_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_12_proc0
// static void setup_lseek_mmap_p8b8_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_40_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_40_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_41_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_41_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_23_common
// static void setup_lseek_mmap_p8b8_41_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_23_proc0
// static void setup_lseek_mmap_p8b8_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_41_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_41_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_42_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_42_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_42_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_21_common
static void setup_lseek_mmap_p8b8_42_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_p8b8_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_42_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_42_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_43_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_43_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_26_common
// static void setup_lseek_mmap_p8b8_43_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_25_proc0
// static void setup_lseek_mmap_p8b8_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_43_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_43_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_44_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_44_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_44_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_27_common
static void setup_lseek_mmap_p8b8_44_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_p8b8_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_44_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_44_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_45_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b8_45_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
static void setup_lseek_mmap_p8b8_45_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p8b8_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_45_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p8b8_45_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_46_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_46_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
static void setup_lseek_mmap_p8b8_46_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p8b8_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_46_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p8b8_46_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_47_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_47_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_47_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8b8_47_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_lseek_mmap_p8b8_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_47_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p8b8_47_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_48_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_48_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_48_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_47_common
static void setup_lseek_mmap_p8b8_48_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 147456, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p8b8_48_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_48_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p8b8_48_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8b8_49_0(void) {
  int r = lseek(10, 31621120, SEEK_END);
  expect_result("r", r, 31621120);
  return xerrno(r);
}
// static int test_lseek_mmap_p8b8_49_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_49_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_49_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_49_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_49_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_49_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_50_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_50_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_50_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_50_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p8b8_50_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_50_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_50_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_51_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_51_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_51_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_42_common
static void setup_lseek_mmap_p8b8_51_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_51_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_51_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_51_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_52_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_52_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_52_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8b8_52_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p8b8_52_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_52_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_52_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_53_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_53_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_53_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_53_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_53_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_53_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_53_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_54_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_54_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_54_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i2", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_17_common
static void setup_lseek_mmap_p8b8_54_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i2", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_54_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_54_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_p8f8_17_final
// static void setup_lseek_mmap_p8b8_54_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_55_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b8_55_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_55_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_21_common
static void setup_lseek_mmap_p8b8_55_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_p8b8_55_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_55_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_55_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_56_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b8_56_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_56_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
// static void setup_lseek_mmap_p8b8_56_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
// }
// ^ See setup_lseek_mmap_p8f8_34_proc0
// static void setup_lseek_mmap_p8b8_56_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_56_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p8b8_56_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_57_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_57_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_57_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8b8_57_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_57_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_57_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_57_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_58_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_58_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_58_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8b8_58_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i2", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_58_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_58_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_p8f8_20_final
// static void setup_lseek_mmap_p8b8_58_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_59_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_59_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_59_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_57_common
static void setup_lseek_mmap_p8b8_59_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_59_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_59_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_59_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_60_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_60_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_60_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_47_common
static void setup_lseek_mmap_p8b8_60_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p8b8_60_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_60_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p8b8_60_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_61_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_61_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_61_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_61_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31625216, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31625216, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x16a6000);
}
// static void setup_lseek_mmap_p8b8_61_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_61_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_61_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_62_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_62_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_62_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
static void setup_lseek_mmap_p8b8_62_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31629312, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31629312, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e29000);
}
// static void setup_lseek_mmap_p8b8_62_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_62_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p8b8_62_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_63_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_63_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_63_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_63_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x1e29000);
}
// static void setup_lseek_mmap_p8b8_63_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_63_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_63_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_64_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_64_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_64_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i2", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_17_common
static void setup_lseek_mmap_p8b8_64_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i2", 0x1e29000);
}
// static void setup_lseek_mmap_p8b8_64_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_64_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_p8f8_17_final
// static void setup_lseek_mmap_p8b8_64_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_65_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_65_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_65_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_65_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x1e29000);
}
// static void setup_lseek_mmap_p8b8_65_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_65_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_65_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_66_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_66_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_66_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
static void setup_lseek_mmap_p8b8_66_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1e28000);
}
// static void setup_lseek_mmap_p8b8_66_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_66_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p8b8_66_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_67_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_67_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_67_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_67_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1e29000);
}
// static void setup_lseek_mmap_p8b8_67_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_67_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_67_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_68_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_68_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_68_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_68_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1e28000);
}
// static void setup_lseek_mmap_p8b8_68_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_68_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_68_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_69_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_69_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_69_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_52_common
static void setup_lseek_mmap_p8b8_69_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1e29000);
}
// static void setup_lseek_mmap_p8b8_69_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_69_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_69_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_70_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_70_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_70_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_lseek_mmap_p8b8_70_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x1e29000);
// }
// ^ See setup_lseek_mmap_p8b8_69_proc0
// static void setup_lseek_mmap_p8b8_70_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_70_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_70_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_71_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_71_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
static void setup_lseek_mmap_p8b8_71_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_lseek_mmap_p8b8_71_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i2", 0x1e29000);
}
// static void setup_lseek_mmap_p8b8_71_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_71_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_p8f8_20_final
// static void setup_lseek_mmap_p8b8_71_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_72_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_72_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_72_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_70_common
static void setup_lseek_mmap_p8b8_72_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x1e29000);
}
// static void setup_lseek_mmap_p8b8_72_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_72_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_72_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_73_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_73_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_73_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_70_common
// static void setup_lseek_mmap_p8b8_73_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x1e29000);
// }
// ^ See setup_lseek_mmap_p8b8_72_proc0
// static void setup_lseek_mmap_p8b8_73_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_73_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_73_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_74_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_74_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_74_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_47_common
static void setup_lseek_mmap_p8b8_74_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1e28000);
}
// static void setup_lseek_mmap_p8b8_74_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_74_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p8b8_74_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_75_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_75_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_75_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_52_common
// static void setup_lseek_mmap_p8b8_75_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x1e28000);
// }
// ^ See setup_lseek_mmap_p8b8_74_proc0
// static void setup_lseek_mmap_p8b8_75_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_75_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_75_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_76_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_76_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_76_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8b8_76_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_p8b8_14_proc0
// static void setup_lseek_mmap_p8b8_76_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_76_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_76_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_77_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_77_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_77_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_70_common
static void setup_lseek_mmap_p8b8_77_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8b8_77_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_77_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_77_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_78_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_78_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_78_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_78_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8b8_78_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_78_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_78_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_79_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_79_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_79_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_52_common
static void setup_lseek_mmap_p8b8_79_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p8b8_79_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_79_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_79_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_80_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_80_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_80_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_70_common
// static void setup_lseek_mmap_p8b8_80_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_p8b8_79_proc0
// static void setup_lseek_mmap_p8b8_80_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_80_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_80_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_81_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_81_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_81_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_81_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_lseek_mmap_p8b8_81_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_81_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_81_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_82_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_82_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_82_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_82_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p8b8_82_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_82_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_82_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_83_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_83_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_83_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_47_common
static void setup_lseek_mmap_p8b8_83_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31625216, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x1e2a000);
}
// static void setup_lseek_mmap_p8b8_83_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_83_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p8b8_83_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_84_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_84_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_84_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_84_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31612928, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31612928, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_84_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_84_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_84_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_85_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_85_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_85_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_42_common
static void setup_lseek_mmap_p8b8_85_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 23748608, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x3000);
}
// static void setup_lseek_mmap_p8b8_85_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_85_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_85_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_86_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_86_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_86_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_52_common
// static void setup_lseek_mmap_p8b8_86_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
// }
// ^ See setup_lseek_mmap_p8b8_57_proc0
// static void setup_lseek_mmap_p8b8_86_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_86_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_86_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_87_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8b8_87_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_87_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_52_common
// static void setup_lseek_mmap_p8b8_87_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x27000);
// }
// ^ See setup_lseek_mmap_p8b8_60_proc0
// static void setup_lseek_mmap_p8b8_87_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_87_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_87_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_88_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_88_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_88_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_88_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8b8_88_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_88_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_88_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_89_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8b8_89_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_89_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8b8_57_common
static void setup_lseek_mmap_p8b8_89_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8b8_89_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_89_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_89_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8b8_90_0(void) {
  int r = lseek(10, 5062656, SEEK_END);
  expect_result("r", r, 5062656);
  return xerrno(r);
}
// static int test_lseek_mmap_p8b8_90_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_90_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_90_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8b8_90_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_90_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_90_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_91_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_91_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_91_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_91_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_91_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_91_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_91_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_92_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_92_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_92_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_92_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_92_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_92_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_92_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_93_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_93_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_93_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i2", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_17_common
static void setup_lseek_mmap_p8b8_93_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i2", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_93_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_93_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_p8f8_17_final
// static void setup_lseek_mmap_p8b8_93_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_94_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_94_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_94_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_94_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_94_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_94_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_94_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_95_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_95_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_95_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
static void setup_lseek_mmap_p8b8_95_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
}
// static void setup_lseek_mmap_p8b8_95_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_95_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p8b8_95_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_96_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_96_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_96_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
static void setup_lseek_mmap_p8b8_96_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_96_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_96_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_96_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_97_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_97_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_97_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i2", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_20_common
static void setup_lseek_mmap_p8b8_97_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i2", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_97_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_97_final(void) {
//   unlink("__i0");
//   unlink("__i2");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_p8f8_20_final
// static void setup_lseek_mmap_p8b8_97_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_98_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_98_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_98_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
static void setup_lseek_mmap_p8b8_98_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_98_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_98_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_98_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_99_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_99_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_99_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_22_common
static void setup_lseek_mmap_p8b8_99_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
}
// static void setup_lseek_mmap_p8b8_99_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_99_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p8b8_99_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_100_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_100_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_100_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_100_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x1e27000);
}
// static void setup_lseek_mmap_p8b8_100_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_100_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_100_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_101_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_101_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_101_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b8_101_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
}
// static void setup_lseek_mmap_p8b8_101_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_101_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b8_101_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_102_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_102_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_102_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8b8_102_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x1e27000);
// }
// ^ See setup_lseek_mmap_p8b8_98_proc0
// static void setup_lseek_mmap_p8b8_102_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_102_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_102_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_103_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_103_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_103_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8b8_103_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
// }
// ^ See setup_lseek_mmap_p8b8_96_proc0
// static void setup_lseek_mmap_p8b8_103_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_103_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_103_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_104_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_104_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_104_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8b8_104_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
// }
// ^ See setup_lseek_mmap_p8b8_99_proc0
// static void setup_lseek_mmap_p8b8_104_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_104_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_104_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_105_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_105_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_105_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8b8_105_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8b8_105_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b8_105_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b8_105_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_106_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_106_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_106_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
static void setup_lseek_mmap_p8b8_106_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p8b8_106_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_106_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b8_106_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b8_107_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b8_107_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p8b8_107_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8b8_107_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_p8b8_106_proc0
// static void setup_lseek_mmap_p8b8_107_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b8_107_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b8_107_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b6_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b6_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8b6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8b6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8b6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b6_1_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8b6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8b6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8b6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b6_2_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8b6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8b6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_p8b6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b6_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b6_3_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8b6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
static void setup_lseek_mmap_p8b6_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_p8b6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b6_4_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b6_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8b6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
static void setup_lseek_mmap_p8b6_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_p8b6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8b6_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b6_5_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b6_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8b6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8b6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_3_proc0
// static void setup_lseek_mmap_p8b6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b6_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b6_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b6_6_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b6_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8b6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8b6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_p8b6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b6_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b6_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b6_7_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b6_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p8b6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8b6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_4_proc0
// static void setup_lseek_mmap_p8b6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8b6_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8b6_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b4_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b4_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8b4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p8b4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b4_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b4_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b4_1_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b4_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8b4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8b4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p8b4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b4_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b4_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b4_2_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b4_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8b4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8b4_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_3_proc0
// static void setup_lseek_mmap_p8b4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b4_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8b4_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b4_3_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b4_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8b4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b4_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_2_proc0
// static void setup_lseek_mmap_p8b4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b4_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b4_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b4_4_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b4_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8b4_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8b4_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8b4_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b4_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b4_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b4_5_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8b4_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p8b4_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_23_common
// static void setup_lseek_mmap_p8b4_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p8b4_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b4_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b4_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b4_6_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b4_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8b4_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b4_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_9_proc0
// static void setup_lseek_mmap_p8b4_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b4_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b4_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b4_7_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8b4_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p8b4_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b4_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_16_proc0
// static void setup_lseek_mmap_p8b4_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b4_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b4_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b4_8_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b4_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p8b4_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b4_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8b4_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b4_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b4_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b0_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8b0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_p8b0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8b0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8b0_1_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8b0_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_p8b0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8b0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8b0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8b0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8b0_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ac_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p8ac_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ac_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_1_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8ac_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p8ac_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8ac_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_2_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ac_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8ac_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ac_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_3_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8ac_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p8ac_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8ac_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_4_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ac_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8ac_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ac_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_5_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8ac_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8ac_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ac_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8ac_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_6_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8ac_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8ac_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ac_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8ac_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_7_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8ac_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8ac_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_3_proc0
// static void setup_lseek_mmap_p8ac_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8ac_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_8_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8ac_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ac_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8ac_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ac_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_9_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8ac_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8ac_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_3_proc0
// static void setup_lseek_mmap_p8ac_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ac_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8ac_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_10_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8ac_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8ac_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_3_proc0
// static void setup_lseek_mmap_p8ac_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_10_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8ac_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_11_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8ac_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ac_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8ac_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ac_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_12_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8ac_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8ac_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_3_proc0
// static void setup_lseek_mmap_p8ac_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ac_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8ac_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_13_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ac_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_p8ac_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ac_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_14_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8ac_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8ac_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ac_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8ac_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_15_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8ac_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p8ac_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8ac_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_3_proc0
// static void setup_lseek_mmap_p8ac_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ac_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8ac_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_16_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ac_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p8ac_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ac_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_17_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8ac_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8ac_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8ac_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ac_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8ac_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_18_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8ac_18_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8ac_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_1_proc0
// static void setup_lseek_mmap_p8ac_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8ac_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8ac_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8ac_19_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8ac_19_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p8ac_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8ac_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_3_proc0
// static void setup_lseek_mmap_p8ac_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8ac_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8ac_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a6_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a6_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8a6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8a6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8a6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8a6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8a6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a6_1_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a6_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8a6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8a6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_0_proc0
// static void setup_lseek_mmap_p8a6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8a6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8a6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a6_2_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a6_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8a6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8a6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_p8a6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8a6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8a6_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a6_3_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8a6_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8a6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8a6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_3_proc0
// static void setup_lseek_mmap_p8a6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8a6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8a6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a6_4_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8a6_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8a6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p8a6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_4_proc0
// static void setup_lseek_mmap_p8a6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8a6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p8a6_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a6_5_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8a6_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8a6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8a6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_3_proc0
// static void setup_lseek_mmap_p8a6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8a6_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8a6_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a6_6_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a6_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8a6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8a6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_2_proc0
// static void setup_lseek_mmap_p8a6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8a6_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8a6_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a6_7_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8a6_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p8a6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p8a6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p8b6_4_proc0
// static void setup_lseek_mmap_p8a6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p8a6_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p8a6_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a5_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p8a5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p8a5_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_1_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p8a5_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8a5_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p8a5_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8a5_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_2_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p8a5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p8a5_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_3_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a5_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p8a5_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8a5_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_4_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a5_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p8a5_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8a5_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8a5_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_5_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8a5_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_1_1
// static void setup_lseek_mmap_p8a5_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_1_proc0
// static void setup_lseek_mmap_p8a5_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_6_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8a5_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_1_1
// static void setup_lseek_mmap_p8a5_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f4_2_proc0
// static void setup_lseek_mmap_p8a5_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_7_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8a5_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_1_1
// static void setup_lseek_mmap_p8a5_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8a5_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31625216, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_8_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8a5_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e28000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_3_1
// static void setup_lseek_mmap_p8a5_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31625216, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_7_proc0
// static void setup_lseek_mmap_p8a5_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8a5_9_0(void) {
  int r = lseek(10, 163840, SEEK_END);
  expect_result("r", r, 163840);
  return xerrno(r);
}
// static int test_lseek_mmap_p8a5_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_2_1
// static void setup_lseek_mmap_p8a5_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_13_proc0
// static void setup_lseek_mmap_p8a5_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_10_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8a5_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_1_1
// static void setup_lseek_mmap_p8a5_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_9_proc0
// static void setup_lseek_mmap_p8a5_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_11_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8a5_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_1_1
// static void setup_lseek_mmap_p8a5_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8a5_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8a5_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_12_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8a5_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_8_1
// static void setup_lseek_mmap_p8a5_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_9_proc0
// static void setup_lseek_mmap_p8a5_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_13_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8a5_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_8_1
// static void setup_lseek_mmap_p8a5_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8a5_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_11_proc0
// static void setup_lseek_mmap_p8a5_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_13_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8a5_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_14_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8a5_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_2_1
// static void setup_lseek_mmap_p8a5_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_13_proc0
// static void setup_lseek_mmap_p8a5_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_15_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8a5_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_2_1
// static void setup_lseek_mmap_p8a5_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
static void setup_lseek_mmap_p8a5_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8a5_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_16_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8a5_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_13_1
// static void setup_lseek_mmap_p8a5_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_13_proc0
// static void setup_lseek_mmap_p8a5_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_17_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8a5_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_13_1
// static void setup_lseek_mmap_p8a5_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8a5_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_15_proc0
// static void setup_lseek_mmap_p8a5_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_17_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8a5_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_18_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
static int test_lseek_mmap_p8a5_18_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x26000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8a5_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_13_proc0
// static void setup_lseek_mmap_p8a5_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_19_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_19_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p8a5_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p8a5_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_20_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p8a5_20_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p8a5_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_23_common
// static void setup_lseek_mmap_p8a5_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p8a5_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_21_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a5_21_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb14_2_1
// static void setup_lseek_mmap_p8a5_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p8a5_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_21_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_22_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
static int test_lseek_mmap_p8a5_22_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e29000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8a5_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_22_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8a5_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_22_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_23_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8a5_23_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e28000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_3_1
// static void setup_lseek_mmap_p8a5_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8a5_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_23_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_24_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_24_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pa94_3_1
// static void setup_lseek_mmap_p8a5_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8a5_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_proc0
// static void setup_lseek_mmap_p8a5_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_24_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8a5_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_25_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_25_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_17_1
// static void setup_lseek_mmap_p8a5_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p8a5_25_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_proc0
// static void setup_lseek_mmap_p8a5_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_25_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p8a5_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8a5_26_0(void) {
  int r = lseek(10, 5070848, SEEK_END);
  expect_result("r", r, 5070848);
  return xerrno(r);
}
static int test_lseek_mmap_p8a5_26_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x4d5000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8a5_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8a5_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5074944, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_26_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_26_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_27_0(void) {
//   int r = lseek(10, 163840, SEEK_END);
//   expect_result("r", r, 163840);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_9_0
// static int test_lseek_mmap_p8a5_27_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_13_1
// static void setup_lseek_mmap_p8a5_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_13_proc0
// static void setup_lseek_mmap_p8a5_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_27_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_27_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_28_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p8a5_28_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_2_1
// static void setup_lseek_mmap_p8a5_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_28_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 163840, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_6_proc0
// static void setup_lseek_mmap_p8a5_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_28_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_29_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p8a5_29_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_8_1
// static void setup_lseek_mmap_p8a5_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31625216, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_7_proc0
// static void setup_lseek_mmap_p8a5_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_30_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_30_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p8a5_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_30_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8a5_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_31_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a5_31_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p8a5_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_31_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p8a5_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8a5_32_0(void) {
  int r = lseek(10, 5066752, SEEK_END);
  expect_result("r", r, 5066752);
  return xerrno(r);
}
// static int test_lseek_mmap_p8a5_32_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x4d4000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_17_1
// static void setup_lseek_mmap_p8a5_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p8a5_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_32_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_33_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
static int test_lseek_mmap_p8a5_33_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x4d4000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8a5_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8a5_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5066752, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_33_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_34_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p8a5_34_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x4d4000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_16_1
// static void setup_lseek_mmap_p8a5_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_34_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5066752, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_33_proc0
// static void setup_lseek_mmap_p8a5_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_34_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_35_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_35_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p8a5_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_p8a5_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_35_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p8a5_36_0(void) {
  int r = lseek(10, 9981952, SEEK_END);
  expect_result("r", r, 9981952);
  return xerrno(r);
}
static int test_lseek_mmap_p8a5_36_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x985000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8a5_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8a5_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 9981952, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 9981952, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_36_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_37_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_37_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p8a5_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_p8a5_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_37_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_38_0(void) {
//   int r = lseek(10, 9981952, SEEK_END);
//   expect_result("r", r, 9981952);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_36_0
static int test_lseek_mmap_p8a5_38_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x985000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8a5_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_38_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 9981952, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 9981952, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_36_proc0
// static void setup_lseek_mmap_p8a5_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_38_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_38_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_39_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_39_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p8a5_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_39_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p8a5_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_39_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_39_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_40_0(void) {
//   int r = lseek(10, 9981952, SEEK_END);
//   expect_result("r", r, 9981952);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_36_0
static int test_lseek_mmap_p8a5_40_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x985000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8a5_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8a5_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 9981952, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_40_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_40_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_41_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p8a5_41_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p8a5_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_41_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p8a5_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_41_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_41_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_42_0(void) {
//   int r = lseek(10, 9981952, SEEK_END);
//   expect_result("r", r, 9981952);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_36_0
static int test_lseek_mmap_p8a5_42_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x985000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8a5_42_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_42_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 9981952, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_40_proc0
// static void setup_lseek_mmap_p8a5_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_42_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_42_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_43_0(void) {
//   int r = lseek(10, 163840, SEEK_END);
//   expect_result("r", r, 163840);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_9_0
// static int test_lseek_mmap_p8a5_43_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_2_1
// static void setup_lseek_mmap_p8a5_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_43_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 163840, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_6_proc0
// static void setup_lseek_mmap_p8a5_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_43_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_43_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_44_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a5_44_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_17_1
// static void setup_lseek_mmap_p8a5_44_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_44_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p8a5_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_44_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_44_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_45_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
static int test_lseek_mmap_p8a5_45_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x29000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p8a5_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p8a5_45_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 163840, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p8a5_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_45_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_45_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_46_0(void) {
//   int r = lseek(10, 163840, SEEK_END);
//   expect_result("r", r, 163840);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_9_0
// static int test_lseek_mmap_p8a5_46_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_13_1
// static void setup_lseek_mmap_p8a5_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_46_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 163840, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_45_proc0
// static void setup_lseek_mmap_p8a5_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_46_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_46_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a5_47_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a5_47_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p8a5_47_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a5_47_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa94_30_proc0
// static void setup_lseek_mmap_p8a5_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a5_47_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a5_47_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a0_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p8a0_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_p8a0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p8a0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a0_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p8a0_1_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p8a0_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_p8a0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p8a0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p8a0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p8a0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p8a0_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p898_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p898_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p898_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_1_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p898_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p898_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p898_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_2_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p898_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p898_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_p898_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_3_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p898_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p898_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_p898_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_4_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p898_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p898_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pa6_8_proc1
// static void setup_lseek_mmap_p898_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_5_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p898_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
static void setup_lseek_mmap_p898_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x1e28000);
}
// static void setup_lseek_mmap_p898_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_6_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p898_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p898_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_p898_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_7_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p898_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
static void setup_lseek_mmap_p898_7_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x1e27000);
}
// static void setup_lseek_mmap_p898_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_8_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p898_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p898_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
static void setup_lseek_mmap_p898_8_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x1e27000);
}
// static void setup_lseek_mmap_p898_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p898_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_9_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p898_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p898_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_p898_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_10_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p898_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p898_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 23756800, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p898_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pa6_9_proc1
// static void setup_lseek_mmap_p898_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_11_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p898_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p898_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 163840, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_8_proc1
static void setup_lseek_mmap_p898_11_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x24000);
}
// static void setup_lseek_mmap_p898_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p898_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_12_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p898_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p898_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 90112, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_lseek_mmap_p898_12_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x16000);
}
// static void setup_lseek_mmap_p898_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_13_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p898_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p898_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 147456, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_lseek_mmap_p898_13_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x27000);
}
// static void setup_lseek_mmap_p898_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_14_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p898_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_23_common
// static void setup_lseek_mmap_p898_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p898_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_p898_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_15_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p898_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p898_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p898_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i1", 0x4d4000);
// }
// ^ See setup_lseek_mmap_pb6_3_proc1
// static void setup_lseek_mmap_p898_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p898_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_16_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p898_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p898_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_p898_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_17_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p898_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p898_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
// }
// ^ See setup_lseek_mmap_pb6_5_proc1
// static void setup_lseek_mmap_p898_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_18_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p898_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p898_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p898_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i1", 0x4d4000);
// }
// ^ See setup_lseek_mmap_pb6_6_proc1
// static void setup_lseek_mmap_p898_18_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p898_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p898_19_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p898_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p898_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p898_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p898_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
// }
// ^ See setup_lseek_mmap_pb6_5_proc1
// static void setup_lseek_mmap_p898_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p898_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p896_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p896_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p896_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p896_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p896_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p896_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p896_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p896_1_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p896_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p896_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p896_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p896_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p896_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p896_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p896_2_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p896_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p896_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p896_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p896_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p896_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p896_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p896_3_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p896_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p896_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p896_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p896_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p896_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p896_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p896_4_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p896_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p896_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
static void setup_lseek_mmap_p896_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_p896_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p896_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p896_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p896_5_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p896_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p896_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p896_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p896_4_proc0
// static void setup_lseek_mmap_p896_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p896_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p896_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p896_6_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p896_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p896_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p896_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p896_4_proc0
// static void setup_lseek_mmap_p896_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p896_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p896_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p896_7_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p896_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p896_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p896_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p896_4_proc0
// static void setup_lseek_mmap_p896_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p896_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p896_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p894_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p894_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p894_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p894_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p894_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p894_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p894_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p894_1_0(void) {
//   int r = lseek(10, -4096, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_16_0
// static int test_lseek_mmap_p894_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p894_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8b8_23_common
// static void setup_lseek_mmap_p894_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p894_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p894_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p894_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p894_2_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p894_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p894_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p894_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p894_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_2_proc0
// static void setup_lseek_mmap_p894_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p894_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p894_3_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p894_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p894_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p894_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
static void setup_lseek_mmap_p894_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p894_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p894_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p894_4_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p894_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p894_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p894_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p894_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p894_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p894_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p894_5_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p894_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p894_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p894_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p894_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p894_3_proc1
// static void setup_lseek_mmap_p894_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p894_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p894_6_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p894_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p894_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p894_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p894_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p894_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p894_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p890_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p890_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_p890_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p890_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p890_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p890_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p890_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p890_1_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p890_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_p890_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p890_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p890_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p890_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p890_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p88c_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p88c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p88c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p88c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p88c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p88c_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p88c_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p88c_1_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p88c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p88c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p88c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p88c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p88c_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p88c_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p88c_2_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p88c_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p88c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p88c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p88c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p88c_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p88c_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p88c_3_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p88c_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p88c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p88c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p88c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p88c_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p88c_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p886_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p886_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p886_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p886_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p886_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p886_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p886_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p886_1_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p886_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p886_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p886_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p886_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p886_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p886_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p886_2_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p886_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p886_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p886_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p886_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p886_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p886_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p886_3_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p886_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p886_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p886_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pd4_0_proc1
// static void setup_lseek_mmap_p886_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p886_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p886_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p886_4_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p886_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p886_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p886_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p896_4_proc0
// static void setup_lseek_mmap_p886_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p886_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p886_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p886_5_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p886_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p886_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p886_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p896_4_proc0
// static void setup_lseek_mmap_p886_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p886_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p886_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p886_6_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p886_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p886_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_8_common
// static void setup_lseek_mmap_p886_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p896_4_proc0
// static void setup_lseek_mmap_p886_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p886_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p886_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p886_7_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p886_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p886_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_p8f8_9_common
// static void setup_lseek_mmap_p886_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p896_4_proc0
// static void setup_lseek_mmap_p886_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p886_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p886_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p885_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p885_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p885_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p885_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_1_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p885_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p885_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p885_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p885_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_1_proc1
// static void setup_lseek_mmap_p885_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p885_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_2_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p885_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p885_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p885_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p885_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_3_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p885_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p885_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p885_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p885_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_4_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p885_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p885_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p885_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p885_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_3_proc1
// static void setup_lseek_mmap_p885_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p885_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_5_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_1_1
// static void setup_lseek_mmap_p885_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_6_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_1_1
// static void setup_lseek_mmap_p885_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p885_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p885_7_0(void) {
  int r = lseek(10, 31625216, SEEK_END);
  expect_result("r", r, 31625216);
  return xerrno(r);
}
// static int test_lseek_mmap_p885_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_1_1
// static void setup_lseek_mmap_p885_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p885_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_8_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_7_1
// static void setup_lseek_mmap_p885_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p885_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_9_0(void) {
//   int r = lseek(10, 9981952, SEEK_END);
//   expect_result("r", r, 9981952);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_36_0
// static int test_lseek_mmap_p885_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x985000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_40_1
// static void setup_lseek_mmap_p885_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p885_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
static void setup_lseek_mmap_p885_9_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 9981952, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p885_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p885_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p885_10_0(void) {
  int r = lseek(10, 5210112, SEEK_END);
  expect_result("r", r, 5210112);
  return xerrno(r);
}
static int test_lseek_mmap_p885_10_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x4f9000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p885_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 147456, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p898_13_proc0
static void setup_lseek_mmap_p885_10_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5210112, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p885_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_11_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p885_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p885_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p885_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p885_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_12_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_1_1
// static void setup_lseek_mmap_p885_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p885_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_13_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_1_1
// static void setup_lseek_mmap_p885_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p885_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p885_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_3_proc1
// static void setup_lseek_mmap_p885_13_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p885_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_14_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_7_1
// static void setup_lseek_mmap_p885_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p885_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_15_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_7_1
// static void setup_lseek_mmap_p885_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p885_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8d4_1_proc1
// static void setup_lseek_mmap_p885_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_3_proc1
// static void setup_lseek_mmap_p885_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p885_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_16_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p885_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p885_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p885_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p885_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_17_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p885_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p885_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p885_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p885_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_6_proc1
// static void setup_lseek_mmap_p885_17_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p885_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_18_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p885_18_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p885_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p885_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p885_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_19_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p885_19_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p885_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p885_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p885_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_6_proc1
// static void setup_lseek_mmap_p885_19_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p885_19_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_20_0(void) {
//   int r = lseek(10, 5062656, SEEK_END);
//   expect_result("r", r, 5062656);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_90_0
// static int test_lseek_mmap_p885_20_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x4d4000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_15_1
// static void setup_lseek_mmap_p885_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p885_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5066752, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p885_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p885_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_21_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
static int test_lseek_mmap_p885_21_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x27000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p885_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa6_4_common
// static void setup_lseek_mmap_p885_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
static void setup_lseek_mmap_p885_21_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p885_21_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p885_21_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_22_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p885_22_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p885_21_1
// static void setup_lseek_mmap_p885_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_22_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p885_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_2_proc0
// static void setup_lseek_mmap_p885_22_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_22_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_23_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_23_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_7_1
// static void setup_lseek_mmap_p885_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
static void setup_lseek_mmap_p885_23_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31625216, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p885_23_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_23_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_24_0(void) {
//   int r = lseek(10, 5066752, SEEK_END);
//   expect_result("r", r, 5066752);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_32_0
// static int test_lseek_mmap_p885_24_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x4d4000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8e5_17_1
// static void setup_lseek_mmap_p885_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p885_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p885_24_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_24_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_25_0(void) {
//   int r = lseek(10, 9981952, SEEK_END);
//   expect_result("r", r, 9981952);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_36_0
// static int test_lseek_mmap_p885_25_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x985000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_40_1
// static void setup_lseek_mmap_p885_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_25_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 9981952, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_40_proc0
// static void setup_lseek_mmap_p885_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p885_25_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_25_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_26_0(void) {
//   int r = lseek(10, 9981952, SEEK_END);
//   expect_result("r", r, 9981952);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_36_0
// static int test_lseek_mmap_p885_26_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x985000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_40_1
// static void setup_lseek_mmap_p885_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 9981952, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_40_proc0
// static void setup_lseek_mmap_p885_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 9981952, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_40_proc0
// static void setup_lseek_mmap_p885_26_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_26_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_27_0(void) {
//   int r = lseek(10, 9981952, SEEK_END);
//   expect_result("r", r, 9981952);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_36_0
// static int test_lseek_mmap_p885_27_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x985000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_42_1
// static void setup_lseek_mmap_p885_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 9981952, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_40_proc0
// static void setup_lseek_mmap_p885_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 5062656, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_15_proc0
// static void setup_lseek_mmap_p885_27_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_27_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_28_0(void) {
//   int r = lseek(10, 9981952, SEEK_END);
//   expect_result("r", r, 9981952);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_36_0
// static int test_lseek_mmap_p885_28_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x985000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_42_1
// static void setup_lseek_mmap_p885_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_28_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 9981952, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_40_proc0
// static void setup_lseek_mmap_p885_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 9981952, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8a5_40_proc0
// static void setup_lseek_mmap_p885_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_28_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_29_0(void) {
//   int r = lseek(10, 31625216, SEEK_END);
//   expect_result("r", r, 31625216);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p885_7_0
// static int test_lseek_mmap_p885_29_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e28000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_3_1
// static void setup_lseek_mmap_p885_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_29_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_30_0(void) {
//   int r = lseek(10, 163840, SEEK_END);
//   expect_result("r", r, 163840);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8a5_9_0
// static int test_lseek_mmap_p885_30_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p885_21_1
// static void setup_lseek_mmap_p885_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_30_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 163840, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_8_proc1
// static void setup_lseek_mmap_p885_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p885_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_30_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_31_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_31_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_1_1
// static void setup_lseek_mmap_p885_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_31_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31625216, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p885_23_proc1
// static void setup_lseek_mmap_p885_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_31_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_32_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p885_32_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p885_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p885_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p885_32_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_32_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_33_0(void) {
//   int r = lseek(10, 31621120, SEEK_END);
//   expect_result("r", r, 31621120);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_49_0
// static int test_lseek_mmap_p885_33_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8c5_7_1
// static void setup_lseek_mmap_p885_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_33_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31625216, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p885_23_proc1
// static void setup_lseek_mmap_p885_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p885_33_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_33_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p885_34_0(void) {
  int r = lseek(10, 167936, SEEK_END);
  expect_result("r", r, 167936);
  return xerrno(r);
}
static int test_lseek_mmap_p885_34_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x28000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p885_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_34_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p885_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_2_proc0
// static void setup_lseek_mmap_p885_34_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_34_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_35_0(void) {
//   int r = lseek(10, 167936, SEEK_END);
//   expect_result("r", r, 167936);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p885_34_0
static int test_lseek_mmap_p885_35_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x28000UL);
  
  return xerrno(r);
}
// static void setup_lseek_mmap_p885_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_2_proc0
// static void setup_lseek_mmap_p885_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p885_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_35_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_36_0(void) {
//   int r = lseek(10, 4096, SEEK_END);
//   expect_result("r", r, 4096);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_1_0
// static int test_lseek_mmap_p885_36_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p885_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_36_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p885_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p885_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_36_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p885_37_0(void) {
//   int r = lseek(10, 159744, SEEK_END);
//   expect_result("r", r, 159744);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_17_0
// static int test_lseek_mmap_p885_37_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p885_21_1
// static void setup_lseek_mmap_p885_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p885_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 163840, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8c5_8_proc1
// static void setup_lseek_mmap_p885_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p885_37_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p885_37_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p880_0_0(void) {
//   int r = lseek(10, 0, SEEK_END);
//   expect_result("r", r, 0);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_0_0
// static int test_lseek_mmap_p880_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_p880_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p880_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p880_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p880_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p880_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p880_1_0(void) {
//   int r = lseek(10, 31617024, SEEK_END);
//   expect_result("r", r, 31617024);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p8b8_14_0
// static int test_lseek_mmap_p880_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_p880_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p880_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8e5_14_proc0
// static void setup_lseek_mmap_p880_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p880_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p880_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p870_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p870_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p870_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p870_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_7_proc0
// static void setup_lseek_mmap_p870_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p870_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_6_proc0
// static void setup_lseek_mmap_p870_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p870_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
static void setup_lseek_mmap_p870_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_lseek_mmap_p870_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p870_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
// static void setup_lseek_mmap_p870_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i1", 0x0);
// }
// ^ See setup_lseek_mmap_p870_4_proc0
// static void setup_lseek_mmap_p870_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p870_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pae_7_proc0
// static void setup_lseek_mmap_p870_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_6_proc0
// static void setup_lseek_mmap_p870_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p870_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pae_29_proc0
// static void setup_lseek_mmap_p870_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_21_proc0
// static void setup_lseek_mmap_p870_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p870_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_12_proc0
// static void setup_lseek_mmap_p870_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pbe_12_proc0
// static void setup_lseek_mmap_p870_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
static void setup_lseek_mmap_p870_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_lseek_mmap_p870_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_12_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p870_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p870_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_lseek_mmap_p870_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_14_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p870_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_23_proc0
// static void setup_lseek_mmap_p870_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_15_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p8f8_34_common
// static void setup_lseek_mmap_p870_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i1", 0x0);
// }
// ^ See setup_lseek_mmap_p8b8_42_proc0
// static void setup_lseek_mmap_p870_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_15_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_7_final
// static void setup_lseek_mmap_p870_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_16_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p870_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pae_25_proc0
// static void setup_lseek_mmap_p870_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p870_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p870_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_17_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_4_common
// static void setup_lseek_mmap_p870_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x0);
// }
// ^ See setup_lseek_mmap_p8b8_44_proc0
// static void setup_lseek_mmap_p870_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p870_17_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_4_final
// static void setup_lseek_mmap_p870_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_18_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p870_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_p870_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_18_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_19_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p870_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pae_44_proc0
// static void setup_lseek_mmap_p870_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p870_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p870_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_20_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p870_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_p9f0_34_proc0
// static void setup_lseek_mmap_p870_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p870_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p870_20_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p870_21_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p870_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p870_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf4_0_common
// static void setup_lseek_mmap_p870_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_p9f0_35_proc0
// static void setup_lseek_mmap_p870_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p870_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p870_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p86c_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p86c_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p86c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p86c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p86c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p86c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p86c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p86c_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p86c_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p86c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_p86c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p86c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p86c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p86c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p86c_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p86c_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p86c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p86c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p86c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p86c_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p86c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p86c_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p86c_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p86c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_p86c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p86c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p86c_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p86c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p868_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p868_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p868_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p868_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p868_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p868_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p868_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p868_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p868_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p868_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p868_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_proc0
// static void setup_lseek_mmap_p868_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p868_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p868_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p868_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p868_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p868_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p868_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p868_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p868_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p868_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p868_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p868_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p868_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p868_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p868_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p868_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p868_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p860_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p860_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_p860_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p860_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p860_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p860_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p860_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p858_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p858_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p858_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p858_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p858_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p858_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p858_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p858_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p858_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p858_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p858_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p858_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p858_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p858_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p858_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p858_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p858_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p858_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p858_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p858_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p858_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p858_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p858_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p858_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p858_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p858_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p858_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p858_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84c_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p84c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p84c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p84c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p84c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p84c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84c_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p84c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_p84c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pae_10_proc0
// static void setup_lseek_mmap_p84c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p84c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p84c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84c_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84c_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p84c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p84c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p84c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p84c_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p84c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84c_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84c_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p84c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_p84c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pad8_5_proc0
// static void setup_lseek_mmap_p84c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p84c_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p84c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p84a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_0_proc0
// static void setup_lseek_mmap_p84a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_4_1
// static void setup_lseek_mmap_p84a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p84a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p84a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p84a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pad0_2_proc0
// static void setup_lseek_mmap_p84a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p84a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p84a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p84a_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p84a_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_11_proc0
// static void setup_lseek_mmap_p84a_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p84a_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p84a_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_2_proc0
// static void setup_lseek_mmap_p84a_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p84a_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p84a_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_11_proc0
// static void setup_lseek_mmap_p84a_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p84a_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p84a_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p84a_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_proc0
// static void setup_lseek_mmap_p84a_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p84a_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p84a_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p84a_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p84a_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p84a_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_proc0
// static void setup_lseek_mmap_p84a_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p84a_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pb94_17_1
// static void setup_lseek_mmap_p84a_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p84a_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_7_proc0
// static void setup_lseek_mmap_p84a_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p84a_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p84a_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p84a_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_1_proc0
// static void setup_lseek_mmap_p84a_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p84a_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p84a_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_14_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p84a_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p84a_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_14_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_15_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p84a_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_1_proc0
// static void setup_lseek_mmap_p84a_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_15_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_16_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p84a_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p84a_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_16_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p84a_17_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p84a_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p84a_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p84a_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p84a_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p84a_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p84a_17_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p840_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p840_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_p840_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p840_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p840_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p840_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p840_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p830_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p830_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p830_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p830_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p830_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p830_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p830_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p830_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p830_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p830_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p830_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p830_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_p830_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p830_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p830_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p830_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p830_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p830_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p830_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_p830_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p830_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p830_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p830_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p830_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p830_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p830_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x1000);
// }
// ^ See setup_lseek_mmap_pa6_8_proc1
// static void setup_lseek_mmap_p830_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p830_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p830_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p830_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p830_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p830_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
static void setup_lseek_mmap_p830_4_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x1000);
}
// static void setup_lseek_mmap_p830_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p830_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p830_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p830_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p830_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p830_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p830_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_p830_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p830_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p830_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p830_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p830_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p830_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p830_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i1", 0x1000);
// }
// ^ See setup_lseek_mmap_pa6_10_proc1
// static void setup_lseek_mmap_p830_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p830_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p830_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p830_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p830_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p830_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p830_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_p830_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p830_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p830_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p830_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p830_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p830_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p830_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_p830_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p830_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p82c_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p82c_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p82c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p82c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p82c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p82c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p82c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p82c_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p82c_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p82c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_p82c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p82c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p82c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p82c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p82c_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p82c_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p82c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p82c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p82c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p82c_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p82c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p82c_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p82c_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p82c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_p82c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p82c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p82c_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p82c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p828_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p828_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p828_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p828_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p828_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p828_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p828_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p828_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p828_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p828_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p828_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p828_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_1_proc1
// static void setup_lseek_mmap_p828_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p828_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p828_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p828_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p828_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p828_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p828_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p828_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p828_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p820_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p820_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_p820_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p820_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p820_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p820_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p820_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p818_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p818_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p818_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p818_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p818_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p818_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p818_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p818_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p818_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p818_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p818_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p818_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p818_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p818_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80c_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p80c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p80c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p80c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p80c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p80c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80c_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p80c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_p80c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p80c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p80c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p80c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80c_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80c_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p80c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p80c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p80c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p80c_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p80c_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80c_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80c_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p80c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf6_1_common
// static void setup_lseek_mmap_p80c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pc5_6_proc1
// static void setup_lseek_mmap_p80c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p80c_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf6_1_final
// static void setup_lseek_mmap_p80c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p80a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p80a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p80a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p80a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p80a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p80a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p80a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_1_proc1
// static void setup_lseek_mmap_p80a_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p80a_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p80a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p80a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p80a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p80a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p80a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbd0_1_common
// static void setup_lseek_mmap_p80a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p80a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_1_proc1
// static void setup_lseek_mmap_p80a_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p80a_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p80a_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p80a_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p80a_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p80a_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p80a_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p80a_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p80a_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p80a_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p80a_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p80a_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p80a_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p80a_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p80a_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p80a_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p80a_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p80a_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p80a_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p80a_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p80a_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p80a_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p80a_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p80a_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p80a_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p80a_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p80a_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_10_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p80a_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p80a_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p80a_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p80a_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_10_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_11_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p80a_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_4_common
// static void setup_lseek_mmap_p80a_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pa50_2_proc1
// static void setup_lseek_mmap_p80a_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb14_3_proc1
// static void setup_lseek_mmap_p80a_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_lseek_mmap_pbd0_1_final
// static void setup_lseek_mmap_p80a_11_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_12_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p80a_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p80a_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_14_proc0
// static void setup_lseek_mmap_p80a_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p80a_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_12_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p80a_13_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p80a_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p80a_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_2_common
// static void setup_lseek_mmap_p80a_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p80a_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p80a_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p80a_13_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p800_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(22);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_0
// static int test_lseek_mmap_p800_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_p800_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p800_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p800_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p800_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p800_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
static int test_lseek_mmap_p70_0_0(void) {
  int r = lseek(10, 0, 999);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static int test_lseek_mmap_p70_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
static void setup_lseek_mmap_p70_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
}
// static void setup_lseek_mmap_p70_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_0_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p70_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p70_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p70_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p70_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p70_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_p70_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_1_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p70_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p70_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p70_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p70_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p70_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_p70_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p70_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p70_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p70_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p70_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p70_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p70_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p70_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p70_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p70_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p70_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p70_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_lseek_mmap_p70_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p70_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p70_5_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p70_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p70_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p70_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_p70_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_5_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p70_5_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p70_6_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p70_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p70_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p70_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_p70_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p70_6_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p70_7_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p70_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p70_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p70_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_lseek_mmap_p70_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p70_7_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p70_8_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p70_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p70_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p70_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_lseek_mmap_p70_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p70_8_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p70_9_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p70_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_1_1
// static void setup_lseek_mmap_p70_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
static void setup_lseek_mmap_p70_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_lseek_mmap_p70_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p70_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p70_9_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p6c_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p6c_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p6c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_p6c_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_p6c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p6c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p6c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p6c_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p6c_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_0_1
// static void setup_lseek_mmap_p6c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
static void setup_lseek_mmap_p6c_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_lseek_mmap_p6c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p6c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p6c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p68_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p68_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf4_0_1
// static void setup_lseek_mmap_p68_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
static void setup_lseek_mmap_p68_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_lseek_mmap_p68_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p68_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p68_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p60_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p60_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf0_0_1
// static void setup_lseek_mmap_p60_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p60_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p60_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p60_0_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p60_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p60_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p60_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_p60_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p60_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p60_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p60_1_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p60_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p58_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p58_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p58_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p58_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p58_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p58_0_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p58_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p58_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p58_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p58_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p58_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p58_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p58_1_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p58_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p58_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p58_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_1_1
// static void setup_lseek_mmap_p58_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p58_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p70_3_proc0
// static void setup_lseek_mmap_p58_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p58_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p58_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p58_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p58_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_2_1
// static void setup_lseek_mmap_p58_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p58_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p70_3_proc0
// static void setup_lseek_mmap_p58_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p58_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p58_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p4c_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p4c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p4c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p4c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p6c_0_proc0
// static void setup_lseek_mmap_p4c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p4c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p4c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p4c_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p4c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_0_1
// static void setup_lseek_mmap_p4c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p4c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_p6c_1_proc0
// static void setup_lseek_mmap_p4c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p4c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p4c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p4a_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p4a_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p4a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p4a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p68_0_proc0
// static void setup_lseek_mmap_p4a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p4a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p4a_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p4a_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p4a_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p4a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p4a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p68_0_proc0
// static void setup_lseek_mmap_p4a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p4a_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p4a_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p4a_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p4a_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_0_1
// static void setup_lseek_mmap_p4a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p4a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p70_3_proc0
// static void setup_lseek_mmap_p4a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p4a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p4a_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p4a_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p4a_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe5_2_1
// static void setup_lseek_mmap_p4a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p4a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_p70_3_proc0
// static void setup_lseek_mmap_p4a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p4a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p4a_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p40_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p40_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe0_0_1
// static void setup_lseek_mmap_p40_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p40_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p40_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p40_0_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p40_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p40_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p40_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_p40_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p40_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p40_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p40_1_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p40_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p30_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p30_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p30_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p30_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p30_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p30_0_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p30_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p30_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p30_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p30_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p30_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p30_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_lseek_mmap_pb6_1_proc1
// static void setup_lseek_mmap_p30_1_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p30_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p30_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p30_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p30_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p30_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p30_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_7_proc1
// static void setup_lseek_mmap_p30_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p30_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p30_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p30_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p30_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p30_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p30_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_lseek_mmap_pb6_4_proc1
// static void setup_lseek_mmap_p30_3_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p30_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p30_4_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p30_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf8_0_1
// static void setup_lseek_mmap_p30_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pae_0_common
// static void setup_lseek_mmap_p30_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p30_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_lseek_mmap_pb6_8_proc1
// static void setup_lseek_mmap_p30_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p30_4_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p2c_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p2c_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p2c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p2c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p2c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p2c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p2c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p2c_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p2c_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pf6_9_1
// static void setup_lseek_mmap_p2c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p2c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p2c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p2c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p2c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p28_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p28_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd4_0_1
// static void setup_lseek_mmap_p28_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p28_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p28_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p28_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p28_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p20_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p20_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pd0_0_1
// static void setup_lseek_mmap_p20_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p20_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p20_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p20_0_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p20_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p18_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p18_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pec_0_1
// static void setup_lseek_mmap_p18_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p18_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p18_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p18_0_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p18_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p18_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p18_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pcc_1_1
// static void setup_lseek_mmap_p18_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p18_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p18_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p18_1_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p18_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p0c_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p0c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p0c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p0c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p0c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc0
// static void setup_lseek_mmap_p0c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p0c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p0c_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p0c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pe6_16_1
// static void setup_lseek_mmap_p0c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_lseek_mmap_pf8_0_common
// static void setup_lseek_mmap_p0c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_0_proc1
// static void setup_lseek_mmap_p0c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_lseek_mmap_pf8_5_proc0
// static void setup_lseek_mmap_p0c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_final
// static void setup_lseek_mmap_p0c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_lseek_mmap_pf8_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p0a_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p0a_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p0a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p0a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p0a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p0a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p0a_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p0a_1_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p0a_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p0a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p0a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p0a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb50_0_proc1
// static void setup_lseek_mmap_p0a_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p0a_1_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p0a_2_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p0a_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_0_1
// static void setup_lseek_mmap_p0a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p0a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p0a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p0a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p0a_2_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p0a_3_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p0a_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc5_2_1
// static void setup_lseek_mmap_p0a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_lseek_mmap_pbe_17_common
// static void setup_lseek_mmap_p0a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p0a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_lseek_mmap_pb94_13_proc0
// static void setup_lseek_mmap_p0a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_lseek_mmap_pbe_0_final
// static void setup_lseek_mmap_p0a_3_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

/*
 * calls: lseek mmap
 */
// static int test_lseek_mmap_p00_0_0(void) {
//   int r = lseek(10, 0, 999);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_p70_0_0
// static int test_lseek_mmap_p00_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_lseek_mmap_pc0_0_1
// static void setup_lseek_mmap_p00_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_lseek_mmap_p70_0_common
// static void setup_lseek_mmap_p00_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p00_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_lseek_mmap_pbe_0_proc1
// static void setup_lseek_mmap_p00_0_final(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal
// static void setup_lseek_mmap_p00_0_procfinal(void) {
//   
// }
// ^ See setup_lseek_mmap_pbe_0_procfinal

//+++ common
static void cleanup(void) {
  unlink("__f0");
  unlink("__f1");
  unlink("__f2");
  unlink("__f3");
  unlink("__f4");
  unlink("__f5");
}

struct fstest fstests[] = {
//+++ tests
  { "fs-lseek_mmap_pf8_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_2",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_3",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_4",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_5",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_6",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_6_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_7",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_7_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_8",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_8_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_9",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_9_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_10",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_11",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_11_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_12",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_13",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_13_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_14",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_14_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_15",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_14_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_16",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_16_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_17",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_17_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_18",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_18_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_19",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_19_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_20",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_20_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_21",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_21_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_22",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_22_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_23",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_23_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_24",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_24_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_25",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_26",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_26_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_27",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_27_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_28",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_28_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_29",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_29_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_30",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_30_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_31",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_31_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_32",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_32_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_33",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_33_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_34",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_34_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_35",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_35_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_36",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_36_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_37",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_pf8_37_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_38",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_38_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf8_39",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_39_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf6_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_1",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf6_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_2",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pf6_2_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_3",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_7_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_4",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf6_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_5",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pf6_5_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_6",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pf6_2_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_7",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf6_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_8",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pf6_5_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_9",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_10",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pf6_10_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_11",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pf6_11_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_12",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf6_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_13",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf6_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_14",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pf6_11_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_15",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_7_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_16",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pf6_10_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf6_17",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf4_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf4_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf4_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf4_1_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf4_2",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf4_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf4_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf4_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf0_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pf0_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_2",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_3",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_4",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_5",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_7_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_6",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_20_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_7",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf6_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_8",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pec_8_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_9",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_7_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pec_10",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_20_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf6_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_1",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf6_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_2",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pf6_2_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_3",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pf6_10_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_4",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pf6_10_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_5",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pf6_11_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_6",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pf6_5_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_7",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pf6_2_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_8",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pf6_5_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_9",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pf6_11_proc0 }, { &setup_lseek_mmap_pf6_2_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_10",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf6_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_11",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf6_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_12",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_7_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_13",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf6_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_14",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf6_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_15",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_7_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_16",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe6_17",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf4_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf4_1_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_2",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf4_1_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pe5_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_4",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pec_8_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_5",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf4_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_6",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf4_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_7",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_20_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_8",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pe5_8_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_9",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf4_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_10",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf4_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_11",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pe5_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_12",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pe5_8_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_13",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf4_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_14",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pec_8_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe5_15",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_20_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe0_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pe0_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd8_1_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_2",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd8_2_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_3",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd8_3_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_4",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_5",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd8_3_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_6",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd8_6_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_7",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd8_7_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_8",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd8_8_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_9",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd8_6_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_10",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd8_7_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_11",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd8_8_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_12",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd8_1_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd8_13",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd8_2_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_1",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pd6_1_proc0 }, { &setup_lseek_mmap_pd6_1_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_2",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pd6_1_proc0 }, { &setup_lseek_mmap_pd6_1_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_3",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pd6_3_proc0 }, { &setup_lseek_mmap_pd6_1_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_4",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pd6_1_proc0 }, { &setup_lseek_mmap_pd6_4_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_5",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pd6_3_proc0 }, { &setup_lseek_mmap_pd6_4_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_6",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_7",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pd6_1_proc0 }, { &setup_lseek_mmap_pd6_4_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_8",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_9",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pd6_3_proc0 }, { &setup_lseek_mmap_pd6_1_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_10",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_11",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pd6_3_proc0 }, { &setup_lseek_mmap_pd6_4_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_12",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_13",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_14",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd6_15",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd4_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd4_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd4_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd4_1_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd4_2",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd4_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd4_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd4_1_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd0_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pd0_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pcc_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pcc_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pcc_2",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pcc_3",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_1",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_2",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pd6_1_proc0 }, { &setup_lseek_mmap_pd6_1_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_3",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pd6_3_proc0 }, { &setup_lseek_mmap_pd6_1_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_4",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pd6_3_proc0 }, { &setup_lseek_mmap_pd6_1_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_5",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pd6_1_proc0 }, { &setup_lseek_mmap_pd6_4_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_6",
    &setup_lseek_mmap_pf6_2_common,
    { { &setup_lseek_mmap_pd6_3_proc0 }, { &setup_lseek_mmap_pd6_4_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_2_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_7",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pd6_1_proc0 }, { &setup_lseek_mmap_pd6_1_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_8",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pd6_1_proc0 }, { &setup_lseek_mmap_pd6_4_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_9",
    &setup_lseek_mmap_pf6_6_common,
    { { &setup_lseek_mmap_pd6_3_proc0 }, { &setup_lseek_mmap_pd6_4_proc1 } },
    &setup_lseek_mmap_pf6_2_procfinal,
    &setup_lseek_mmap_pf6_6_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_10",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_11",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_12",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_13",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_14",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc6_15",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd4_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd4_1_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_2",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pd4_1_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd4_1_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_4",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd4_1_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_5",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pc5_5_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pc5_6_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_7",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pc5_6_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_8",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pc5_6_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_9",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pc5_5_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_10",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pc5_6_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_11",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pc5_5_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_12",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pc5_5_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_13",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pc5_13_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_14",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pd4_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc5_15",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pc5_6_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc0_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pc0_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_0",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_1",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_2",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbe_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_3",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_4",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_5",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_5_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_6",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_7",
    &setup_lseek_mmap_pbe_7_common,
    { { &setup_lseek_mmap_pbe_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_8",
    &setup_lseek_mmap_pbe_7_common,
    { { &setup_lseek_mmap_pbe_8_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_9",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_9_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_10",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_10_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_11",
    &setup_lseek_mmap_pbe_7_common,
    { { &setup_lseek_mmap_pbe_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_12",
    &setup_lseek_mmap_pbe_12_common,
    { { &setup_lseek_mmap_pbe_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_13",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbe_13_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_14",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbe_14_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_15",
    &setup_lseek_mmap_pbe_15_common,
    { { &setup_lseek_mmap_pbe_15_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_16",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_16_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_17",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_18",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pbe_18_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_19",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_19_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_20",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_20_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_21",
    &setup_lseek_mmap_pbe_7_common,
    { { &setup_lseek_mmap_pbe_21_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_22",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbe_22_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_23",
    &setup_lseek_mmap_pbe_15_common,
    { { &setup_lseek_mmap_pbe_23_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_24",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_24_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_25",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pbe_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbe_26",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbe_26_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbd8_0",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbe_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbd8_1",
    &setup_lseek_mmap_pbd8_1_common,
    { { &setup_lseek_mmap_pbe_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbd8_2",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbd8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbd8_3",
    &setup_lseek_mmap_pbd8_1_common,
    { { &setup_lseek_mmap_pbd8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbd0_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbd0_1",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbd0_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbd0_3",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbc_0",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbb0_0",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbb0_1",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbb0_2",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbe_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbb0_3",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbb0_4",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pbb0_5",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbe_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb98_0",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbe_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb98_1",
    &setup_lseek_mmap_pbd8_1_common,
    { { &setup_lseek_mmap_pbe_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb98_2",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pbd8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb98_3",
    &setup_lseek_mmap_pbd8_1_common,
    { { &setup_lseek_mmap_pbd8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_3",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_4",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_5",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_6",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_7",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_8",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_9",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_10",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_11",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_12",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_13",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_14",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_15",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_16",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb94_17",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_17_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb8_0",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb6_0",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb6_1",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb6_2",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb6_3",
    &setup_lseek_mmap_pb6_3_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb6_4",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb6_5",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb6_6",
    &setup_lseek_mmap_pb6_3_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb6_7",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb6_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb58_0",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pb58_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb58_1",
    &setup_lseek_mmap_pbd8_1_common,
    { { &setup_lseek_mmap_pb58_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb58_2",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pb58_0_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb58_3",
    &setup_lseek_mmap_pbd8_1_common,
    { { &setup_lseek_mmap_pb58_0_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb50_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb50_1",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb50_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb4_0",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb30_0",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb30_1",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb18_0",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pb58_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb18_1",
    &setup_lseek_mmap_pbd8_1_common,
    { { &setup_lseek_mmap_pb58_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb18_2",
    &setup_lseek_mmap_pbe_2_common,
    { { &setup_lseek_mmap_pb58_0_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb18_3",
    &setup_lseek_mmap_pbd8_1_common,
    { { &setup_lseek_mmap_pb58_0_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_3",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_4",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_5",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_6",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_7",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_8",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_9",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_10",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_11",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_12",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb14_13",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pb0_0",
    &setup_lseek_mmap_pbe_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pbe_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_4",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_5",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_6",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_7",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_8_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_9",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_9_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_10",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_11",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_12",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_13",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_13_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_14",
    &setup_lseek_mmap_pae_14_common,
    { { &setup_lseek_mmap_pae_14_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_15",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_16",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_16_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_17",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_18",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_19",
    &setup_lseek_mmap_pae_14_common,
    { { &setup_lseek_mmap_pae_19_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_20",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_21",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_21_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_22",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_22_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_23",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_23_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_24",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_24_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_25",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_26",
    &setup_lseek_mmap_pae_14_common,
    { { &setup_lseek_mmap_pae_26_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_27",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_28",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_28_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_29",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_29_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_30",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_31",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_31_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_32",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_32_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_33",
    &setup_lseek_mmap_pae_14_common,
    { { &setup_lseek_mmap_pae_33_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_34",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_34_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_35",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_35_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_36",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_36_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_37",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_37_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_38",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_38_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_39",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_40",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_40_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_41",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_42",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_43",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_43_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_44",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_44_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_45",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_45_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_46",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_46_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_47",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_47_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_48",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_48_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_49",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_49_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_50",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_50_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_51",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pbe_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_52",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_52_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_53",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_54",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_54_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_55",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pbe_18_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_56",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_56_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_57",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_24_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_58",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_58_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pae_59",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pbe_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad8_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad8_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad8_2",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad8_3",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad8_4",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad8_5",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad8_6",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad8_7",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_7_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad0_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad0_1",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad0_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pad0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad0_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pad0_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad0_4",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pad0_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad0_5",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad0_6",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad0_7",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pad0_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pac_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pac_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_4",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_5",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pab0_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pab0_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_7",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_8",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_9",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_10",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pab0_11",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa98_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa98_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa98_2",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa98_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa98_4",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa98_5",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa98_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa98_7",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_3",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_3_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_4",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_5",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_6",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_7",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_8",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_9",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_10",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_11",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_12",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_13",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_14",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_14_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_15",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_16",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_17",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_18",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_19",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pa94_19_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_20",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_21",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pa94_19_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_22",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_23",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_24",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_25",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_26",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_27",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_28",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pa94_28_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_29",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_30",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pa94_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_31",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_32",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_33",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_34",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_35",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_36",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_37",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pa94_28_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_38",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_39",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_40",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_41",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_42",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_42_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_43",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_43_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_44",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_17_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_45",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_17_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_46",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pa94_28_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_17_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa94_47",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_47_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa8_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa8_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_4",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_5",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pa6_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_6",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_7",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pa6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_9",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_9_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_10",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_10_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_11",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_12",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_13",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_14",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_15",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_16",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_17",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_17_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_18",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_18_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa6_19",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa58_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa58_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa58_2",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa58_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa58_4",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa58_5",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa58_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa58_7",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa50_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa50_1",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa50_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa50_3",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa50_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa50_4",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa50_5",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa50_6",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa4_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa4_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa30_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa30_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa30_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa30_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa18_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa18_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa18_2",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa18_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa18_4",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa18_5",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa18_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa18_7",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_3",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_4",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_5",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa50_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_6",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_7",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa50_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_8",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_9",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_10",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_11",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_12",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_13",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_14",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_15",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_16",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_17",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_18",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_19",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_20",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_21",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_47_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_22",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_23",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_24",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_25",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_26",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_27",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa14_27_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_14_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_28",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_29",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_30",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_31",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_32",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_33",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_34",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_14_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_35",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa14_27_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_47_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_36",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pa94_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa14_37",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_7_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa0_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_pa0_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pae_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_0",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_1",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_4",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p9f0_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_5",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_6",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbe_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_7",
    &setup_lseek_mmap_p9f0_7_common,
    { { &setup_lseek_mmap_p9f0_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_8",
    &setup_lseek_mmap_p9f0_7_common,
    { { &setup_lseek_mmap_p9f0_8_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_9",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_pab0_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_10",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_10_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_10_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_11",
    &setup_lseek_mmap_p9f0_7_common,
    { { &setup_lseek_mmap_p9f0_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_12",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_21_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_13",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_14",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_31_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_15",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_24_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_16",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbe_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_17",
    &setup_lseek_mmap_pae_14_common,
    { { &setup_lseek_mmap_pae_14_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_18",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p9f0_18_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_19",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_p9f0_19_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_20",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_pae_44_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_21",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_21_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_22",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_22_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_23",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_pae_45_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_24",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_24_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_25",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_25_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_26",
    &setup_lseek_mmap_p9f0_7_common,
    { { &setup_lseek_mmap_p9f0_26_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_27",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_p9f0_27_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_28",
    &setup_lseek_mmap_p9f0_28_common,
    { { &setup_lseek_mmap_p9f0_28_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_29",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_pae_35_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_30",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbe_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_31",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_31_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_32",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_p9f0_32_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_33",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_33_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_34",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_34_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_35",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_p9f0_35_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_36",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_23_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9f0_37",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_37_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ec_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ec_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ec_2",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ec_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9e8_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9e8_1",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9e8_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9e8_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9e0_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9d8_0",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9d8_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9d8_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9d8_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9d8_4",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9d8_5",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9d8_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9d8_7",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9cc_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9cc_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9cc_2",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9cc_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_1",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_p9ca_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_4",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_5",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_6",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_7",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_9",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_10",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_11",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_p9ca_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_12",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_13",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_14",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pad0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_15",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_16",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pad0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ca_17",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9c0_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9b0_0",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9b0_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9b0_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9b0_3",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9b0_4",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9b0_5",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_p9b0_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9b0_6",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9b0_7",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_p9b0_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9b0_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ac_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ac_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ac_2",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9ac_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9a8_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9a8_1",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9a8_2",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p9a0_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p998_0",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p998_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98c_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98c_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98c_2",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98c_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_1",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_4",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_5",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_6",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_7",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_8",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_9",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_14_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_10",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_11",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_12",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p98a_13",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p980_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p9f0_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_2_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_4",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_5",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_6",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p9f0_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_7",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p970_8_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_9",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_p970_9_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_10",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_9_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_11",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_12",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_13",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_14",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p970_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_15",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p970_15_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_16",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_p970_16_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_17",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p970_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_18",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_16_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_19",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p970_19_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_20",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_21_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_21",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_pae_31_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_22",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p970_22_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_23",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_23_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_24",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_36_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_25",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_p970_25_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_26",
    &setup_lseek_mmap_p9f0_7_common,
    { { &setup_lseek_mmap_p970_26_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_27",
    &setup_lseek_mmap_pbe_12_common,
    { { &setup_lseek_mmap_p970_27_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_27_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_28",
    &setup_lseek_mmap_pbe_12_common,
    { { &setup_lseek_mmap_p970_28_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_27_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_29",
    &setup_lseek_mmap_pbe_12_common,
    { { &setup_lseek_mmap_p970_29_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_27_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_30",
    &setup_lseek_mmap_p970_30_common,
    { { &setup_lseek_mmap_p970_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_27_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_31",
    &setup_lseek_mmap_pbe_12_common,
    { { &setup_lseek_mmap_p970_31_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_27_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_32",
    &setup_lseek_mmap_pbe_12_common,
    { { &setup_lseek_mmap_p970_32_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_27_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_33",
    &setup_lseek_mmap_pbe_12_common,
    { { &setup_lseek_mmap_p970_33_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_27_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_34",
    &setup_lseek_mmap_p9f0_7_common,
    { { &setup_lseek_mmap_p970_34_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_34_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_35",
    &setup_lseek_mmap_p970_35_common,
    { { &setup_lseek_mmap_p970_35_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p970_34_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_36",
    &setup_lseek_mmap_pbe_12_common,
    { { &setup_lseek_mmap_p970_36_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_36_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_37",
    &setup_lseek_mmap_p9f0_28_common,
    { { &setup_lseek_mmap_pae_19_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_38",
    &setup_lseek_mmap_p9f0_7_common,
    { { &setup_lseek_mmap_p970_38_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_39",
    &setup_lseek_mmap_p9f0_7_common,
    { { &setup_lseek_mmap_pae_24_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_40",
    &setup_lseek_mmap_p9f0_28_common,
    { { &setup_lseek_mmap_pae_26_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_41",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_42",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_pae_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_43",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_43_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_44",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_31_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_45",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_45_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_46",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_31_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_2_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_47",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_pae_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_48",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_48_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_48_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_49",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_18_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_50",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_p970_50_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_51",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_p970_50_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_51_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_52",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_52_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_53",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_pae_45_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_48_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_54",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_43_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_55",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbe_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_56",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_56_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_57",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_p970_57_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_58",
    &setup_lseek_mmap_p9f0_7_common,
    { { &setup_lseek_mmap_p970_58_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_2_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_59",
    &setup_lseek_mmap_pae_14_common,
    { { &setup_lseek_mmap_p970_59_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_60",
    &setup_lseek_mmap_pae_9_common,
    { { &setup_lseek_mmap_p9f0_32_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_61",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_61_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_62",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_62_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_63",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_63_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_2_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_64",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_64_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_65",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_65_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_66",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_66_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_67",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_49_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_68",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_50_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_69",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pbe_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_70",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_56_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_71",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_48_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_72",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbe_24_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_73",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p970_8_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_74",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_74_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_75",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_76",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_23_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_77",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p970_77_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_78",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_78_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_79",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_80",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_80_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_81",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_43_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_82",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_82_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_83",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_22_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_84",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_85",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_54_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_86",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_48_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_87",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_pae_50_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_88",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_23_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_89",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_pae_45_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_90",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p9f0_25_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_91",
    &setup_lseek_mmap_p9f0_9_common,
    { { &setup_lseek_mmap_p9f0_27_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_92",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_64_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_93",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_24_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p970_94",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_p970_94_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_94_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p96c_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p96c_1",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p96c_2",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p96c_3",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p96c_4",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p96c_5",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p96c_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p96c_7",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p968_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p968_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p968_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_2_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p968_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p968_4",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p968_5",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p968_6",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p968_7",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pad0_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p968_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p960_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p960_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pa94_28_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_4",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_5",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_6",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_7",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_8",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_9",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_10",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_11",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_12",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_13",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_14",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_15",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_16",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p958_17",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pa94_28_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94c_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94c_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94c_2",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94c_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94c_4",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pab0_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p94c_4_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94c_5",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94c_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94c_7",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_1",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pa94_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p94a_2_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_3",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_4",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_2_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_5",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_48_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_6",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_7",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_9",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_10",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_11",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_12",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_13",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_14",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_15",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_16",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_17",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_18",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_19",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_20",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_21",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pad0_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_22",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_23",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pad0_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_24",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_25",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_3_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_26",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_27",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_28",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_29",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_30",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_31",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_32",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_33",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_34",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_35",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_36",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pad0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p94c_4_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_3_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_37",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_38",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pa94_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_94_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_39",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_40",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_41",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p94c_4_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_42",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pad0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_43",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p94c_4_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_44",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pa94_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_45",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p94a_2_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_46",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_5_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p94a_47",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pad0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_48_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p940_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p940_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_4",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_5",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_p930_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_6",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_p930_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_7",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_8",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_p930_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_9",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_p930_9_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_10",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_11",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pa6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_48_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_12",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_13",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_9_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_14",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p930_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_15",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_p930_15_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_16",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_17",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_18",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p930_19",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p92c_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p92c_1",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p92c_2",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p92c_3",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p92c_4",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p92c_5",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p92c_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p92c_7",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p928_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p928_1",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p928_2",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p928_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p928_4",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_48_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p928_5",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p928_6",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p920_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p920_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p918_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p918_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p918_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p918_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90c_0",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90c_1",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90c_2",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90c_3",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90c_4",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90c_5",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90c_6",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90c_7",
    &setup_lseek_mmap_pf4_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_1",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_3",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_4",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_5",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_6",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_7",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_8",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_14_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_9",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_94_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_10",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_48_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_11",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_12",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_13",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_14",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_2_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_15",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_16",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_12_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_17",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_18",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb14_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_19",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_20",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_48_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_21",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_22",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_23",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_24",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_25",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_82_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_26",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_27",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_28",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_p90a_28_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_14_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_29",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_2_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_14_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_30",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_31",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p94c_4_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_32",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p94c_4_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_33",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_34",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_22_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_35",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_36",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p94c_4_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_47_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p90a_37",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p900_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p900_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p970_3_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_1",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_3",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_4",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_5",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_5_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_7",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_8",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_9",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_10",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_10_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_11",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_12",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_13",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p970_22_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_14",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_15",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_15_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_16",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_16_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_17",
    &setup_lseek_mmap_p8f8_17_common,
    { { &setup_lseek_mmap_p8f8_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_p8f8_17_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_18",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_18_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_19",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8f8_19_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_20",
    &setup_lseek_mmap_p8f8_20_common,
    { { &setup_lseek_mmap_p8f8_20_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_p8f8_20_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_21",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8f8_19_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_22",
    &setup_lseek_mmap_p8f8_22_common,
    { { &setup_lseek_mmap_p8f8_22_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_23",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_23_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_24",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_24_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_25",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_25_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_26",
    &setup_lseek_mmap_p8f8_26_common,
    { { &setup_lseek_mmap_p8f8_26_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_27",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8f8_22_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_28",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8f8_28_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_29",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_29_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_30",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_31",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_31_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_32",
    &setup_lseek_mmap_p8f8_17_common,
    { { &setup_lseek_mmap_p8f8_32_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_p8f8_17_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_33",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_33_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_34",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p8f8_34_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_35",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_35_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_36",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8f8_36_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_37",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8f8_36_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_38",
    &setup_lseek_mmap_p8f8_20_common,
    { { &setup_lseek_mmap_p8f8_38_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_p8f8_20_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_39",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8f8_39_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_40",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8f8_39_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_41",
    &setup_lseek_mmap_p8f8_26_common,
    { { &setup_lseek_mmap_p8f8_41_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_42",
    &setup_lseek_mmap_p8f8_42_common,
    { { &setup_lseek_mmap_p8f8_41_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_43",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8f8_43_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_44",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8f8_43_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_45",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f8_45_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_46",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8f8_46_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_47",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8f8_47_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f8_48",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8f8_47_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f6_0",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f6_1",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f6_2",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f6_3",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f4_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f4_1",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f4_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f4_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f4_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8f0_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_1",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_3",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_5",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_6",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_7",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_8",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ec_9",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e6_0",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e6_1",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e6_2",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e6_3",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_3",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_3_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_5",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_7",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_8",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_8_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_9",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_9_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_10",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_11",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_12",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_12_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_13",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_13_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_14",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_14_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_15",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_15_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_15_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_16",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_16_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_16_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e5_17",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_15_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_17_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8e0_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d8_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d8_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d8_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d8_3",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d8_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d8_5",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8d8_5_proc0 }, { &setup_lseek_mmap_p8d8_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d8_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d8_7",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pb6_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d8_8",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_15_proc0 }, { &setup_lseek_mmap_pb6_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d6_0",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d6_1",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d6_2",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d6_3",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d4_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d4_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8d4_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d4_2",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8d0_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8cc_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8cc_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c6_0",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c6_1",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c6_2",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c6_3",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8c5_2_proc0 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_3",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8c5_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_3_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_14_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_5",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8c5_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_14_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_6",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8c5_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_7",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8c5_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_7_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_8",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_p8c5_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_9",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8c5_2_proc0 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_10",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8e5_15_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_7_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_11",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8d4_1_proc1 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_12",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8d4_1_proc1 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_7_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c5_13",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_15_proc0 }, { &setup_lseek_mmap_p8e5_15_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_17_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8c0_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8f8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_2",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_4",
    &setup_lseek_mmap_p8b8_4_common,
    { { &setup_lseek_mmap_p8b8_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_5",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p9ca_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_7",
    &setup_lseek_mmap_p8b8_4_common,
    { { &setup_lseek_mmap_pab0_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_8",
    &setup_lseek_mmap_p8b8_8_common,
    { { &setup_lseek_mmap_p8b8_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_9",
    &setup_lseek_mmap_p8b8_8_common,
    { { &setup_lseek_mmap_pab0_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_10",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_10_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_11",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_12",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_13",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p970_15_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_14",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_15",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_15_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_16",
    &setup_lseek_mmap_p8b8_16_common,
    { { &setup_lseek_mmap_p8b8_16_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_p8f8_17_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_17",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_17_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_18",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_18_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_19",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_19_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_20",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_20_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_21",
    &setup_lseek_mmap_p8b8_21_common,
    { { &setup_lseek_mmap_p8b8_21_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_22",
    &setup_lseek_mmap_p8b8_21_common,
    { { &setup_lseek_mmap_pae_31_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_23",
    &setup_lseek_mmap_p8b8_23_common,
    { { &setup_lseek_mmap_pbe_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_24",
    &setup_lseek_mmap_p8b8_23_common,
    { { &setup_lseek_mmap_p8f8_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_24_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_25",
    &setup_lseek_mmap_p8b8_21_common,
    { { &setup_lseek_mmap_p8b8_25_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_26",
    &setup_lseek_mmap_p8b8_26_common,
    { { &setup_lseek_mmap_pae_13_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_27",
    &setup_lseek_mmap_p8b8_27_common,
    { { &setup_lseek_mmap_p8b8_27_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_28",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_29",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_38_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_30",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_31",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_32",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_21_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_33",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_40_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_34",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_34_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_35",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_36",
    &setup_lseek_mmap_p8b8_4_common,
    { { &setup_lseek_mmap_p8b8_36_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_37",
    &setup_lseek_mmap_p8b8_37_common,
    { { &setup_lseek_mmap_p8b8_37_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_p8f8_20_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_38",
    &setup_lseek_mmap_p8b8_4_common,
    { { &setup_lseek_mmap_p8b8_38_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_39",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p8b8_39_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_40",
    &setup_lseek_mmap_p8b8_26_common,
    { { &setup_lseek_mmap_pae_12_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_41",
    &setup_lseek_mmap_p8b8_23_common,
    { { &setup_lseek_mmap_pae_23_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_42",
    &setup_lseek_mmap_p8b8_21_common,
    { { &setup_lseek_mmap_p8b8_42_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_43",
    &setup_lseek_mmap_p8b8_26_common,
    { { &setup_lseek_mmap_pae_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_44",
    &setup_lseek_mmap_p8b8_27_common,
    { { &setup_lseek_mmap_p8b8_44_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_45",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p8b8_45_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_46",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p8b8_46_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_47",
    &setup_lseek_mmap_p8b8_47_common,
    { { &setup_lseek_mmap_p8b8_47_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_48",
    &setup_lseek_mmap_p8b8_47_common,
    { { &setup_lseek_mmap_p8b8_48_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_49",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_49_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_50",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_50_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_51",
    &setup_lseek_mmap_p8f8_42_common,
    { { &setup_lseek_mmap_p8b8_51_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_52",
    &setup_lseek_mmap_p8b8_52_common,
    { { &setup_lseek_mmap_p8b8_52_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_53",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_53_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_54",
    &setup_lseek_mmap_p8f8_17_common,
    { { &setup_lseek_mmap_p8b8_54_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_p8f8_17_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_55",
    &setup_lseek_mmap_p8b8_21_common,
    { { &setup_lseek_mmap_p8b8_55_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_56",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p8f8_34_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_57",
    &setup_lseek_mmap_p8b8_57_common,
    { { &setup_lseek_mmap_p8b8_57_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_58",
    &setup_lseek_mmap_p8b8_58_common,
    { { &setup_lseek_mmap_p8b8_58_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_p8f8_20_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_59",
    &setup_lseek_mmap_p8b8_57_common,
    { { &setup_lseek_mmap_p8b8_59_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_60",
    &setup_lseek_mmap_p8b8_47_common,
    { { &setup_lseek_mmap_p8b8_60_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_61",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_61_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_62",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p8b8_62_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_63",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_63_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_64",
    &setup_lseek_mmap_p8f8_17_common,
    { { &setup_lseek_mmap_p8b8_64_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_p8f8_17_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_65",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_65_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_66",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p8b8_66_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_67",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_67_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_68",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_68_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_69",
    &setup_lseek_mmap_p8b8_52_common,
    { { &setup_lseek_mmap_p8b8_69_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_70",
    &setup_lseek_mmap_p8b8_70_common,
    { { &setup_lseek_mmap_p8b8_69_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_71",
    &setup_lseek_mmap_p8b8_71_common,
    { { &setup_lseek_mmap_p8b8_71_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_p8f8_20_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_72",
    &setup_lseek_mmap_p8b8_70_common,
    { { &setup_lseek_mmap_p8b8_72_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_73",
    &setup_lseek_mmap_p8b8_70_common,
    { { &setup_lseek_mmap_p8b8_72_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_74",
    &setup_lseek_mmap_p8b8_47_common,
    { { &setup_lseek_mmap_p8b8_74_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_75",
    &setup_lseek_mmap_p8b8_52_common,
    { { &setup_lseek_mmap_p8b8_74_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_76",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_77",
    &setup_lseek_mmap_p8b8_70_common,
    { { &setup_lseek_mmap_p8b8_77_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_78",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_78_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_79",
    &setup_lseek_mmap_p8b8_52_common,
    { { &setup_lseek_mmap_p8b8_79_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_80",
    &setup_lseek_mmap_p8b8_70_common,
    { { &setup_lseek_mmap_p8b8_79_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_81",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_81_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_82",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_82_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_83",
    &setup_lseek_mmap_p8b8_47_common,
    { { &setup_lseek_mmap_p8b8_83_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_84",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_84_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_85",
    &setup_lseek_mmap_p8f8_42_common,
    { { &setup_lseek_mmap_p8b8_85_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_86",
    &setup_lseek_mmap_p8b8_52_common,
    { { &setup_lseek_mmap_p8b8_57_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_87",
    &setup_lseek_mmap_p8b8_52_common,
    { { &setup_lseek_mmap_p8b8_60_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_88",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_88_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_89",
    &setup_lseek_mmap_p8b8_57_common,
    { { &setup_lseek_mmap_p8b8_89_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_90",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_90_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_91",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_91_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_92",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_92_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_93",
    &setup_lseek_mmap_p8f8_17_common,
    { { &setup_lseek_mmap_p8b8_93_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_p8f8_17_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_94",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_94_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_95",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p8b8_95_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_96",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b8_96_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_97",
    &setup_lseek_mmap_p8f8_20_common,
    { { &setup_lseek_mmap_p8b8_97_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_p8f8_20_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_98",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b8_98_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_99",
    &setup_lseek_mmap_p8f8_22_common,
    { { &setup_lseek_mmap_p8b8_99_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_100",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_100_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_101",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b8_101_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_102",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b8_98_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_103",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8b8_96_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_104",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8b8_99_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_105",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8b8_105_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_106",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8b8_106_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b8_107",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b8_106_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b6_0",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b6_1",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b6_2",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b6_3",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b6_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b6_4",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b6_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b6_5",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8b6_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b6_6",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b6_7",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8b6_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b4_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b4_1",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b4_2",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b4_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pad0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b4_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8b4_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b4_5",
    &setup_lseek_mmap_p8b8_23_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b4_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_9_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b4_7",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_16_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b4_8",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b0_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8b0_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_1",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_3",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_5",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_6",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_7",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_8",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_9",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b6_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_10",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_11",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_12",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b6_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_13",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_14",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_15",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8b6_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_16",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_17",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_18",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8ac_19",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8b6_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a6_0",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a6_1",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a6_2",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a6_3",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b6_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a6_4",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p8b6_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a6_5",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8b6_3_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a6_6",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pad8_2_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a6_7",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p8b6_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_1",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_4",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8a5_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_5",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8f4_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_7",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_8",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_3_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_9",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_9_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_10",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_9_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_11",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8a5_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_12",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_9_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_8_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_13",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8a5_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_8_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_14",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_15",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8a5_15_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_16",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_13_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_17",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8a5_15_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_13_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_18",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_18_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_19",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_20",
    &setup_lseek_mmap_p8b8_23_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_21",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb14_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_22",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_22_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_23",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_3_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_24",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pa94_3_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_25",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_17_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_26",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_26_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_26_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_26_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_27",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_9_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_13_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_28",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_29",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_8_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_30",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_31",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_32",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_15_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_32_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_17_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_33",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_33_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_33_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_34",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_33_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_16_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_35",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_36",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_36_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_36_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_36_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_37",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_38",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_36_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_36_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_38_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_39",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_40",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_40_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_36_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_40_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_41",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_42",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_40_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_36_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_42_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_43",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_9_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_44",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_17_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_45",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_45_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_45_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_46",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_45_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_9_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_13_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a5_47",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pa94_30_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a0_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p8a0_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pa6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_5",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p898_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_7",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8d4_1_proc1 }, { &setup_lseek_mmap_p898_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_8",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8d4_1_proc1 }, { &setup_lseek_mmap_p898_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_9",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8d4_1_proc1 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_10",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p898_10_proc0 }, { &setup_lseek_mmap_pa6_9_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_11",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8c5_8_proc1 }, { &setup_lseek_mmap_p898_11_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_12",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p898_12_proc0 }, { &setup_lseek_mmap_p898_12_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_13",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p898_13_proc0 }, { &setup_lseek_mmap_p898_13_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_14",
    &setup_lseek_mmap_p8b8_23_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_15",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pb6_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_16",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_17",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pb6_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_18",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pb6_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p898_19",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_15_proc0 }, { &setup_lseek_mmap_pb6_5_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p896_0",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p896_1",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p896_2",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p896_3",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p896_4",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p896_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p896_5",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p896_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p896_6",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p896_4_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p896_7",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p896_4_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p894_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p894_1",
    &setup_lseek_mmap_p8b8_23_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_16_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p894_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_p8c5_2_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p894_3",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p894_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p894_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8e5_15_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p894_5",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p894_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p894_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_15_proc0 }, { &setup_lseek_mmap_p8e5_15_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p890_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p890_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p88c_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p88c_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p88c_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p88c_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p886_0",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p886_1",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p886_2",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p886_3",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_pd4_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p886_4",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p896_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p886_5",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p896_4_proc0 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p886_6",
    &setup_lseek_mmap_p8f8_8_common,
    { { &setup_lseek_mmap_p896_4_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p886_7",
    &setup_lseek_mmap_p8f8_9_common,
    { { &setup_lseek_mmap_p896_4_proc0 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_1",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_4",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_pa50_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_5",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8d4_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_7",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8d4_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p885_7_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_8",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8d4_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_7_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_9",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8e5_15_proc0 }, { &setup_lseek_mmap_p885_9_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8a5_36_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_40_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_10",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p898_13_proc0 }, { &setup_lseek_mmap_p885_10_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p885_10_0, 0, "lseek" },
      { &test_lseek_mmap_p885_10_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_11",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_12",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8d4_1_proc1 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_13",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8d4_1_proc1 }, { &setup_lseek_mmap_p8c5_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_14",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8d4_1_proc1 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_7_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_15",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_p8d4_1_proc1 }, { &setup_lseek_mmap_p8c5_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_7_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_16",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_17",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_18",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_19",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb14_6_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_20",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p885_20_proc0 }, { &setup_lseek_mmap_p8e5_15_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_90_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_15_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_21",
    &setup_lseek_mmap_pa6_4_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_p885_21_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p885_21_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_22",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_p8c5_2_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p885_21_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_23",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p885_23_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_7_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_24",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_15_proc0 }, { &setup_lseek_mmap_p8e5_15_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_32_0, 0, "lseek" },
      { &test_lseek_mmap_p8e5_17_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_25",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_40_proc0 }, { &setup_lseek_mmap_p8e5_15_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_36_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_40_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_26",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_40_proc0 }, { &setup_lseek_mmap_p8a5_40_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_36_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_40_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_27",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_40_proc0 }, { &setup_lseek_mmap_p8e5_15_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_36_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_42_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_28",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8a5_40_proc0 }, { &setup_lseek_mmap_p8a5_40_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_36_0, 0, "lseek" },
      { &test_lseek_mmap_p8a5_42_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_29",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p885_7_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_3_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_30",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8c5_8_proc1 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8a5_9_0, 0, "lseek" },
      { &test_lseek_mmap_p885_21_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_31",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p885_23_proc1 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_32",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_33",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p885_23_proc1 }, { &setup_lseek_mmap_p8e5_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_49_0, 0, "lseek" },
      { &test_lseek_mmap_p8c5_7_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_34",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_p8c5_2_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p885_34_0, 0, "lseek" },
      { &test_lseek_mmap_p885_34_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_35",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8c5_2_proc0 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p885_34_0, 0, "lseek" },
      { &test_lseek_mmap_p885_35_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_36",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_1_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p885_37",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8c5_8_proc1 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_17_0, 0, "lseek" },
      { &test_lseek_mmap_p885_21_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p880_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p880_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p8e5_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p8b8_14_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_4",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p870_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_5",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p870_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_7",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_6_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_29_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_9",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_21_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_10",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_11",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_12",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p870_12_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_13",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p870_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_14",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pae_23_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_15",
    &setup_lseek_mmap_p8f8_34_common,
    { { &setup_lseek_mmap_p8b8_42_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_7_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_16",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pae_25_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_17",
    &setup_lseek_mmap_pf8_4_common,
    { { &setup_lseek_mmap_p8b8_44_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_4_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_18",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p870_18_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_19",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_pae_44_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_20",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p9f0_34_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p870_21",
    &setup_lseek_mmap_pf4_0_common,
    { { &setup_lseek_mmap_p9f0_35_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p86c_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p86c_1",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p86c_2",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p86c_3",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p868_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p868_1",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pbd0_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p868_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p868_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p860_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p858_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p858_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p858_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p858_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84c_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84c_1",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pae_10_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84c_2",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84c_3",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pad8_5_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pad0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_4",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_5",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbd0_2_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_6",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_11_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_7",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_9",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_10",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pb94_17_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_11",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_12",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pae_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_13",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_14",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_15",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_1_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_16",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p84a_17",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p840_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p830_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p830_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p830_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p830_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p830_4",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_p830_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p830_5",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p830_6",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa6_10_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p830_7",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p830_8",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p82c_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p82c_1",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p82c_2",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p82c_3",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p828_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p828_1",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p828_2",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p820_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p818_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p818_1",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80c_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80c_1",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80c_2",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80c_3",
    &setup_lseek_mmap_pf6_1_common,
    { { &setup_lseek_mmap_pc5_6_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf6_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_1",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_3",
    &setup_lseek_mmap_pbd0_1_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb50_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_4",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_5",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_6",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pa50_2_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_7",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_8",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb50_0_proc1 }, { &setup_lseek_mmap_pb94_14_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_9",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_10",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_11",
    &setup_lseek_mmap_pb94_4_common,
    { { &setup_lseek_mmap_pa50_2_proc1 }, { &setup_lseek_mmap_pb14_3_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbd0_1_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_12",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_14_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p80a_13",
    &setup_lseek_mmap_pb94_2_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p800_0",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb94_13_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_pf8_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_0",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_1",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pb6_1_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb6_7_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p70_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p70_4_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_5",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pb6_4_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_6",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pb6_8_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_7",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p70_7_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_8",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p70_8_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p70_9",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p70_9_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p6c_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_p6c_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p6c_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_p6c_1_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p68_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p68_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p60_0",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p60_1",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p58_0",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p58_1",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p58_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p70_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p58_3",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_p70_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p4c_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_p6c_0_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p4c_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_p6c_1_proc0 }, { &setup_lseek_mmap_pf8_0_proc1 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p4a_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p68_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p4a_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p68_0_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p4a_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p70_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p4a_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_p70_3_proc0 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p40_0",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p40_1",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p30_0",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p30_1",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pb6_1_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p30_2",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pb6_7_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p30_3",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pb6_4_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p30_4",
    &setup_lseek_mmap_pae_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pb6_8_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p2c_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p2c_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pf6_9_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p28_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p20_0",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p18_0",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p18_1",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p0c_0",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc1 }, { &setup_lseek_mmap_pf8_0_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p0c_1",
    &setup_lseek_mmap_pf8_0_common,
    { { &setup_lseek_mmap_pf8_0_proc1 }, { &setup_lseek_mmap_pf8_5_proc0 } },
    &setup_lseek_mmap_pf8_0_procfinal,
    &setup_lseek_mmap_pf8_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p0a_0",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p0a_1",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pb50_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p0a_2",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p0a_3",
    &setup_lseek_mmap_pbe_17_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pb94_13_proc0 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_final,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-lseek_mmap_p00_0",
    &setup_lseek_mmap_p70_0_common,
    { { &setup_lseek_mmap_pbe_0_proc1 }, { &setup_lseek_mmap_pbe_0_proc1 } },
    &setup_lseek_mmap_pbe_0_procfinal,
    &setup_lseek_mmap_pbe_0_procfinal,
    { { &test_lseek_mmap_p70_0_0, 0, "lseek" },
      { &test_lseek_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
//+++ common
  {}
};
