//+++ common
#define _GNU_SOURCE 1
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <setjmp.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <stdint.h>
#include <stdbool.h>
#include "fstest.h"

__attribute__((__unused__)) static void
init_map_anon(uintptr_t va, bool writable, char value)
{
  char *r = mmap((void*)va, 4096, PROT_READ | PROT_WRITE,
                 MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
  if (r == MAP_FAILED) setup_error("mmap");
  *r = value;
  if (!writable) {
    int r2 = mprotect(r, 4096, PROT_READ);
    if (r2 < 0) setup_error("mprotect");
  }
  // Ensure test cores don't shoot down the setup core
  xinvalidate(r, 4096);
}

__attribute__((__unused__)) static void
init_map_file(uintptr_t va, bool writable, const char *fname, off_t offset)
{
  int fd = open(fname, O_RDWR);
  if (fd < 0) setup_error("open");
  void *r = mmap((void*)va, 4096, PROT_READ | (writable ? PROT_WRITE : 0),
                 MAP_SHARED | MAP_FIXED, fd, offset);
  if (r == MAP_FAILED) setup_error("mmap");
  close(fd);
}

__attribute__((__weak__)) const char dataval0[4096] = {0};
__attribute__((__weak__)) const char dataval1[4096] = {1};
__attribute__((__weak__)) const char dataval2[4096] = {2};
__attribute__((__weak__)) const char dataval3[4096] = {3};
__attribute__((__weak__)) const char dataval4[4096] = {4};
__attribute__((__weak__)) const char dataval5[4096] = {5};
__attribute__((__weak__)) const char dataval6[4096] = {6};
__attribute__((__weak__)) const char dataval7[4096] = {7};
__attribute__((__weak__)) const char dataval8[4096] = {8};
__attribute__((__weak__)) const char dataval9[4096] = {9};
__attribute__((__weak__)) const char dataval10[4096] = {10};
__attribute__((__weak__)) const char dataval11[4096] = {11};
__attribute__((__weak__)) const char dataval12[4096] = {12};
__attribute__((__weak__)) const char dataval13[4096] = {13};
__attribute__((__weak__)) const char dataval14[4096] = {14};
__attribute__((__weak__)) const char dataval15[4096] = {15};
__attribute__((__weak__)) char datavalbuf[4096];

//+++ tests

/*
 * calls: fstat mmap
 */
static int test_fstat_mmap_pf8_0_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, 0);
  expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
static int test_fstat_mmap_pf8_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
static void setup_fstat_mmap_pf8_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_mmap_pf8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_mmap_pf8_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_mmap_pf8_0_final(void) {
  unlink("__i0");
  close(20);
  close(21);
}
static void setup_fstat_mmap_pf8_0_procfinal(void) {
  close(20);
  close(21);
}

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pf8_1_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
// static void setup_fstat_mmap_pf8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pf8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pf8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_fstat_mmap_pf8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
static void setup_fstat_mmap_pf8_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_mmap_pf8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
static void setup_fstat_mmap_pf8_4_final(void) {
  unlink("__i1");
  unlink("__i0");
  close(20);
  close(21);
}
// static void setup_fstat_mmap_pf8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_6_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_9_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pf8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_12_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_fstat_mmap_pf8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_14_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pf8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_fstat_mmap_pf8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_15_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pf8_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_fstat_mmap_pf8_14_proc0
// static void setup_fstat_mmap_pf8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_16_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pf8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_17_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_18_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_18_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_19_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_20_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf8_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_21_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_22_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_22_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_23_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_23_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_24_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_24_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_24_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_25_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_25_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_26_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_26_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_26_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_27_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_27_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_fstat_mmap_pf8_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_28_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_28_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pf8_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_28_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_29_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_29_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pf8_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_29_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_30_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_30_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_30_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_30_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_31_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_31_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_31_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_32_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_32_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_32_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_32_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_33_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_33_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_33_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_34_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_34_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_35_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_35_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_35_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_35_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_36_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_36_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pf8_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_36_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_36_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_37_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_37_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pf8_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_pf8_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_37_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pf8_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_38_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_38_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pf8_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_38_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_38_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf8_39_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf8_39_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pf8_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf8_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pf8_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf8_39_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf8_39_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pf6_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static void setup_fstat_mmap_pf6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pf6_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
static void setup_fstat_mmap_pf6_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_mmap_pf6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_0_proc0
// static void setup_fstat_mmap_pf6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
static void setup_fstat_mmap_pf6_1_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
}
// static void setup_fstat_mmap_pf6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
static void setup_fstat_mmap_pf6_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_mmap_pf6_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_mmap_pf6_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_mmap_pf6_2_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
  close(22);
  close(23);
}
static void setup_fstat_mmap_pf6_2_procfinal(void) {
  close(20);
  close(21);
  close(22);
  close(23);
}

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
static void setup_fstat_mmap_pf6_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pf6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pf6_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
static void setup_fstat_mmap_pf6_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pf6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pf6_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
static void setup_fstat_mmap_pf6_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pf6_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pf6_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pf6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_7_proc0
// static void setup_fstat_mmap_pf6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf6_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pf6_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
static void setup_fstat_mmap_pf6_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf6_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pf6_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
static void setup_fstat_mmap_pf6_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf6_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf6_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pf6_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
static void setup_fstat_mmap_pf6_9_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_mmap_pf6_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc0
// static void setup_fstat_mmap_pf6_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
static void setup_fstat_mmap_pf6_9_final(void) {
  unlink("__i0");
  close(20);
  close(21);
  close(22);
  close(23);
}
// static void setup_fstat_mmap_pf6_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pf6_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_3_proc0
// static void setup_fstat_mmap_pf6_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pf6_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pf6_10_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pf6_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_4_proc0
// static void setup_fstat_mmap_pf6_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pf6_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pf6_11_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pf6_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_5_proc0
// static void setup_fstat_mmap_pf6_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pf6_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pf6_12_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pf6_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_7_proc0
// static void setup_fstat_mmap_pf6_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf6_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf6_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_14_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pf6_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_7_proc0
// static void setup_fstat_mmap_pf6_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf6_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf6_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_15_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pf6_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pf6_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_8_proc0
// static void setup_fstat_mmap_pf6_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf6_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf6_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_16_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pf6_16_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static void setup_fstat_mmap_pf6_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pf6_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pf6_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf6_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf6_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf6_17_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf6_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pf6_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pf6_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pf6_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf6_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf6_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf4_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pf4_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
static void setup_fstat_mmap_pf4_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_fstat_mmap_pf4_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf4_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf4_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf4_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf4_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf4_0_1
static void setup_fstat_mmap_pf4_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_fstat_mmap_pf4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_0_proc0
// static void setup_fstat_mmap_pf4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf4_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pf4_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf4_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf4_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf4_0_1
// static void setup_fstat_mmap_pf4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
static void setup_fstat_mmap_pf4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pf4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf4_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pf4_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf4_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf4_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf4_0_1
// static void setup_fstat_mmap_pf4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pf4_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_2_proc0
// static void setup_fstat_mmap_pf4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf4_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf4_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf0_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pf0_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static void setup_fstat_mmap_pf0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pf0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pf0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pf0_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pf0_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf0_0_1
// static void setup_fstat_mmap_pf0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pf0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pf0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pf0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pf0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pec_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pec_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pec_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pec_1_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pec_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pec_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pec_2_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pec_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pec_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pec_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_1_1
// static void setup_fstat_mmap_pec_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pec_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pec_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_2_1
// static void setup_fstat_mmap_pec_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pec_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pec_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_1_1
// static void setup_fstat_mmap_pec_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_7_proc0
// static void setup_fstat_mmap_pec_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pec_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_1_1
// static void setup_fstat_mmap_pec_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_20_proc0
// static void setup_fstat_mmap_pec_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pec_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_2_1
// static void setup_fstat_mmap_pec_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_0_proc0
// static void setup_fstat_mmap_pec_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pec_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_2_1
// static void setup_fstat_mmap_pec_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pec_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pec_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pec_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_2_1
// static void setup_fstat_mmap_pec_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_7_proc0
// static void setup_fstat_mmap_pec_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pec_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pec_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_2_1
// static void setup_fstat_mmap_pec_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pec_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_20_proc0
// static void setup_fstat_mmap_pec_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pec_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pec_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pe6_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static void setup_fstat_mmap_pe6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pe6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_0_proc0
// static void setup_fstat_mmap_pe6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pe6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc0
// static void setup_fstat_mmap_pe6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pe6_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pe6_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pe6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc0
// static void setup_fstat_mmap_pe6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pe6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pe6_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pe6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_3_proc0
// static void setup_fstat_mmap_pe6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pe6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pe6_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pe6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_4_proc0
// static void setup_fstat_mmap_pe6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pe6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pe6_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pe6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_5_proc0
// static void setup_fstat_mmap_pe6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pe6_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pe6_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pe6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_3_proc0
// static void setup_fstat_mmap_pe6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pe6_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pe6_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pe6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_5_proc0
// static void setup_fstat_mmap_pe6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pe6_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pe6_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pe6_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_4_proc0
// static void setup_fstat_mmap_pe6_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_2_proc1
// static void setup_fstat_mmap_pe6_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pe6_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pe6_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_0_proc0
// static void setup_fstat_mmap_pe6_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe6_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pe6_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_7_proc0
// static void setup_fstat_mmap_pe6_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe6_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pe6_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_8_proc0
// static void setup_fstat_mmap_pe6_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe6_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pe6_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_8_proc0
// static void setup_fstat_mmap_pe6_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe6_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pe6_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_7_proc0
// static void setup_fstat_mmap_pe6_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_13_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe6_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_14_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pe6_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_7_proc0
// static void setup_fstat_mmap_pe6_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe6_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_15_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pe6_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pe6_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf6_7_proc0
// static void setup_fstat_mmap_pe6_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe6_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_16_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pe6_16_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static void setup_fstat_mmap_pe6_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pe6_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pe6_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe6_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe6_17_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe6_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pe6_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pe6_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pe6_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe6_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe6_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pe5_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pe5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pe5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_0_proc0
// static void setup_fstat_mmap_pe5_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe5_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pe5_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pe5_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_0_proc0
// static void setup_fstat_mmap_pe5_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe5_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pe5_2_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pe5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pe5_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_0_proc0
// static void setup_fstat_mmap_pe5_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe5_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_pe5_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pe5_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_0_proc0
// static void setup_fstat_mmap_pe5_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe5_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pe5_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pe5_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pec_8_proc0
// static void setup_fstat_mmap_pe5_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe5_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pe5_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pe5_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pec_8_proc0
// static void setup_fstat_mmap_pe5_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe5_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_pe5_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pe5_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pec_8_proc0
// static void setup_fstat_mmap_pe5_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe5_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_pe5_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pe5_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pec_8_proc0
// static void setup_fstat_mmap_pe5_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe5_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pe5_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pe5_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_2_proc0
// static void setup_fstat_mmap_pe5_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe5_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pe5_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pe5_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_2_proc0
// static void setup_fstat_mmap_pe5_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe5_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pe5_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pe5_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_20_proc0
// static void setup_fstat_mmap_pe5_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_10_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe5_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_pe5_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pe5_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_2_proc0
// static void setup_fstat_mmap_pe5_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe5_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_pe5_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pe5_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_20_proc0
// static void setup_fstat_mmap_pe5_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pe5_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_pe5_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pe5_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf4_2_proc0
// static void setup_fstat_mmap_pe5_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe5_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_14_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pe5_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pe5_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_20_proc0
// static void setup_fstat_mmap_pe5_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe5_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe5_15_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe5_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_pe5_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pe5_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_20_proc0
// static void setup_fstat_mmap_pe5_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe5_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe5_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe0_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pe0_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static void setup_fstat_mmap_pe0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pe0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pe0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pe0_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pe0_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe0_0_1
// static void setup_fstat_mmap_pe0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pe0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pe0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pe0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pe0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pd8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
static void setup_fstat_mmap_pd8_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_fstat_mmap_pd8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
static void setup_fstat_mmap_pd8_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pd8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
// static void setup_fstat_mmap_pd8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
static void setup_fstat_mmap_pd8_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pd8_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pd8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pd8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
// static void setup_fstat_mmap_pd8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x0);
// }
// ^ See setup_fstat_mmap_pd8_3_proc1
// static void setup_fstat_mmap_pd8_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pd8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
static void setup_fstat_mmap_pd8_6_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pd8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
static void setup_fstat_mmap_pd8_7_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pd8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
// static void setup_fstat_mmap_pd8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
static void setup_fstat_mmap_pd8_8_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_pd8_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pd8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_fstat_mmap_pd8_6_proc1
// static void setup_fstat_mmap_pd8_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_fstat_mmap_pd8_7_proc1
// static void setup_fstat_mmap_pd8_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
// static void setup_fstat_mmap_pd8_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x0);
// }
// ^ See setup_fstat_mmap_pd8_8_proc1
// static void setup_fstat_mmap_pd8_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pd8_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_fstat_mmap_pd8_1_proc1
// static void setup_fstat_mmap_pd8_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd8_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd8_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pd8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd8_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_fstat_mmap_pd8_2_proc1
// static void setup_fstat_mmap_pd8_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd8_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pd6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pd6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
static void setup_fstat_mmap_pd6_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_fstat_mmap_pd6_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(22, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pd6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pd6_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
static void setup_fstat_mmap_pd6_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pd6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc1
// static void setup_fstat_mmap_pd6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pd6_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pd6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pd6_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pd6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc0
static void setup_fstat_mmap_pd6_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(23, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pd6_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pd6_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pd6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd6_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pd6_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pd6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_3_proc0
// static void setup_fstat_mmap_pd6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_5_proc1
// static void setup_fstat_mmap_pd6_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pd6_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pd6_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc0
// static void setup_fstat_mmap_pd6_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc1
// static void setup_fstat_mmap_pd6_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pd6_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd6_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd6_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd6_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd6_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pd6_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc0
// static void setup_fstat_mmap_pd6_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_5_proc1
// static void setup_fstat_mmap_pd6_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pd6_10_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd6_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd6_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd6_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd6_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pd6_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_3_proc0
// static void setup_fstat_mmap_pd6_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc1
// static void setup_fstat_mmap_pd6_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pd6_12_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd6_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd6_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd6_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd6_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_14_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pd6_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_3_proc0
// static void setup_fstat_mmap_pd6_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_5_proc1
// static void setup_fstat_mmap_pd6_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pd6_14_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd6_15_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd6_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_pd6_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pd6_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd6_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd6_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pd6_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd4_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pd4_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
// static void setup_fstat_mmap_pd4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pd4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
static void setup_fstat_mmap_pd4_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pd4_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd4_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd4_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd4_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd4_0_1
// static void setup_fstat_mmap_pd4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pd4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd4_0_proc1
// static void setup_fstat_mmap_pd4_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pd4_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd4_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd4_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd4_0_1
// static void setup_fstat_mmap_pd4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pd4_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd4_0_proc1
// static void setup_fstat_mmap_pd4_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd4_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd4_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd4_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd4_0_1
// static void setup_fstat_mmap_pd4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pd4_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd4_0_proc1
// static void setup_fstat_mmap_pd4_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pd4_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd0_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pd0_0_1(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static void setup_fstat_mmap_pd0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pd0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pd0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pd0_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pd0_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd0_0_1
// static void setup_fstat_mmap_pd0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pd0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pd0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pd0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pd0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pcc_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pcc_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_0_1
// static void setup_fstat_mmap_pcc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pcc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pcc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pcc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pcc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pcc_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pcc_1_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pcc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pcc_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pcc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pcc_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pcc_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pcc_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pcc_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_0_1
// static void setup_fstat_mmap_pcc_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pcc_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pcc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pcc_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pcc_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pcc_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pcc_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pcc_1_1
// static void setup_fstat_mmap_pcc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pcc_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pcc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pcc_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pcc_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pc6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pc6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pc6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc0
// static void setup_fstat_mmap_pc6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc1
// static void setup_fstat_mmap_pc6_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pc6_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pc6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_3_proc0
// static void setup_fstat_mmap_pc6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc1
// static void setup_fstat_mmap_pc6_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pc6_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pc6_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_3_proc0
// static void setup_fstat_mmap_pc6_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc1
// static void setup_fstat_mmap_pc6_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pc6_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pc6_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc0
// static void setup_fstat_mmap_pc6_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_5_proc1
// static void setup_fstat_mmap_pc6_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pc6_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_2_common
// static void setup_fstat_mmap_pc6_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_3_proc0
// static void setup_fstat_mmap_pc6_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_5_proc1
// static void setup_fstat_mmap_pc6_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_final
// static void setup_fstat_mmap_pc6_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pc6_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc0
// static void setup_fstat_mmap_pc6_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc1
// static void setup_fstat_mmap_pc6_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pc6_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pc6_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_2_proc0
// static void setup_fstat_mmap_pc6_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_5_proc1
// static void setup_fstat_mmap_pc6_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pc6_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_9_common
// static void setup_fstat_mmap_pc6_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_3_proc0
// static void setup_fstat_mmap_pc6_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd6_5_proc1
// static void setup_fstat_mmap_pc6_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_9_final
// static void setup_fstat_mmap_pc6_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_fstat_mmap_pf6_2_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pc6_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc6_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc6_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc6_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pc6_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc6_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc6_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc6_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pc6_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc6_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc6_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc6_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pc6_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc6_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc6_13_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc6_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_14_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pc6_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc6_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc6_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc6_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc6_15_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc6_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_pc6_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pc6_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc6_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc6_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc6_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pc5_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pc5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pc5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc5_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd4_0_proc1
// static void setup_fstat_mmap_pc5_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc5_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_pc5_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pc5_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc5_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd4_0_proc1
// static void setup_fstat_mmap_pc5_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc5_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pc5_2_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pc5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pc5_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc5_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd4_0_proc1
// static void setup_fstat_mmap_pc5_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc5_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_pc5_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pc5_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc5_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd4_0_proc1
// static void setup_fstat_mmap_pc5_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc5_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_pc5_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pc5_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc5_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd4_0_proc1
// static void setup_fstat_mmap_pc5_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc5_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_pc5_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pc5_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
static void setup_fstat_mmap_pc5_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pc5_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc5_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pc5_6_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pc5_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pc5_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc5_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_pc5_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc5_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_pc5_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pc5_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc5_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_pc5_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc5_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_pc5_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pc5_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc5_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_pc5_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc5_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_pc5_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pc5_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc5_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_pc5_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc5_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_pc5_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pc5_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc5_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_pc5_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc5_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_pc5_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pc5_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc5_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_pc5_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc5_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_pc5_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_1_common
// static void setup_fstat_mmap_pc5_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc5_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_pc5_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pc5_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_pc5_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pc5_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
static void setup_fstat_mmap_pc5_13_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pc5_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc5_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_14_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_pc5_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pc5_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc5_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pd4_0_proc1
// static void setup_fstat_mmap_pc5_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc5_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc5_15_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc5_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_pc5_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
// static void setup_fstat_mmap_pc5_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc5_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_pc5_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc5_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc0_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
static int test_fstat_mmap_pc0_0_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static void setup_fstat_mmap_pc0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pc0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_pc0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pc0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pc0_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("!!S_ISFIFO(st.st_mode)", !!S_ISFIFO(st.st_mode), 1);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pf8_0_0
// static int test_fstat_mmap_pc0_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc0_0_1
// static void setup_fstat_mmap_pc0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pc0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_pc0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pc0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pc0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
static int test_fstat_mmap_pb8_0_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, 0);
  expect_result("st.st_size", st.st_size, 0);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
// static int test_fstat_mmap_pb8_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
static void setup_fstat_mmap_pb8_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_fstat_mmap_pb8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_fstat_mmap_pb8_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
}
static void setup_fstat_mmap_pb8_0_final(void) {
  unlink("__i0");
}
static void setup_fstat_mmap_pb8_0_procfinal(void) {
  
}

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_pb8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pb8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_pb8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
static void setup_fstat_mmap_pb8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_fstat_mmap_pb8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_pb8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_fstat_mmap_pb8_2_proc0
// static void setup_fstat_mmap_pb8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
static void setup_fstat_mmap_pb8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pb8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_4_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
static int test_fstat_mmap_pb8_5_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, 0);
  expect_result("st.st_size", st.st_size, 8192);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
// static int test_fstat_mmap_pb8_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
static void setup_fstat_mmap_pb8_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_fstat_mmap_pb8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_fstat_mmap_pb8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_5_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pb8_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pb8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_6_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
static void setup_fstat_mmap_pb8_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_fstat_mmap_pb8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pb8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
static void setup_fstat_mmap_pb8_7_final(void) {
  unlink("__i1");
  unlink("__i0");
}
// static void setup_fstat_mmap_pb8_7_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pb8_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pb8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_8_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pb8_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_fstat_mmap_pb8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_9_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_10_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_7_common
static void setup_fstat_mmap_pb8_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x1000);
}
// static void setup_fstat_mmap_pb8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_10_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_7_final
// static void setup_fstat_mmap_pb8_10_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_11_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pb8_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pb8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_11_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_12_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
static void setup_fstat_mmap_pb8_12_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_fstat_mmap_pb8_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pb8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_12_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_7_final
// static void setup_fstat_mmap_pb8_12_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_13_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pb8_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pb8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb8_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pb8_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_14_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_14_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pb8_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_fstat_mmap_pb8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb8_14_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pb8_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_15_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_15_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
static void setup_fstat_mmap_pb8_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_fstat_mmap_pb8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb8_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pb8_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_16_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_16_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pb8_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_pb8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_16_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_17_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_17_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
static void setup_fstat_mmap_pb8_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pb8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_17_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_18_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_18_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
static void setup_fstat_mmap_pb8_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pb8_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_18_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_19_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_19_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_12_common
static void setup_fstat_mmap_pb8_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_pb8_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_19_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_7_final
// static void setup_fstat_mmap_pb8_19_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_20_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_20_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pb8_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_pb8_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb8_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pb8_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_21_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_21_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_4_common
static void setup_fstat_mmap_pb8_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_pb8_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb8_21_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_4_final
// static void setup_fstat_mmap_pb8_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_22_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_22_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pb8_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_fstat_mmap_pb8_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb8_22_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb8_22_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_23_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb8_23_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf4_0_common
static void setup_fstat_mmap_pb8_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_fstat_mmap_pb8_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb8_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pb8_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb8_24_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb8_24_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_pb8_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pb8_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_pb8_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb8_24_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pb8_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb6_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb6_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pb6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pb6_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pb6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pb6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb6_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb6_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pb6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
static void setup_fstat_mmap_pb6_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pb6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pb6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb6_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb6_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pb6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_pb6_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pb6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb6_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pb6_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb6_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb6_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_pb6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
static void setup_fstat_mmap_pb6_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_pb6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pb6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pb6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb4_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb4_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf4_0_1
// static void setup_fstat_mmap_pb4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pb4_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pb4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb4_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb4_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb4_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb4_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf4_0_1
// static void setup_fstat_mmap_pb4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pb4_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pb4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb4_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb4_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb4_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pb4_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf4_0_1
static void setup_fstat_mmap_pb4_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_fstat_mmap_pb4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pb4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
static void setup_fstat_mmap_pb4_2_final(void) {
  unlink("__i0");
  unlink("__i1");
}
// static void setup_fstat_mmap_pb4_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb4_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb4_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd4_0_1
// static void setup_fstat_mmap_pb4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_pb4_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pb4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb4_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb4_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pb0_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pb0_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf0_0_1
// static void setup_fstat_mmap_pb0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_pb0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pb0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pb0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pb0_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pac_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pac_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_0_1
// static void setup_fstat_mmap_pac_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_pac_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pac_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pac_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pac_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pac_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pac_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_1_1
// static void setup_fstat_mmap_pac_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_pac_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pac_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pac_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pac_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pac_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pac_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pcc_1_1
// static void setup_fstat_mmap_pac_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_pac_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pac_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pac_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pac_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pac_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pac_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_2_1
// static void setup_fstat_mmap_pac_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_pac_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pac_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pac_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pac_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa6_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pa6_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pa6_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pa6_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pb6_0_proc0
// static void setup_fstat_mmap_pa6_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pa6_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pa6_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa6_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pa6_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pa6_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pa6_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pb6_1_proc0
// static void setup_fstat_mmap_pa6_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pa6_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pa6_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa6_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pa6_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pa6_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_pa6_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pb6_2_proc0
// static void setup_fstat_mmap_pa6_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pa6_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_pa6_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa6_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pa6_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_pa6_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_pa6_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pb6_3_proc0
// static void setup_fstat_mmap_pa6_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_pa6_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_pa6_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pa5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_pa5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_0_proc0
// static void setup_fstat_mmap_pa5_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
static int test_fstat_mmap_pa5_1_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, 0);
  expect_result("st.st_size", st.st_size, 20480);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
static int test_fstat_mmap_pa5_1_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x2000UL);
  
  return xerrno(r);
}
static void setup_fstat_mmap_pa5_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_fstat_mmap_pa5_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pa5_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pa5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_2_common
static void setup_fstat_mmap_pa5_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pa5_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_fstat_mmap_pb4_2_final
// static void setup_fstat_mmap_pa5_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pa5_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_2_common
static void setup_fstat_mmap_pa5_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pa5_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_fstat_mmap_pb4_2_final
// static void setup_fstat_mmap_pa5_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
static int test_fstat_mmap_pa5_4_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pa5_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pa5_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pa5_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_4_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pa5_4_1
// static void setup_fstat_mmap_pa5_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_2_common
// static void setup_fstat_mmap_pa5_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_2_proc0
// static void setup_fstat_mmap_pa5_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_fstat_mmap_pb4_2_final
// static void setup_fstat_mmap_pa5_5_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
static int test_fstat_mmap_pa5_6_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x1000UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_pa5_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_pa5_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_1_proc0
// static void setup_fstat_mmap_pa5_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_6_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pa5_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pa5_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pa5_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_7_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_pa5_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_2_common
static void setup_fstat_mmap_pa5_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pa5_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_fstat_mmap_pb4_2_final
// static void setup_fstat_mmap_pa5_8_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_pa5_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pa5_4_1
// static void setup_fstat_mmap_pa5_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
static void setup_fstat_mmap_pa5_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pa5_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_9_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pa5_4_1
// static void setup_fstat_mmap_pa5_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_pa5_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_proc0
// static void setup_fstat_mmap_pa5_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_10_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_11_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_pa5_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_pa5_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_pa5_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_11_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_6_1
// static void setup_fstat_mmap_pa5_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_pa5_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pa5_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_12_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pa5_4_1
// static void setup_fstat_mmap_pa5_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_pa5_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_1_proc0
// static void setup_fstat_mmap_pa5_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_13_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_14_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_14_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_pa5_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_pa5_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_4_proc0
// static void setup_fstat_mmap_pa5_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_14_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_15_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_15_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_pa5_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_pa5_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_4_proc0
// static void setup_fstat_mmap_pa5_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_15_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_16_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_16_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_pa5_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_pa5_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pa5_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_16_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa5_17_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_pa5_17_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_pa5_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_pa5_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pa5_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa5_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa5_17_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_pa0_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_pa0_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe0_0_1
// static void setup_fstat_mmap_pa0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_pa0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_pa0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_pa0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_pa0_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p98_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p98_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p98_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p98_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p98_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p98_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p98_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p98_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p98_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p98_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p98_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
static void setup_fstat_mmap_p98_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_fstat_mmap_p98_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p98_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p98_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p98_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p98_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p98_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
static void setup_fstat_mmap_p98_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_p98_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p98_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p98_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p98_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p98_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p98_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
static void setup_fstat_mmap_p98_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_fstat_mmap_p98_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p98_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p98_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p98_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p98_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_7_common
// static void setup_fstat_mmap_p98_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
static void setup_fstat_mmap_p98_4_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x1000);
}
// static void setup_fstat_mmap_p98_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_7_final
// static void setup_fstat_mmap_p98_4_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p98_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p98_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p98_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p98_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
static void setup_fstat_mmap_p98_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_p98_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p98_5_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p98_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p98_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p98_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_7_common
// static void setup_fstat_mmap_p98_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_11_proc0
static void setup_fstat_mmap_p98_6_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_fstat_mmap_p98_6_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_7_final
// static void setup_fstat_mmap_p98_6_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p98_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p98_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p98_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p98_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
static void setup_fstat_mmap_p98_7_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_p98_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p98_7_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p98_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p98_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p98_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p98_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_11_proc0
// static void setup_fstat_mmap_p98_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_fstat_mmap_p98_7_proc1
// static void setup_fstat_mmap_p98_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p98_8_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p96_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p96_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_p96_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p96_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_p96_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_p96_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p96_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p96_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p96_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_p96_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
static void setup_fstat_mmap_p96_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_p96_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_p96_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_p96_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p96_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p96_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_p96_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p96_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_p96_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_p96_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p96_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p96_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p96_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_p96_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_p96_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_p96_1_proc0
// static void setup_fstat_mmap_p96_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_p96_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_p96_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p94_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p94_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd4_0_1
// static void setup_fstat_mmap_p94_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_p94_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_fstat_mmap_p94_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_p94_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p94_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p94_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p94_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd4_0_1
// static void setup_fstat_mmap_p94_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
// static void setup_fstat_mmap_p94_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p94_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_11_proc0
// static void setup_fstat_mmap_p94_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p94_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p94_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p94_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd4_0_1
// static void setup_fstat_mmap_p94_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_2_common
static void setup_fstat_mmap_p94_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_p94_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_0_proc1
// static void setup_fstat_mmap_p94_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_fstat_mmap_pb4_2_final
// static void setup_fstat_mmap_p94_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p90_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p90_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd0_0_1
// static void setup_fstat_mmap_p90_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p90_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p90_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p90_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p90_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p8c_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p8c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_0_1
// static void setup_fstat_mmap_p8c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p8c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p8c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p8c_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p8c_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p8c_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p8c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pcc_1_1
// static void setup_fstat_mmap_p8c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p8c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p8c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p8c_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p8c_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p86_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p86_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_p86_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p86_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_p86_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_p86_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p86_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p86_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p86_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_p86_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_p86_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_p96_1_proc0
// static void setup_fstat_mmap_p86_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_p86_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_p86_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p86_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p86_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_p86_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p86_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pc5_5_proc1
// static void setup_fstat_mmap_p86_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_p86_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p86_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p86_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p86_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_p86_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf6_1_common
// static void setup_fstat_mmap_p86_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_p96_1_proc0
// static void setup_fstat_mmap_p86_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_p86_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf6_1_final
// static void setup_fstat_mmap_p86_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p85_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_p85_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p85_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_0_proc1
// static void setup_fstat_mmap_p85_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_0_proc1
// static void setup_fstat_mmap_p85_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p85_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_p85_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_2_common
// static void setup_fstat_mmap_p85_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_2_proc0
// static void setup_fstat_mmap_p85_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_0_proc1
// static void setup_fstat_mmap_p85_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_fstat_mmap_pb4_2_final
// static void setup_fstat_mmap_p85_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p85_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_p85_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_2_common
// static void setup_fstat_mmap_p85_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_2_proc0
// static void setup_fstat_mmap_p85_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_0_proc1
// static void setup_fstat_mmap_p85_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_fstat_mmap_pb4_2_final
// static void setup_fstat_mmap_p85_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 8192);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_5_0
// static int test_fstat_mmap_p85_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_p85_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb4_2_common
static void setup_fstat_mmap_p85_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_p85_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_fstat_mmap_pb4_2_final
// static void setup_fstat_mmap_p85_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p85_4_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_p85_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
// static void setup_fstat_mmap_p85_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_11_proc0
// static void setup_fstat_mmap_p85_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_4_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p85_5_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_p85_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
// static void setup_fstat_mmap_p85_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_0_proc1
// static void setup_fstat_mmap_p85_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_11_proc0
// static void setup_fstat_mmap_p85_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_5_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p85_6_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_p85_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
static void setup_fstat_mmap_p85_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_p85_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_6_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p85_7_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
static void setup_fstat_mmap_p85_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_fstat_mmap_p85_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_p85_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_fstat_mmap_pb4_2_final
// static void setup_fstat_mmap_p85_7_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p85_8_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_p85_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
// static void setup_fstat_mmap_p85_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p85_6_proc0
// static void setup_fstat_mmap_p85_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_8_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p85_9_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_p85_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
// static void setup_fstat_mmap_p85_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_11_proc0
// static void setup_fstat_mmap_p85_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_11_proc0
// static void setup_fstat_mmap_p85_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_9_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_10_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p85_10_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_p85_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
// static void setup_fstat_mmap_p85_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_10_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_11_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
static int test_fstat_mmap_p85_11_1(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
  
  return xerrno(r);
}
// static void setup_fstat_mmap_p85_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
// static void setup_fstat_mmap_p85_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_11_proc0
// static void setup_fstat_mmap_p85_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_11_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_12_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p85_12_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_p85_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
// static void setup_fstat_mmap_p85_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_11_proc0
// static void setup_fstat_mmap_p85_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_12_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p85_13_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 20480);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pa5_1_0
// static int test_fstat_mmap_p85_13_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_p85_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pa5_1_common
// static void setup_fstat_mmap_p85_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p85_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p85_13_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p80_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, 0);
//   expect_result("st.st_size", st.st_size, 0);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_pb8_0_0
// static int test_fstat_mmap_p80_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc0_0_1
// static void setup_fstat_mmap_p80_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p80_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p80_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p80_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p80_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
static int test_fstat_mmap_p70_0_0(void) {
  struct stat st;
  int r = fstat(10, &st);
  expect_result("r", r, -1);
  expect_errno(9);
  if (r < 0) return xerrno(r);
  /* Hack, to test for approximate equality */
  return st.st_ino ^ st.st_nlink ^ st.st_size;
}
// static int test_fstat_mmap_p70_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
static void setup_fstat_mmap_p70_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
}
// static void setup_fstat_mmap_p70_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_0_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p70_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p70_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p70_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p70_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p70_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_fstat_mmap_p98_1_proc1
// static void setup_fstat_mmap_p70_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_1_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p70_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p70_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p70_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p70_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p70_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_fstat_mmap_p98_2_proc1
// static void setup_fstat_mmap_p70_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p70_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p70_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p70_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_p70_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
static void setup_fstat_mmap_p70_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_p70_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p70_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p70_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p70_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_p70_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
static void setup_fstat_mmap_p70_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_fstat_mmap_p70_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p70_4_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p70_5_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p70_5_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_p70_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p70_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_fstat_mmap_p98_5_proc1
// static void setup_fstat_mmap_p70_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_5_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p70_5_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p70_6_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p70_6_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_p70_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p70_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_fstat_mmap_p98_7_proc1
// static void setup_fstat_mmap_p70_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p70_6_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p70_7_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p70_7_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_p70_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
static void setup_fstat_mmap_p70_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_fstat_mmap_p70_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p70_7_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p70_8_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p70_8_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_p70_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
static void setup_fstat_mmap_p70_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_fstat_mmap_p70_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p70_8_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p70_9_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p70_9_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_1_1
// static void setup_fstat_mmap_p70_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
static void setup_fstat_mmap_p70_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_fstat_mmap_p70_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p70_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p70_9_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p6c_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p6c_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_p6c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_p6c_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_p6c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_p6c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p6c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p6c_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p6c_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_0_1
// static void setup_fstat_mmap_p6c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
static void setup_fstat_mmap_p6c_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_fstat_mmap_p6c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_p6c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p6c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p68_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p68_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf4_0_1
// static void setup_fstat_mmap_p68_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
static void setup_fstat_mmap_p68_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_fstat_mmap_p68_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p68_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p68_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p60_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p60_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf0_0_1
// static void setup_fstat_mmap_p60_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p60_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p60_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p60_0_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p60_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p60_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p60_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd0_0_1
// static void setup_fstat_mmap_p60_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p60_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p60_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p60_1_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p60_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p58_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p58_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_0_1
// static void setup_fstat_mmap_p58_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p58_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p58_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p58_0_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p58_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p58_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p58_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pcc_1_1
// static void setup_fstat_mmap_p58_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p58_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p58_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p58_1_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p58_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p58_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p58_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_1_1
// static void setup_fstat_mmap_p58_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p58_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p70_3_proc0
// static void setup_fstat_mmap_p58_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p58_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p58_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p58_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p58_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_2_1
// static void setup_fstat_mmap_p58_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p58_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p70_3_proc0
// static void setup_fstat_mmap_p58_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p58_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p58_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p4c_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p4c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_p4c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p4c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_p6c_0_proc0
// static void setup_fstat_mmap_p4c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_p4c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p4c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p4c_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p4c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_0_1
// static void setup_fstat_mmap_p4c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p4c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_p6c_1_proc0
// static void setup_fstat_mmap_p4c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_p4c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p4c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p4a_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p4a_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_p4a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p4a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p68_0_proc0
// static void setup_fstat_mmap_p4a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p4a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p4a_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p4a_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p4a_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_p4a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p4a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p68_0_proc0
// static void setup_fstat_mmap_p4a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p4a_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p4a_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p4a_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p4a_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_0_1
// static void setup_fstat_mmap_p4a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p4a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p70_3_proc0
// static void setup_fstat_mmap_p4a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p4a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p4a_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p4a_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p4a_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 11, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe5_2_1
// static void setup_fstat_mmap_p4a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p4a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p70_3_proc0
// static void setup_fstat_mmap_p4a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p4a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p4a_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p40_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p40_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 11, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe0_0_1
// static void setup_fstat_mmap_p40_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p40_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p40_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p40_0_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p40_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p40_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p40_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc0_0_1
// static void setup_fstat_mmap_p40_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p40_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p40_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p40_1_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p40_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p30_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p30_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p30_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p30_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p30_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p30_0_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p30_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p30_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p30_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p30_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p30_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p30_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_fstat_mmap_p98_1_proc1
// static void setup_fstat_mmap_p30_1_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p30_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p30_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p30_2_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p30_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p30_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p30_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_fstat_mmap_p98_2_proc1
// static void setup_fstat_mmap_p30_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p30_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p30_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p30_3_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p30_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p30_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p30_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_fstat_mmap_p98_5_proc1
// static void setup_fstat_mmap_p30_3_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p30_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p30_4_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p30_4_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf8_0_1
// static void setup_fstat_mmap_p30_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_common
// static void setup_fstat_mmap_p30_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p30_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_fstat_mmap_p98_7_proc1
// static void setup_fstat_mmap_p30_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p30_4_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p2c_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p2c_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_p2c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p2c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_p2c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_p2c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p2c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p2c_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p2c_1_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pf6_16_1
// static void setup_fstat_mmap_p2c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p2c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_p2c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_p2c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p2c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p28_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p28_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd4_0_1
// static void setup_fstat_mmap_p28_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p28_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p28_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_0_proc1
// static void setup_fstat_mmap_p28_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p28_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p20_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p20_0_1(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pd0_0_1
// static void setup_fstat_mmap_p20_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p20_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p20_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p20_0_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p20_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p18_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p18_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pec_0_1
// static void setup_fstat_mmap_p18_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p18_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p18_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p18_0_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p18_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p18_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p18_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pcc_1_1
// static void setup_fstat_mmap_p18_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p18_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p18_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p18_1_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p18_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p0c_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p0c_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_p0c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p0c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_p0c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc0
// static void setup_fstat_mmap_p0c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p0c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p0c_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p0c_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pe6_16_1
// static void setup_fstat_mmap_p0c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_fstat_mmap_pf8_0_common
// static void setup_fstat_mmap_p0c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_0_proc1
// static void setup_fstat_mmap_p0c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_fstat_mmap_pf8_5_proc0
// static void setup_fstat_mmap_p0c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_final
// static void setup_fstat_mmap_p0c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_fstat_mmap_pf8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p0a_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p0a_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_p0a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p0a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p0a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_0_proc1
// static void setup_fstat_mmap_p0a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p0a_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p0a_1_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p0a_1_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_p0a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p0a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p0a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_p94_0_proc1
// static void setup_fstat_mmap_p0a_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p0a_1_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p0a_2_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p0a_2_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_0_1
// static void setup_fstat_mmap_p0a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p0a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p0a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p0a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p0a_2_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p0a_3_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p0a_3_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc5_2_1
// static void setup_fstat_mmap_p0a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_5_common
// static void setup_fstat_mmap_p0a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p0a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_fstat_mmap_pb8_0_proc0
// static void setup_fstat_mmap_p0a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_fstat_mmap_pb8_0_final
// static void setup_fstat_mmap_p0a_3_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

/*
 * calls: fstat mmap
 */
// static int test_fstat_mmap_p00_0_0(void) {
//   struct stat st;
//   int r = fstat(10, &st);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   /* Hack, to test for approximate equality */
//   return st.st_ino ^ st.st_nlink ^ st.st_size;
// }
// ^ See test_fstat_mmap_p70_0_0
// static int test_fstat_mmap_p00_0_1(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_fstat_mmap_pc0_0_1
// static void setup_fstat_mmap_p00_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_fstat_mmap_p70_0_common
// static void setup_fstat_mmap_p00_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p00_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_fstat_mmap_pb8_0_proc1
// static void setup_fstat_mmap_p00_0_final(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal
// static void setup_fstat_mmap_p00_0_procfinal(void) {
//   
// }
// ^ See setup_fstat_mmap_pb8_0_procfinal

//+++ common
static void cleanup(void) {
  unlink("__f0");
  unlink("__f1");
  unlink("__f2");
  unlink("__f3");
  unlink("__f4");
  unlink("__f5");
}

struct fstest fstests[] = {
//+++ tests
  { "fs-fstat_mmap_pf8_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_2",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_2_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_3",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_3_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_4",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_4_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_5",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_6",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_6_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_7",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_8",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_9",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_9_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_10",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_10_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_11",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_11_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_12",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_12_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_13",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_13_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_14",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_14_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_15",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_14_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_16",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_16_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_17",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_17_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_18",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_18_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_19",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_19_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_20",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_20_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_21",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_21_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_22",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_22_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_23",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_23_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_24",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_24_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_25",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_25_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_26",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_26_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_27",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_27_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_28",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_28_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_29",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_29_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_30",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_30_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_31",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_31_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_32",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_32_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_33",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_33_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_34",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_34_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_35",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_35_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_36",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_36_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_37",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_37_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_38",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_38_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf8_39",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_39_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf6_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_1",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf6_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_2",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pf6_2_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_3",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pf6_3_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_4",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pf6_4_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_5",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pf6_5_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_6",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_7",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf6_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_8",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf6_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_9",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pf6_2_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_10",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pf6_3_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_11",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pf6_4_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_12",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pf6_5_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_13",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_14",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf6_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_15",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf6_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_16",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf6_17",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf4_0",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf4_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf4_1",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf4_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf4_2",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf4_2_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf4_3",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf4_2_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf0_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pf0_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_2",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_3",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_4",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_5",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_6",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_20_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_7",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf6_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_8",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pec_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_9",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pec_10",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_20_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf6_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_1",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pf6_2_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_2",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pf6_2_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_3",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pf6_3_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_4",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pf6_4_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_5",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pf6_5_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_6",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pf6_3_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_7",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pf6_5_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_8",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pf6_4_proc0 }, { &setup_fstat_mmap_pf6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_9",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf6_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_10",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_11",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf6_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_12",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf6_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_13",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_14",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf6_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_15",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf6_7_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_16",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe6_17",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_0",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf4_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_1",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf4_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_2",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf4_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_3",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf4_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_4",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pec_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_5",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pec_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_6",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pec_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_7",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pec_8_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_8",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf4_2_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_9",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf4_2_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_10",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_20_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_11",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf4_2_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_12",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_20_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_13",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf4_2_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_14",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_20_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe5_15",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_20_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe0_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pe0_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd8_1_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_2",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd8_2_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_3",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd8_3_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_4",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_5",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd8_3_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_6",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd8_6_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_7",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd8_7_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_8",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd8_8_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_9",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd8_6_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_10",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd8_7_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_11",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd8_8_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_12",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd8_1_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd8_13",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd8_2_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_1",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_2",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pd6_2_proc0 }, { &setup_fstat_mmap_pd6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_3",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pd6_3_proc0 }, { &setup_fstat_mmap_pd6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_4",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_5",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pd6_2_proc0 }, { &setup_fstat_mmap_pd6_5_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_6",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_7",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pd6_3_proc0 }, { &setup_fstat_mmap_pd6_5_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_8",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pd6_2_proc0 }, { &setup_fstat_mmap_pd6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_9",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_10",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pd6_2_proc0 }, { &setup_fstat_mmap_pd6_5_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_11",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_12",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pd6_3_proc0 }, { &setup_fstat_mmap_pd6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_13",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_14",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pd6_3_proc0 }, { &setup_fstat_mmap_pd6_5_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd6_15",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd4_0",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd4_1",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd4_2",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd4_3",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd0_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pd0_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pcc_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pcc_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pcc_2",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pcc_3",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_1",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_2",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pd6_2_proc0 }, { &setup_fstat_mmap_pd6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_3",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pd6_3_proc0 }, { &setup_fstat_mmap_pd6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_4",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pd6_3_proc0 }, { &setup_fstat_mmap_pd6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_5",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pd6_2_proc0 }, { &setup_fstat_mmap_pd6_5_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_6",
    &setup_fstat_mmap_pf6_2_common,
    { { &setup_fstat_mmap_pd6_3_proc0 }, { &setup_fstat_mmap_pd6_5_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_2_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_7",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pd6_2_proc0 }, { &setup_fstat_mmap_pd6_2_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_8",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pd6_2_proc0 }, { &setup_fstat_mmap_pd6_5_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_9",
    &setup_fstat_mmap_pf6_9_common,
    { { &setup_fstat_mmap_pd6_3_proc0 }, { &setup_fstat_mmap_pd6_5_proc1 } },
    &setup_fstat_mmap_pf6_2_procfinal,
    &setup_fstat_mmap_pf6_9_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_10",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_11",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_12",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_13",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_14",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc6_15",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_0",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_1",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_2",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_3",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_4",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_5",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pc5_5_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_6",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pc5_5_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_6_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_7",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pc5_5_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_8",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pc5_5_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_9",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pc5_5_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_10",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pc5_5_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_11",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pc5_5_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_12",
    &setup_fstat_mmap_pf4_1_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pc5_5_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_13",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pc5_13_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_14",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pd4_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc5_15",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pc5_5_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc0_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pc0_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_5_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pf8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_0",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_1",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_2",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_2_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_3",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_2_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_4",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_4_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_5",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_5_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_6",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_6_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_7",
    &setup_fstat_mmap_pb8_7_common,
    { { &setup_fstat_mmap_pb8_7_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_7_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_8",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_8_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_9",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_9_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_10",
    &setup_fstat_mmap_pb8_7_common,
    { { &setup_fstat_mmap_pb8_10_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_7_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_11",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_11_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_12",
    &setup_fstat_mmap_pb8_12_common,
    { { &setup_fstat_mmap_pb8_12_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_7_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_13",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pb8_13_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_14",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pb8_14_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_15",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pb8_15_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_16",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_16_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_17",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_17_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_18",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_18_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_19",
    &setup_fstat_mmap_pb8_12_common,
    { { &setup_fstat_mmap_pb8_19_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_7_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_20",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pb8_20_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_21",
    &setup_fstat_mmap_pf8_4_common,
    { { &setup_fstat_mmap_pb8_21_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_4_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_22",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_22_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_23",
    &setup_fstat_mmap_pf4_0_common,
    { { &setup_fstat_mmap_pb8_23_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb8_24",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pb8_24_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb6_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pb6_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb6_1",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pb6_1_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb6_2",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pb6_2_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb6_3",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pb6_3_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb4_0",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb4_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb4_1",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb4_1_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb4_2",
    &setup_fstat_mmap_pb4_2_common,
    { { &setup_fstat_mmap_pb4_2_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb4_3",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pb0_0",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pac_0",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pac_1",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pac_2",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pcc_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pac_3",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa6_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pb6_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa6_1",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pb6_1_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa6_2",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pb6_2_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa6_3",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_pb6_3_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_0",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb4_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_1",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_pa5_1_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pa5_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_2",
    &setup_fstat_mmap_pb4_2_common,
    { { &setup_fstat_mmap_pa5_2_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_3",
    &setup_fstat_mmap_pb4_2_common,
    { { &setup_fstat_mmap_pa5_3_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_4",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pa5_4_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pa5_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_5",
    &setup_fstat_mmap_pb4_2_common,
    { { &setup_fstat_mmap_pa5_2_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pa5_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_6",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb4_1_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pa5_6_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_7",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pa5_7_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_8",
    &setup_fstat_mmap_pb4_2_common,
    { { &setup_fstat_mmap_pa5_8_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_9",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_pa5_9_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pa5_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_10",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pa5_1_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pa5_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_11",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pa5_11_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_12",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_6_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_13",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb4_1_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pa5_4_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_14",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pa5_4_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_15",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pa5_4_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_16",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa5_17",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_pa0_0",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p98_0",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p98_1",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_p98_1_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p98_2",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_p98_2_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p98_3",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_p98_3_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p98_4",
    &setup_fstat_mmap_pb8_7_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_p98_4_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_7_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p98_5",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_p98_5_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p98_6",
    &setup_fstat_mmap_pb8_7_common,
    { { &setup_fstat_mmap_pa5_11_proc0 }, { &setup_fstat_mmap_p98_6_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_7_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p98_7",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_p98_7_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p98_8",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pa5_11_proc0 }, { &setup_fstat_mmap_p98_7_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p96_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pc5_5_proc1 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p96_1",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_p96_1_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p96_2",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pc5_5_proc1 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p96_3",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_p96_1_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p94_0",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_p94_0_proc0 }, { &setup_fstat_mmap_p94_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p94_1",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pa5_11_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p94_2",
    &setup_fstat_mmap_pb4_2_common,
    { { &setup_fstat_mmap_p94_2_proc0 }, { &setup_fstat_mmap_p94_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p90_0",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p8c_0",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p8c_1",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p86_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pc5_5_proc1 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p86_1",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_p96_1_proc0 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p86_2",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pc5_5_proc1 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p86_3",
    &setup_fstat_mmap_pf6_1_common,
    { { &setup_fstat_mmap_p96_1_proc0 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf6_1_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_0",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_p94_0_proc1 }, { &setup_fstat_mmap_p94_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_1",
    &setup_fstat_mmap_pb4_2_common,
    { { &setup_fstat_mmap_p94_2_proc0 }, { &setup_fstat_mmap_p94_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_2",
    &setup_fstat_mmap_pb4_2_common,
    { { &setup_fstat_mmap_p94_2_proc0 }, { &setup_fstat_mmap_p94_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_3",
    &setup_fstat_mmap_pb4_2_common,
    { { &setup_fstat_mmap_p85_3_proc0 }, { &setup_fstat_mmap_pb8_0_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pb8_5_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_4",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pa5_11_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_5",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_p94_0_proc1 }, { &setup_fstat_mmap_pa5_11_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_6",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_p85_6_proc0 }, { &setup_fstat_mmap_pb8_0_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_7",
    &setup_fstat_mmap_p85_7_common,
    { { &setup_fstat_mmap_p85_7_proc0 }, { &setup_fstat_mmap_pb8_0_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb4_2_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_8",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_p85_6_proc0 }, { &setup_fstat_mmap_pb8_0_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_9",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_pa5_11_proc0 }, { &setup_fstat_mmap_pa5_11_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_10",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_11",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pa5_11_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_p85_11_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_12",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pa5_11_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p85_13",
    &setup_fstat_mmap_pa5_1_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pa5_1_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p80_0",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_pb8_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_0",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_1",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_p98_1_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_2",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_p98_2_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_3",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_p70_3_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_4",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_p70_4_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_5",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_p98_5_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_6",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_p98_7_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_7",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_p70_7_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_8",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_p70_8_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p70_9",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_p70_9_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p6c_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_p6c_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p6c_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_p6c_1_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p68_0",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_p68_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf4_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p60_0",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p60_1",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p58_0",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p58_1",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pcc_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p58_2",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_p70_3_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_1_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p58_3",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_p70_3_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p4c_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_p6c_0_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p4c_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_p6c_1_proc0 }, { &setup_fstat_mmap_pf8_0_proc1 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p4a_0",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_p68_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p4a_1",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_p68_0_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p4a_2",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_p70_3_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p4a_3",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_p70_3_proc0 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe5_2_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p40_0",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p40_1",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc0_0_1, 0, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p30_0",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p30_1",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_p98_1_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p30_2",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_p98_2_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p30_3",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_p98_5_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p30_4",
    &setup_fstat_mmap_pb8_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_p98_7_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf8_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p2c_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc1 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p2c_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc1 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pf6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p28_0",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_p94_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd4_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p20_0",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pd0_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p18_0",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pec_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p18_1",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pcc_1_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p0c_0",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc1 }, { &setup_fstat_mmap_pf8_0_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p0c_1",
    &setup_fstat_mmap_pf8_0_common,
    { { &setup_fstat_mmap_pf8_0_proc1 }, { &setup_fstat_mmap_pf8_5_proc0 } },
    &setup_fstat_mmap_pf8_0_procfinal,
    &setup_fstat_mmap_pf8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pe6_16_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p0a_0",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_p94_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p0a_1",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_p94_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p0a_2",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_0_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p0a_3",
    &setup_fstat_mmap_pb8_5_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc0 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_final,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc5_2_1, 1, "mmap" } },
    &cleanup },
  { "fs-fstat_mmap_p00_0",
    &setup_fstat_mmap_p70_0_common,
    { { &setup_fstat_mmap_pb8_0_proc1 }, { &setup_fstat_mmap_pb8_0_proc1 } },
    &setup_fstat_mmap_pb8_0_procfinal,
    &setup_fstat_mmap_pb8_0_procfinal,
    { { &test_fstat_mmap_p70_0_0, 0, "fstat" },
      { &test_fstat_mmap_pc0_0_1, 1, "mmap" } },
    &cleanup },
//+++ common
  {}
};
