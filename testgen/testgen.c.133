//+++ common
#define _GNU_SOURCE 1
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <setjmp.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <stdint.h>
#include <stdbool.h>
#include "fstest.h"

__attribute__((__unused__)) static void
init_map_anon(uintptr_t va, bool writable, char value)
{
  char *r = mmap((void*)va, 4096, PROT_READ | PROT_WRITE,
                 MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
  if (r == MAP_FAILED) setup_error("mmap");
  *r = value;
  if (!writable) {
    int r2 = mprotect(r, 4096, PROT_READ);
    if (r2 < 0) setup_error("mprotect");
  }
  // Ensure test cores don't shoot down the setup core
  xinvalidate(r, 4096);
}

__attribute__((__unused__)) static void
init_map_file(uintptr_t va, bool writable, const char *fname, off_t offset)
{
  int fd = open(fname, O_RDWR);
  if (fd < 0) setup_error("open");
  void *r = mmap((void*)va, 4096, PROT_READ | (writable ? PROT_WRITE : 0),
                 MAP_SHARED | MAP_FIXED, fd, offset);
  if (r == MAP_FAILED) setup_error("mmap");
  close(fd);
}

__attribute__((__weak__)) const char dataval0[4096] = {0};
__attribute__((__weak__)) const char dataval1[4096] = {1};
__attribute__((__weak__)) const char dataval2[4096] = {2};
__attribute__((__weak__)) const char dataval3[4096] = {3};
__attribute__((__weak__)) const char dataval4[4096] = {4};
__attribute__((__weak__)) const char dataval5[4096] = {5};
__attribute__((__weak__)) const char dataval6[4096] = {6};
__attribute__((__weak__)) const char dataval7[4096] = {7};
__attribute__((__weak__)) const char dataval8[4096] = {8};
__attribute__((__weak__)) const char dataval9[4096] = {9};
__attribute__((__weak__)) const char dataval10[4096] = {10};
__attribute__((__weak__)) const char dataval11[4096] = {11};
__attribute__((__weak__)) const char dataval12[4096] = {12};
__attribute__((__weak__)) const char dataval13[4096] = {13};
__attribute__((__weak__)) const char dataval14[4096] = {14};
__attribute__((__weak__)) const char dataval15[4096] = {15};
__attribute__((__weak__)) char datavalbuf[4096];

//+++ tests

/*
 * calls: mmap read
 */
static int test_mmap_read_pfc_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
static int test_mmap_read_pfc_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(10, data, 4096);
  expect_result("r", r, -1);
  expect_errno(9);
  if (r < 0) return xerrno(r);
  return data[0];
}
static void setup_mmap_read_pfc_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfc_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pfc_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pfc_0_final(void) {
  unlink("__i0");
  close(20);
  close(21);
}
static void setup_mmap_read_pfc_0_procfinal(void) {
  close(20);
  close(21);
}

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
static int test_mmap_read_pfc_1_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(11, data, 4096);
  expect_result("r", r, -1);
  expect_errno(9);
  if (r < 0) return xerrno(r);
  return data[0];
}
// static void setup_mmap_read_pfc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfc_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pfc_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
static void setup_mmap_read_pfc_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfc_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_read_pfc_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
static void setup_mmap_read_pfc_6_final(void) {
  unlink("__i1");
  unlink("__i0");
  close(20);
  close(21);
}
// static void setup_mmap_read_pfc_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_6_common
static void setup_mmap_read_pfc_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_read_pfc_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfc_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfc_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_6_common
static void setup_mmap_read_pfc_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_read_pfc_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_9_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfc_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_6_common
static void setup_mmap_read_pfc_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_read_pfc_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_10_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfc_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfc_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfc_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pfc_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pfc_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfc_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfc_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pfc_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pfc_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pfc_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_18_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_6_common
static void setup_mmap_read_pfc_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_read_pfc_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_18_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfc_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_19_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pfc_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_20_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pfc_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_21_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pfc_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_22_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_6_common
static void setup_mmap_read_pfc_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_read_pfc_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_22_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfc_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_23_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_6_common
static void setup_mmap_read_pfc_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_read_pfc_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_23_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfc_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_24_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pfc_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_24_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_25_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfc_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfc_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfc_26_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pfc_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pfc_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfc_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfc_26_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfc_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
static int test_mmap_read_pfb0_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(11, data, 4096);
  expect_result("r", r, -1);
  expect_errno(11);
  if (r < 0) return xerrno(r);
  return data[0];
}
static void setup_mmap_read_pfb0_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfb0_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfb0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
static void setup_mmap_read_pfb0_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfb0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pfb0_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pfb0_1_final(void) {
  unlink("__i0");
  close(20);
  close(21);
  close(22);
  close(23);
}
static void setup_mmap_read_pfb0_1_procfinal(void) {
  close(20);
  close(21);
  close(22);
  close(23);
}

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfb0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfb0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfb0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfb0_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfb0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfb0_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfb0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfb0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfb0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
static void setup_mmap_read_pfb0_9_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfb0_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_9_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfb0_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfb0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfb0_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfb0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfb0_11_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_9_common
static void setup_mmap_read_pfb0_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_12_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfb0_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
static void setup_mmap_read_pfb0_13_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfb0_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
static void setup_mmap_read_pfb0_13_final(void) {
  unlink("__i1");
  unlink("__i0");
  close(20);
  close(21);
  close(22);
  close(23);
}
// static void setup_mmap_read_pfb0_13_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_9_common
static void setup_mmap_read_pfb0_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_14_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfb0_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_9_common
static void setup_mmap_read_pfb0_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_15_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfb0_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_13_common
static void setup_mmap_read_pfb0_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_16_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pfb0_16_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfb0_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_18_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_18_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_19_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_9_common
static void setup_mmap_read_pfb0_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_19_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfb0_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_20_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_9_common
static void setup_mmap_read_pfb0_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_20_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfb0_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_21_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfb0_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_22_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_9_common
static void setup_mmap_read_pfb0_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_22_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfb0_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_23_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_24_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_24_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_25_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_26_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfb0_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_26_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfb0_26_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_27_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfb0_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_28_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfb0_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_28_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_29_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfb0_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfb0_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfb0_29_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_30_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfb0_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_30_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfb0_30_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_31_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_31_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_32_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_13_common
static void setup_mmap_read_pfb0_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_32_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pfb0_32_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_33_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_9_common
static void setup_mmap_read_pfb0_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_33_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfb0_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_34_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_35_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_35_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfb0_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_35_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfb0_35_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_36_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_36_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_13_common
static void setup_mmap_read_pfb0_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pfb0_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_36_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pfb0_36_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_37_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_37_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfb0_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_37_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_38_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_38_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfb0_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfb0_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_38_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfb0_38_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_39_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_39_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfb0_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_39_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_39_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_40_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_40_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfb0_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfb0_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pfb0_40_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfb0_40_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfb0_41_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfb0_41_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pfb0_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfb0_41_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pfb0_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfb0_41_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfb0_41_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
static int test_mmap_read_pfa0_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(11, data, 4096);
  expect_result("r", r, 0);
  if (r < 0) return xerrno(r);
  return data[0];
}
// static void setup_mmap_read_pfa0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pfa0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_pfa0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfa0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pfa0_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfa0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pfa0_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfa0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pfa0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfa0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pfa0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfa0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pfa0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_read_pfa0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_13_common
static void setup_mmap_read_pfa0_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
static void setup_mmap_read_pfa0_5_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfa0_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pfa0_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pfa0_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_read_pfa0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pfa0_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfa0_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_read_pfa0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfa0_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pfa0_8_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfa0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfa0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pfa0_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pfa0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfa0_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfa0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pfa0_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pfa0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfa0_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pfa0_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pfa0_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_7_common
static void setup_mmap_read_pfa0_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_read_pfa0_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_13_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfa0_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pfa0_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfa0_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_7_common
static void setup_mmap_read_pfa0_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_read_pfa0_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_15_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfa0_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pfa0_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_read_pfa0_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfa0_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_7_common
static void setup_mmap_read_pfa0_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_read_pfa0_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfa0_17_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfa0_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_18_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pfa0_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_read_pfa0_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_18_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_18_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_19_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pfa0_19_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pfa0_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_read_pfa0_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_19_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pfa0_19_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_20_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_7_common
static void setup_mmap_read_pfa0_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_read_pfa0_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_20_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfa0_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_21_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_19_common
static void setup_mmap_read_pfa0_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_read_pfa0_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_21_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pfa0_21_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_22_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_19_common
static void setup_mmap_read_pfa0_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_read_pfa0_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_22_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pfa0_22_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_23_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_7_common
static void setup_mmap_read_pfa0_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_read_pfa0_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfa0_23_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pfa0_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_24_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pfa0_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_read_pfa0_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_24_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_24_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_25_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pfa0_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pfa0_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_25_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_26_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfa0_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfa0_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_26_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_26_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_27_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pfa0_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pfa0_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_28_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pfa0_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pfa0_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_28_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_29_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pfa0_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pfb0_27_proc0
// static void setup_mmap_read_pfa0_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfa0_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_29_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_30_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfa0_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pfa0_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_30_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_30_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_31_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pfa0_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfa0_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pfa0_31_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_32_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pfa0_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfa0_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_32_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_32_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_33_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pfa0_33_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pfb0_37_proc0
// static void setup_mmap_read_pfa0_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pfa0_33_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pfa0_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pfa0_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pfa0_34_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pfa0_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pfa0_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pfa0_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pfa0_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pfa0_34_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
static int test_mmap_read_pf8_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(11, data, 4096);
  expect_result("r", r, 4096);
  expect_result("data[0]", data[0], 0);
  if (r < 0) return xerrno(r);
  return data[0];
}
static void setup_mmap_read_pf8_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_pf8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_pf8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf8_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_pf8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_pf8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_2_proc0
// static void setup_mmap_read_pf8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pf8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pfb0_3_proc0
// static void setup_mmap_read_pf8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pf8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_4_proc0
// static void setup_mmap_read_pf8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf8_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_pf8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_13_proc0
// static void setup_mmap_read_pf8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pf8_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf8_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_pf8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_9_proc0
// static void setup_mmap_read_pf8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_6_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_pf8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_pf8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pf8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_pf8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_6_common
// static void setup_mmap_read_pf8_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_14_proc0
// static void setup_mmap_read_pf8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_10_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf8_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_6_common
// static void setup_mmap_read_pf8_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_15_proc0
// static void setup_mmap_read_pf8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf8_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_5_common
// static void setup_mmap_read_pf8_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_16_proc0
// static void setup_mmap_read_pf8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_12_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pf8_12_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_6_common
// static void setup_mmap_read_pf8_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_12_proc0
// static void setup_mmap_read_pf8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_13_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf8_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pfb0_7_proc0
// static void setup_mmap_read_pf8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_8_proc0
// static void setup_mmap_read_pf8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_15_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pfb0_17_proc0
// static void setup_mmap_read_pf8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_18_proc0
// static void setup_mmap_read_pf8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_17_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_18_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_6_common
// static void setup_mmap_read_pf8_18_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_20_proc0
// static void setup_mmap_read_pf8_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_18_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf8_18_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_19_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_23_proc0
// static void setup_mmap_read_pf8_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_20_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_24_proc0
// static void setup_mmap_read_pf8_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_20_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_21_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_25_proc0
// static void setup_mmap_read_pf8_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_22_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pf8_22_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_26_proc0
// static void setup_mmap_read_pf8_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_22_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_23_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_34_proc0
// static void setup_mmap_read_pf8_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_24_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_6_common
// static void setup_mmap_read_pf8_24_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_19_proc0
// static void setup_mmap_read_pf8_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_24_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf8_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_25_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_6_common
// static void setup_mmap_read_pf8_25_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_22_proc0
// static void setup_mmap_read_pf8_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_25_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf8_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_26_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_5_common
// static void setup_mmap_read_pf8_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_32_proc0
// static void setup_mmap_read_pf8_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_26_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pf8_26_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_27_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_6_common
// static void setup_mmap_read_pf8_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_33_proc0
// static void setup_mmap_read_pf8_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_27_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf8_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_28_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_5_common
// static void setup_mmap_read_pf8_28_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_36_proc0
// static void setup_mmap_read_pf8_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_28_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_13_final
// static void setup_mmap_read_pf8_28_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_29_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_31_proc0
// static void setup_mmap_read_pf8_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_29_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_30_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pf8_30_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_30_proc0
// static void setup_mmap_read_pf8_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_30_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_30_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_31_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_31_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_41_proc0
// static void setup_mmap_read_pf8_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_31_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_32_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pf8_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pfb0_35_proc0
// static void setup_mmap_read_pf8_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_32_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_32_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_33_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_33_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pfb0_6_proc0
// static void setup_mmap_read_pf8_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_33_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_34_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_34_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pfb0_27_proc0
// static void setup_mmap_read_pf8_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_35_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_35_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pfb0_28_proc0
// static void setup_mmap_read_pf8_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_35_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_35_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_36_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_36_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pf8_36_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pfb0_29_proc0
// static void setup_mmap_read_pf8_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_36_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_36_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_37_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_37_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pfb0_37_proc0
// static void setup_mmap_read_pf8_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_37_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_38_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_38_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_38_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pfb0_21_proc0
// static void setup_mmap_read_pf8_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_38_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_38_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_39_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_39_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pf8_39_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pfb0_38_proc0
// static void setup_mmap_read_pf8_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_39_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_39_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_40_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_40_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pf8_40_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pfb0_39_proc0
// static void setup_mmap_read_pf8_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf8_40_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf8_40_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf8_41_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf8_41_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf8_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pf8_41_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pfb0_40_proc0
// static void setup_mmap_read_pf8_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pf8_41_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pf8_41_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_mmap_read_pf4_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_mmap_read_pf4_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
}
static void setup_mmap_read_pf4_0_final(void) {
  unlink("__i0");
}
static void setup_mmap_read_pf4_0_procfinal(void) {
  
}

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_mmap_read_pf4_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pf4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
static void setup_mmap_read_pf4_1_final(void) {
  unlink("__i1");
  unlink("__i0");
}
// static void setup_mmap_read_pf4_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pf4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_pf4_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf4_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x985000);
}
// static void setup_mmap_read_pf4_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1e27000);
}
// static void setup_mmap_read_pf4_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_mmap_read_pf4_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i2", 0x1e27000);
}
// static void setup_mmap_read_pf4_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
static void setup_mmap_read_pf4_6_final(void) {
  unlink("__i1");
  unlink("__i2");
  unlink("__i0");
}
// static void setup_mmap_read_pf4_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5066752, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pf4_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5066752, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf4_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_9_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
}
static void setup_mmap_read_pf4_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x26000);
}
// static void setup_mmap_read_pf4_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
static void setup_mmap_read_pf4_9_final(void) {
  unlink("__i0");
  unlink("__i1");
}
// static void setup_mmap_read_pf4_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf4_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x22000);
}
// static void setup_mmap_read_pf4_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pf4_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x985000);
}
// static void setup_mmap_read_pf4_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_12_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf4_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_13_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pf4_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf4_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x26000);
}
// static void setup_mmap_read_pf4_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_14_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf4_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_15_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2297000);
}
// static void setup_mmap_read_pf4_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_16_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pf4_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2297000);
}
// static void setup_mmap_read_pf4_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_17_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf4_17_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_18_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x26000);
}
// static void setup_mmap_read_pf4_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_18_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_19_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_19_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pf4_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_19_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf4_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_20_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_pf4_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x985000);
}
// static void setup_mmap_read_pf4_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_20_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf4_20_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_21_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_pf4_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 90112, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 86016, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x16000);
}
// static void setup_mmap_read_pf4_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_21_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf4_21_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_22_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pf4_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x985000);
}
// static void setup_mmap_read_pf4_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_22_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf4_22_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_23_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pf4_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x985000);
}
// static void setup_mmap_read_pf4_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_23_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf4_23_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_24_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_24_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x985000);
}
// static void setup_mmap_read_pf4_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_24_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf4_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_25_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_25_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x985000);
}
// static void setup_mmap_read_pf4_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_25_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf4_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_26_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_26_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i2", 0x985000);
}
// static void setup_mmap_read_pf4_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
static void setup_mmap_read_pf4_26_final(void) {
  unlink("__i1");
  unlink("__i2");
  unlink("__i0");
  close(20);
  close(21);
}
// static void setup_mmap_read_pf4_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_27_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_25_common
static void setup_mmap_read_pf4_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x985000);
}
// static void setup_mmap_read_pf4_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_27_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf4_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_28_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pf4_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x28000);
}
// static void setup_mmap_read_pf4_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_28_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf4_28_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_29_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x24000);
}
// static void setup_mmap_read_pf4_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_29_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_30_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 163840, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x27000);
}
// static void setup_mmap_read_pf4_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_30_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_31_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x27000);
}
// static void setup_mmap_read_pf4_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_31_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_31_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_32_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_32_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x27000);
}
// static void setup_mmap_read_pf4_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
static void setup_mmap_read_pf4_32_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
}
// static void setup_mmap_read_pf4_32_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_33_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_32_common
static void setup_mmap_read_pf4_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x28000);
}
// static void setup_mmap_read_pf4_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_33_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf4_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_34_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_24_common
static void setup_mmap_read_pf4_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_mmap_read_pf4_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf4_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_35_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_35_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf4_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_35_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_36_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_36_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_24_common
static void setup_mmap_read_pf4_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf4_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_36_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf4_36_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_37_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_37_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_25_common
static void setup_mmap_read_pf4_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf4_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_37_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf4_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_38_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_38_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf4_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_38_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_38_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_39_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_39_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x985000);
}
// static void setup_mmap_read_pf4_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_39_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_39_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_40_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_40_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_pf4_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x985000);
}
// static void setup_mmap_read_pf4_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_40_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf4_40_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_41_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_41_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i2", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_6_common
static void setup_mmap_read_pf4_41_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i2", 0x985000);
}
// static void setup_mmap_read_pf4_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_41_final(void) {
//   unlink("__i1");
//   unlink("__i2");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_6_final
// static void setup_mmap_read_pf4_41_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_42_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_42_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_42_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_pf4_42_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x985000);
}
// static void setup_mmap_read_pf4_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_42_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf4_42_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_43_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_43_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_pf4_43_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x4d4000);
}
// static void setup_mmap_read_pf4_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_43_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf4_43_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_44_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_44_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_44_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pf4_44_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x27000);
}
// static void setup_mmap_read_pf4_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_44_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf4_44_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_45_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_45_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_45_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pf4_45_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x26000);
}
// static void setup_mmap_read_pf4_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_45_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf4_45_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_46_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_46_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pf4_46_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 163840, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x29000);
}
// static void setup_mmap_read_pf4_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_46_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf4_46_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_47_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_47_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_47_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_47_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 163840, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x985000);
}
// static void setup_mmap_read_pf4_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_47_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_47_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_48_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_48_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_48_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_48_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e28000);
}
// static void setup_mmap_read_pf4_48_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_48_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_48_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_49_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_49_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_49_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_49_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_mmap_read_pf4_49_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_49_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_49_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_50_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_50_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_50_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_50_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_mmap_read_pf4_50_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_50_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_50_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_51_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_51_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_51_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_51_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pf4_51_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_51_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf4_51_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_52_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_52_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_52_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_52_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pf4_52_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_52_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf4_52_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_53_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_53_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_53_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_53_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i2", 0x2000);
}
// static void setup_mmap_read_pf4_53_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_53_final(void) {
//   unlink("__i1");
//   unlink("__i2");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_26_final
// static void setup_mmap_read_pf4_53_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_54_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_54_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_54_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_54_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x1e27000);
}
// static void setup_mmap_read_pf4_54_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_54_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf4_54_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_55_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_55_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_55_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_52_common
static void setup_mmap_read_pf4_55_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pf4_55_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_55_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf4_55_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_56_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_56_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pf4_56_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf4_56_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pf4_56_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_56_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf4_56_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_57_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_57_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_57_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_13_common
static void setup_mmap_read_pf4_57_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x1e27000);
}
// static void setup_mmap_read_pf4_57_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_57_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf4_57_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_58_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_58_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_58_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_pf4_58_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf4_58_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_58_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf4_58_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_59_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_59_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_59_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pf4_59_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf4_59_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf4_59_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf4_59_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_60_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_60_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_60_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_13_common
static void setup_mmap_read_pf4_60_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf4_60_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_60_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf4_60_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf4_61_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf4_61_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pf4_61_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_19_common
static void setup_mmap_read_pf4_61_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf4_61_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf4_61_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf4_61_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pf0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pf0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x2297000);
}
// static void setup_mmap_read_pf0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_4_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2297000);
}
// static void setup_mmap_read_pf0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
static void setup_mmap_read_pf0_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1e27000);
}
// static void setup_mmap_read_pf0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i2", 0x0);
}
// static void setup_mmap_read_pf0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
static void setup_mmap_read_pf0_6_final(void) {
  unlink("__i0");
  unlink("__i1");
  unlink("__i2");
}
// static void setup_mmap_read_pf0_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_8_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x4d8000);
}
// static void setup_mmap_read_pf0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
static void setup_mmap_read_pf0_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_read_pf0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_9_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_10_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pf0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_10_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf0_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_11_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pf0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf0_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_12_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pf0_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_13_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pf0_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf0_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf0_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_14_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_10_common
static void setup_mmap_read_pf0_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x20ad000);
}
// static void setup_mmap_read_pf0_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_15_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf0_15_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x2297000);
}
// static void setup_mmap_read_pf0_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_16_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_17_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_18_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pf0_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_18_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_18_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_19_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_19_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_19_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_19_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_20_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_20_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_20_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_21_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
static void setup_mmap_read_pf0_21_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x1000);
}
// static void setup_mmap_read_pf0_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_21_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_21_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_22_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_22_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2297000);
}
// static void setup_mmap_read_pf0_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_22_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf0_22_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_23_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_23_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_23_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i2", 0x20ad000);
}
// static void setup_mmap_read_pf0_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
static void setup_mmap_read_pf0_23_final(void) {
  unlink("__i1");
  unlink("__i0");
  unlink("__i2");
  close(20);
  close(21);
}
// static void setup_mmap_read_pf0_23_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_24_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_11_common
static void setup_mmap_read_pf0_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x704000);
}
// static void setup_mmap_read_pf0_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_24_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf0_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_25_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
static void setup_mmap_read_pf0_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x704000);
}
// static void setup_mmap_read_pf0_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_25_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_25_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_26_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
static void setup_mmap_read_pf0_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5066752, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_read_pf0_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_26_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_26_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_27_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_12_common
static void setup_mmap_read_pf0_27_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 28672, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x7000);
}
// static void setup_mmap_read_pf0_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_27_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_27_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_28_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5066752, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_28_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_28_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_29_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_29_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_29_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_29_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_30_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_30_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_30_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_31_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_31_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2297000);
}
// static void setup_mmap_read_pf0_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_31_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf0_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_32_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_11_common
static void setup_mmap_read_pf0_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_read_pf0_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_32_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf0_32_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_33_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_13_common
static void setup_mmap_read_pf0_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2297000);
}
// static void setup_mmap_read_pf0_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_33_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf0_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_34_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_34_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf0_34_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_35_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_35_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_35_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf0_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_35_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_35_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_36_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_36_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf0_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_36_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_36_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_37_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_37_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
static void setup_mmap_read_pf0_37_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x2297000);
}
// static void setup_mmap_read_pf0_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_37_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_37_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_38_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_38_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_38_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_38_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf0_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_38_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf0_38_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_39_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_39_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_39_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_39_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pf0_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_39_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf0_39_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_40_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_40_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
static void setup_mmap_read_pf0_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf0_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_40_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_40_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_41_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_41_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
static void setup_mmap_read_pf0_41_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x1000);
}
// static void setup_mmap_read_pf0_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_41_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_41_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_42_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_42_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_42_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_42_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i2", 0x20ad000);
}
// static void setup_mmap_read_pf0_42_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_42_final(void) {
//   unlink("__i1");
//   unlink("__i2");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_6_final
// static void setup_mmap_read_pf0_42_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_43_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_43_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_43_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_8_common
static void setup_mmap_read_pf0_43_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_read_pf0_43_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_43_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_43_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_44_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_44_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_44_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_7_common
static void setup_mmap_read_pf0_44_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf0_44_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_44_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_44_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_45_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_45_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_45_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pf0_45_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x3000);
}
// static void setup_mmap_read_pf0_45_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_45_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pf0_45_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_46_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_46_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_46_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_8_common
static void setup_mmap_read_pf0_46_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pf0_46_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_46_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_46_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_47_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_47_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_47_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_47_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pf0_47_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_47_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf0_47_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_48_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_48_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_48_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_8_common
static void setup_mmap_read_pf0_48_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_read_pf0_48_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_48_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pf0_48_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_49_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_49_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_49_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_49_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf0_49_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_49_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf0_49_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_50_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_50_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_50_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_7_common
static void setup_mmap_read_pf0_50_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf0_50_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_50_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_50_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_51_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_51_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_51_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_47_common
static void setup_mmap_read_pf0_51_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pf0_51_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_51_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf0_51_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_52_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_52_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_52_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_4_common
static void setup_mmap_read_pf0_52_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pf0_52_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_52_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_52_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_53_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_53_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_53_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
static void setup_mmap_read_pf0_53_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_53_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_53_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_53_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_54_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_54_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_54_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
static void setup_mmap_read_pf0_54_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_54_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_54_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_54_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_55_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_55_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_55_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_pf0_55_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 2502656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_55_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pf0_55_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pf0_55_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_56_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_56_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_56_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i2", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i2", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_56_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i2", 0x704000);
}
// static void setup_mmap_read_pf0_56_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
static void setup_mmap_read_pf0_56_final(void) {
  unlink("__i0");
  unlink("__i1");
  unlink("__i2");
  close(20);
  close(21);
}
// static void setup_mmap_read_pf0_56_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_57_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_57_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_57_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_11_common
static void setup_mmap_read_pf0_57_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pf0_57_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_57_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf0_57_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_58_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_58_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_58_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_39_common
static void setup_mmap_read_pf0_58_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x261000);
}
// static void setup_mmap_read_pf0_58_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_58_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pf0_58_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_59_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_59_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_59_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_59_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_read_pf0_59_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_59_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pf0_59_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_60_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_60_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pf0_60_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pf0_60_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pf0_60_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_60_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf0_60_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pf0_61_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pf0_61_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pf0_61_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_34_common
static void setup_mmap_read_pf0_61_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pf0_61_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pf0_61_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pf0_61_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
static void setup_mmap_read_pe0_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
}
// static void setup_mmap_read_pe0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_0_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_pe0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pe0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pe0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pe0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pe0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pe0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
static void setup_mmap_read_pe0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pe0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_2_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_pe0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pe0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pe0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pe0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pe0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pe0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
static void setup_mmap_read_pe0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pe0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_4_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_pe0_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pe0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pe0_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pe0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pe0_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pe0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pe0_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pe0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pe0_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pe0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pe0_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pe0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pe0_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pe0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pe0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pe0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pe0_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pe0_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pe0_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pe0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pe0_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pe0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pe0_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pe0_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdc_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdc_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pdc_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_pdc_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pdc_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pdc_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdc_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdc_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdc_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pdc_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pdc_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pdc_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pdc_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdc_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdc_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdc_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pdc_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pdc_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x0);
}
// static void setup_mmap_read_pdc_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pdc_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdc_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdc_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdc_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pdc_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_6_common
static void setup_mmap_read_pdc_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x0);
}
// static void setup_mmap_read_pdc_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pdc_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pdc_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdc_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdc_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pdc_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pdc_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pdc_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pdc_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdc_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdc_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdc_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pdc_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_6_common
static void setup_mmap_read_pdc_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x0);
}
// static void setup_mmap_read_pdc_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pdc_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pdc_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdc_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdc_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pdc_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pdc_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x0);
}
// static void setup_mmap_read_pdc_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pdc_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdc_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
static int test_mmap_read_pdb0_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(10, data, 4096);
  expect_result("r", r, -1);
  expect_errno(11);
  if (r < 0) return xerrno(r);
  return data[0];
}
// static void setup_mmap_read_pdb0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pdb0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
static void setup_mmap_read_pdb0_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pdb0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pdb0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pdb0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pdc_1_proc0
// static void setup_mmap_read_pdb0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_9_common
static void setup_mmap_read_pdb0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_read_pdb0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pdb0_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
static void setup_mmap_read_pdb0_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pdb0_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pdb0_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pdb0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pdb0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
static void setup_mmap_read_pdb0_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pdb0_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pdb0_7_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(22, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pdb0_7_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(20);
  close(21);
  close(22);
  close(23);
}
// static void setup_mmap_read_pdb0_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
static void setup_mmap_read_pdb0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pdb0_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pdb0_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pdc_4_proc0
// static void setup_mmap_read_pdb0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_9_common
static void setup_mmap_read_pdb0_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pdb0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pdb0_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pdb0_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_13_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pdb0_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_13_proc0
// static void setup_mmap_read_pdb0_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_14_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pdb0_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
static void setup_mmap_read_pdb0_15_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pdb0_15_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
static void setup_mmap_read_pdb0_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pdb0_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_16_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pdb0_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
static void setup_mmap_read_pdb0_17_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pdb0_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_17_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pdb0_17_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_18_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
static void setup_mmap_read_pdb0_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pdb0_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_18_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pdb0_18_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_19_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pdb0_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pdb0_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_20_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pdb0_20_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pdb0_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pdb0_20_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_21_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pdb0_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_5_proc0
// static void setup_mmap_read_pdb0_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_21_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_22_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_pdb0_22_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_8_proc0
// static void setup_mmap_read_pdb0_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pdb0_22_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_23_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_pdb0_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_15_proc0
// static void setup_mmap_read_pdb0_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_23_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pdb0_23_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_24_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_24_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_24_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_25_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pdb0_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_25_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pdb0_25_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_26_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pdb0_26_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_24_proc0
// static void setup_mmap_read_pdb0_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_26_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pdb0_26_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_27_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_pdb0_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_25_proc0
// static void setup_mmap_read_pdb0_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_27_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pdb0_27_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_28_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_28_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_29_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pdb0_29_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_28_proc0
// static void setup_mmap_read_pdb0_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_29_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pdb0_29_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_30_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_30_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pdb0_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_30_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_30_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_31_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pdb0_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_31_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_31_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_32_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pdb0_32_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pdb0_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_32_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pdb0_32_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_33_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_33_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_33_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_34_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pdb0_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pdb0_34_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_35_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_35_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_35_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_pdb0_35_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_34_proc0
// static void setup_mmap_read_pdb0_35_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_35_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pdb0_35_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_36_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_36_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_36_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_36_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pdb0_36_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_36_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_36_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_37_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_37_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_37_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pdb0_37_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_36_proc0
// static void setup_mmap_read_pdb0_37_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_37_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pdb0_37_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_38_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_38_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_38_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pdb0_38_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_33_proc0
// static void setup_mmap_read_pdb0_38_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_38_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pdb0_38_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_39_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_39_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_39_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pdb0_39_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pfc_14_proc0
// static void setup_mmap_read_pdb0_39_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_39_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_39_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_40_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_40_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_40_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
static void setup_mmap_read_pdb0_40_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pdb0_40_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pdb0_40_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pdb0_40_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pdb0_41_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pdb0_41_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pdb0_41_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pdb0_41_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pdb0_41_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pdb0_41_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pdb0_41_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
static int test_mmap_read_pda0_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(10, data, 4096);
  expect_result("r", r, 0);
  if (r < 0) return xerrno(r);
  return data[0];
}
// static void setup_mmap_read_pda0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pda0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
static void setup_mmap_read_pda0_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pda0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pda0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pda0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pda0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pda0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_pda0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pda0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_7_common
static void setup_mmap_read_pda0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i1", 0x5000);
}
// static void setup_mmap_read_pda0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pda0_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
static void setup_mmap_read_pda0_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pda0_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_read_pda0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pda0_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
static void setup_mmap_read_pda0_6_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pda0_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(22);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pda0_6_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(22, 10);
  if (r < 0) setup_error("dup2");
  r = dup(22);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pda0_6_final(void) {
  unlink("__i0");
  unlink("__i1");
  close(22);
  close(23);
  close(20);
  close(21);
}
static void setup_mmap_read_pda0_6_procfinal(void) {
  close(22);
  close(23);
  close(20);
  close(21);
}

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pda0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pda0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pda0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
static void setup_mmap_read_pda0_8_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pda0_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
static void setup_mmap_read_pda0_8_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(22, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pda0_8_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pda0_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_9_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pda0_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pda0_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_10_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pda0_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pda0_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_11_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_7_common
static void setup_mmap_read_pda0_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i1", 0x5000);
}
// static void setup_mmap_read_pda0_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pda0_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_12_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pda0_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pda0_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_12_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_12_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_13_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pda0_13_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pda0_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_13_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pda0_13_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_14_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pda0_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pda0_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_14_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_14_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_15_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_pda0_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x5000);
// }
// ^ See setup_mmap_read_pda0_14_proc0
// static void setup_mmap_read_pda0_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_15_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pda0_15_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_16_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pda0_16_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_read_pda0_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pda0_16_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_16_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_17_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_pda0_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x5000);
// }
// ^ See setup_mmap_read_pda0_16_proc0
// static void setup_mmap_read_pda0_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pda0_17_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pda0_17_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_18_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_18_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_18_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
static void setup_mmap_read_pda0_18_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 0, "__i0", 0x5000);
}
// static void setup_mmap_read_pda0_18_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_18_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pda0_18_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_19_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_19_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_19_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pda0_19_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x5000);
// }
// ^ See setup_mmap_read_pda0_5_proc0
// static void setup_mmap_read_pda0_19_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_19_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_19_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_20_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_20_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_20_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_pda0_20_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x5000);
// }
// ^ See setup_mmap_read_pda0_8_proc0
// static void setup_mmap_read_pda0_20_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_20_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pda0_20_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_21_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_21_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_21_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_pda0_21_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x5000);
// }
// ^ See setup_mmap_read_pda0_18_proc0
// static void setup_mmap_read_pda0_21_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_21_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pda0_21_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_22_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_22_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_22_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pda0_22_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pda0_22_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_22_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pda0_22_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_23_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_23_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_23_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
// static void setup_mmap_read_pda0_23_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x5000);
// }
// ^ See setup_mmap_read_pda0_22_proc0
// static void setup_mmap_read_pda0_23_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_23_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pda0_23_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_24_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_24_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_24_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
static void setup_mmap_read_pda0_24_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pda0_24_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_24_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pda0_24_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_25_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_25_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_25_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
static void setup_mmap_read_pda0_25_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pda0_25_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pda0_25_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pda0_25_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_26_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_26_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_26_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
static void setup_mmap_read_pda0_26_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pda0_26_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_26_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pda0_26_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_27_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_27_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_27_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pda0_27_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pdb0_30_proc0
// static void setup_mmap_read_pda0_27_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pda0_27_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_27_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_28_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_28_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_28_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pda0_28_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 0, 0);
}
// static void setup_mmap_read_pda0_28_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_28_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pda0_28_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_29_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_29_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_29_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_pda0_29_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pda0_29_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pda0_29_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_29_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_30_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_30_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_30_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_pda0_30_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x5000);
// }
// ^ See setup_mmap_read_pda0_29_proc0
// static void setup_mmap_read_pda0_30_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pda0_30_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pda0_30_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_31_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_31_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_31_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pda0_31_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
// static void setup_mmap_read_pda0_31_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_31_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pda0_31_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_32_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_32_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_32_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
// static void setup_mmap_read_pda0_32_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x5000);
// }
// ^ See setup_mmap_read_pda0_31_proc0
// static void setup_mmap_read_pda0_32_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_32_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pda0_32_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_33_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_33_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_33_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pda0_33_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pdb0_41_proc0
// static void setup_mmap_read_pda0_33_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pda0_33_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pda0_33_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pda0_34_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pda0_34_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pda0_34_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pda0_34_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  init_map_anon(0x12345600000, 1, 0);
}
// static void setup_mmap_read_pda0_34_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pda0_34_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pda0_34_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
static int test_mmap_read_pd8_0_1(void) {
  char *data = datavalbuf;
  ssize_t r = read(10, data, 4096);
  expect_result("r", r, 4096);
  expect_result("data[0]", data[0], 0);
  if (r < 0) return xerrno(r);
  return data[0];
}
// static void setup_mmap_read_pd8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pd8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pd8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pd8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pd8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pd8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pdc_1_proc0
// static void setup_mmap_read_pd8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pd8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pd8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd8_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pd8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_3_proc0
// static void setup_mmap_read_pd8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pd8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pd8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd8_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_6_common
// static void setup_mmap_read_pd8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 0, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_4_proc0
// static void setup_mmap_read_pd8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pd8_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pd8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd8_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pd8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pdc_4_proc0
// static void setup_mmap_read_pd8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pd8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pd8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd8_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_6_common
// static void setup_mmap_read_pd8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i1", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_11_proc0
// static void setup_mmap_read_pd8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pd8_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pd8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd8_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pd8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   init_map_file(0x12345600000, 1, "__i0", 0x2000);
// }
// ^ See setup_mmap_read_pdb0_10_proc0
// static void setup_mmap_read_pd8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pd8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pd8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd4_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd4_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pd4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_pd4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pd4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd4_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd4_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd4_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd4_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pd4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_pd4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pe0_2_proc0
// static void setup_mmap_read_pd4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd4_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd4_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd4_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd4_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pd4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pd4_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x2000);
}
// static void setup_mmap_read_pd4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd4_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd4_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd4_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd4_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pd4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pd4_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x2000);
}
// static void setup_mmap_read_pd4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd4_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pd4_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd4_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd4_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pd4_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_pd4_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pe0_4_proc0
// static void setup_mmap_read_pd4_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd4_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd4_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd4_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd4_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pd4_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pd4_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x2000);
}
// static void setup_mmap_read_pd4_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd4_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd4_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd4_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd4_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pd4_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_9_common
static void setup_mmap_read_pd4_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x2000);
}
// static void setup_mmap_read_pd4_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd4_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pd4_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd4_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd4_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pd4_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_pd4_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_mmap_read_pe0_3_proc0
// static void setup_mmap_read_pd4_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd4_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd4_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd4_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd4_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pd4_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_pd4_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_mmap_read_pe0_5_proc0
// static void setup_mmap_read_pd4_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd4_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd4_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_pd0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pd0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_pd0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pe0_2_proc0
// static void setup_mmap_read_pd0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd0_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_10_common
static void setup_mmap_read_pd0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i1", 0x2297000);
}
// static void setup_mmap_read_pd0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd0_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pd0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_10_common
static void setup_mmap_read_pd0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i1", 0x704000);
}
// static void setup_mmap_read_pd0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd0_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pd0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
static void setup_mmap_read_pd0_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 0, "__i0", 0x704000);
}
static void setup_mmap_read_pd0_4_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pd0_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd0_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd0_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_pd0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_mmap_read_pe0_3_proc0
// static void setup_mmap_read_pd0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd0_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd0_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd0_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_7_common
static void setup_mmap_read_pd0_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  init_map_file(0x12345600000, 1, "__i0", 0x5000);
}
static void setup_mmap_read_pd0_6_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pd0_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd0_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd0_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_7_common
// static void setup_mmap_read_pd0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pe0_4_proc0
// static void setup_mmap_read_pd0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_6_proc1
// static void setup_mmap_read_pd0_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd0_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pd0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pd0_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pd0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_pd0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_mmap_read_pe0_5_proc0
// static void setup_mmap_read_pd0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pd0_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pd0_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pc0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pc0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pc0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_pc0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pc0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pc0_0_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_pc0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pc0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pc0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pc0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_pc0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 0, 0);
// }
// ^ See setup_mmap_read_pe0_2_proc0
// static void setup_mmap_read_pc0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pc0_1_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_pc0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pc0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pc0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pc0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_pc0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 0, "__i0", 0x0);
// }
// ^ See setup_mmap_read_pe0_3_proc0
// static void setup_mmap_read_pc0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pc0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pc0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pc0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pc0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pc0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_pc0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_anon(0x12345600000, 1, 0);
// }
// ^ See setup_mmap_read_pe0_4_proc0
// static void setup_mmap_read_pc0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pc0_3_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_pc0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pc0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pfc_0_0
// static int test_mmap_read_pc0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pc0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_pc0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   init_map_file(0x12345600000, 1, "__i0", 0x0);
// }
// ^ See setup_mmap_read_pe0_5_proc0
// static void setup_mmap_read_pc0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pc0_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pc0_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_pbf_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static int test_mmap_read_pbf_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pbf_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
static void setup_mmap_read_pbf_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pbf_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbf_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbf_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbf_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbf_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
static void setup_mmap_read_pbf_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_pbf_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_0_proc0
// static void setup_mmap_read_pbf_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbf_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pbf_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbf_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbf_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
static void setup_mmap_read_pbf_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pbf_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pbf_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbf_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pbf_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbf_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbf_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pbf_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_2_common
static void setup_mmap_read_pbf_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(23, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pbf_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbf_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pbf_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbf_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbf_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pbf_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_1_common
// static void setup_mmap_read_pbf_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_1_proc0
// static void setup_mmap_read_pbf_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbf_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pbf_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbf_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbf_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
static void setup_mmap_read_pbf_5_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_pbf_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_2_proc0
// static void setup_mmap_read_pbf_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbf_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pbf_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbf_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbf_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pbf_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_pbf_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_1_proc0
// static void setup_mmap_read_pbf_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbf_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbf_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbf_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbf_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pbf_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_5_common
// static void setup_mmap_read_pbf_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_3_proc0
// static void setup_mmap_read_pbf_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbf_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pbf_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbf_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbf_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pbf_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_pbf_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pbf_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbf_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbf_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbec_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbec_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pbec_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pbec_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_pbec_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbec_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbec_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbec_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbec_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pbec_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_pbec_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_pbec_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbec_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pbec_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbec_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbec_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pbec_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_pbec_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_pbec_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbec_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pbec_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbec_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbec_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pbec_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_pbec_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_pbec_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbec_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pbec_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbec_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbec_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pbec_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_pbec_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_pbec_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbec_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pbec_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbec_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbec_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pbec_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pbec_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_pbec_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbec_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pbec_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbec_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbec_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pbec_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pbec_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_pbec_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbec_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbec_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbec_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbec_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_pbec_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pbec_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_pbec_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbec_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pbec_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbec_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbec_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pbec_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pbec_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pbec_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbec_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbec_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pbe8_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_pbe8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(22, 11);
  if (r < 0) setup_error("dup2");
  r = dup(22);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pbe8_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup(22);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pbe8_0_final(void) {
  unlink("__i0");
  close(22);
  close(23);
  close(20);
  close(21);
}
// static void setup_mmap_read_pbe8_0_procfinal(void) {
//   close(22);
//   close(23);
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pda0_6_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
static void setup_mmap_read_pbe8_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_pbe8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbe8_0_proc0
// static void setup_mmap_read_pbe8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbe8_0_proc1
// static void setup_mmap_read_pbe8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(22);
//   close(23);
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pda0_6_final
// static void setup_mmap_read_pbe8_1_procfinal(void) {
//   close(22);
//   close(23);
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pda0_6_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe8_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pbe8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pbe8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_pbe8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbe8_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pbe8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe8_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pbe8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pbe8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_pbe8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbe8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbe8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe8_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pbe8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pbe8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pbe8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbe8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbe8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe8_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pbe8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_pbe8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_9_proc0
// static void setup_mmap_read_pbe8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pbe8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pbe8_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe8_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pbe8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
// static void setup_mmap_read_pbe8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_9_proc0
// static void setup_mmap_read_pbe8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_pbe8_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pbe8_6_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbe0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pbe0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_pbe0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbe0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbe0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pbe0_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_pbe0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_pbe0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbe0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pbe0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pbe0_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_pbe0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_pbe0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbe0_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pbe0_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbe0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_pbe0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_pbe0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbe0_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pbe0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe0_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbe0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_2_common
// static void setup_mmap_read_pbe0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_pbe0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbe0_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pbe0_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe0_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe0_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbe0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pbe0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_pbe0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbe0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pbe0_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe0_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe0_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbe0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pbe0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_pbe0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbe0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbe0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe0_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe0_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbe0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pbe0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_pbe0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_pbe0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pbe0_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbe0_8_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbe0_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pbe0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pbe0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pbe0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbe0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbe0_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbd_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbd_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pbd_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_24_common
static void setup_mmap_read_pbd_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pbd_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbd_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbd_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbd_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbd_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pbd_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_19_common
static void setup_mmap_read_pbd_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pbd_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbd_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pbd_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbd_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbd_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pbd_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_19_common
static void setup_mmap_read_pbd_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pbd_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbd_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pbd_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbd_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbd_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pbd_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_13_common
static void setup_mmap_read_pbd_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pbd_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbd_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbd_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbc0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbc0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbc0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_13_common
// static void setup_mmap_read_pbc0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf0_13_proc0
// static void setup_mmap_read_pbc0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbc0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbc0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbc0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbc0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbc0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_39_common
// static void setup_mmap_read_pbc0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf0_11_proc0
// static void setup_mmap_read_pbc0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbc0_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pbc0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbc0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbc0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbc0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_38_common
static void setup_mmap_read_pbc0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pbc0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbc0_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pbc0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pbc0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pbc0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pbc0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_22_common
static void setup_mmap_read_pbc0_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(21, 10);
  if (r < 0) setup_error("dup2");
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pbc0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pbc0_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pbc0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pb8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_pb8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pb8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pb8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_pb8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pb8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb7_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb7_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb7_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_pb7_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb7_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb7_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb7_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb7_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb7_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb7_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_1_common
// static void setup_mmap_read_pb7_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb7_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb7_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pb7_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb7_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb7_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb7_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_2_common
// static void setup_mmap_read_pb7_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
static void setup_mmap_read_pb7_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(23, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(23);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pb7_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pb7_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb7_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb7_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb7_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_1_common
// static void setup_mmap_read_pb7_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb7_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb7_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pb7_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb7_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb7_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb7_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_2_common
// static void setup_mmap_read_pb7_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_pb7_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb7_2_proc1
// static void setup_mmap_read_pb7_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pb7_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb7_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb7_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb7_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_5_common
// static void setup_mmap_read_pb7_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_pb7_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb7_2_proc1
// static void setup_mmap_read_pb7_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pb7_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb7_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb7_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb7_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_pb7_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb7_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb7_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb7_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb7_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb7_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb7_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_5_common
// static void setup_mmap_read_pb7_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_pb7_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb7_2_proc1
// static void setup_mmap_read_pb7_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pb7_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb6c_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb6c_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pb6c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pb6c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb6c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb6c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb6c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb6c_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb6c_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pb6c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_pb6c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_pb6c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pb6c_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pb6c_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb6c_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb6c_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pb6c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_pb6c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_pb6c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pb6c_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pb6c_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb6c_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb6c_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pb6c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_pb6c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_pb6c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pb6c_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pb6c_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb6c_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb6c_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pb6c_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_pb6c_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_pb6c_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pb6c_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pb6c_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb6c_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb6c_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pb6c_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pb6c_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb6c_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb6c_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pb6c_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb6c_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb6c_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pb6c_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pb6c_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb6c_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb6c_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb6c_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb6c_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb6c_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pb6c_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pb6c_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb6c_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb6c_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pb6c_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb68_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb68_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb68_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
static void setup_mmap_read_pb68_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
static void setup_mmap_read_pb68_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(22, 10);
  if (r < 0) setup_error("dup2");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pb68_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pb68_0_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb68_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb68_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb68_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
static void setup_mmap_read_pb68_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
  r = dup(22);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pb68_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pb68_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pb68_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb68_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb68_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb68_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_pb68_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_13_proc0
// static void setup_mmap_read_pb68_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pb68_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pb68_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb68_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb68_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb68_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
// static void setup_mmap_read_pb68_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_13_proc0
// static void setup_mmap_read_pb68_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_pb68_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pb68_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb68_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb68_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb68_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pb68_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pb68_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pb68_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb68_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb68_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb68_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb68_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_pb68_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pb68_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pb68_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pb68_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb60_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb60_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb60_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pb60_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb60_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb60_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb60_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb60_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb60_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb60_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pb60_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_pb60_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pb60_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pb60_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb60_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb60_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb60_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_2_common
// static void setup_mmap_read_pb60_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_pb60_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pb60_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pb60_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb60_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb60_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb60_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_pb60_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_pb60_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pb60_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_pb60_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb60_4_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb60_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb60_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_2_common
// static void setup_mmap_read_pb60_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_pb60_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_pb60_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_pb60_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb60_5_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb60_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb60_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_pb60_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb60_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb60_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pb60_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb60_6_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb60_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb60_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pb60_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb60_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb60_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb60_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb60_7_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb60_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb60_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_pb60_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb60_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb60_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pb60_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb5_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb5_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_51_common
// static void setup_mmap_read_pb5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
static void setup_mmap_read_pb5_0_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pb5_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb5_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb5_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb5_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb5_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_52_common
// static void setup_mmap_read_pb5_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
static void setup_mmap_read_pb5_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pb5_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pb5_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb5_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb5_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_51_common
// static void setup_mmap_read_pb5_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb5_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_pb5_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb5_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb5_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb5_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pb5_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_52_common
// static void setup_mmap_read_pb5_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb5_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_1_proc1
// static void setup_mmap_read_pb5_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_pb5_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb40_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb40_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb40_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_13_common
// static void setup_mmap_read_pb40_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb40_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_pb40_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb40_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb40_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb40_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb40_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_31_common
// static void setup_mmap_read_pb40_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb40_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_1_proc1
// static void setup_mmap_read_pb40_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pb40_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb40_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb40_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb40_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_31_common
// static void setup_mmap_read_pb40_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb40_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_1_proc1
// static void setup_mmap_read_pb40_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pb40_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb40_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb40_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pb40_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_34_common
// static void setup_mmap_read_pb40_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb40_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_pb40_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb40_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_pb0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pb0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pb0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pb0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_pbf_0_0
// static int test_mmap_read_pb0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pb0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_pb0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pb0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pb0_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pb0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_paf_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, 1250999402496);
  return xerrno(r);
}
// static int test_mmap_read_paf_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
static void setup_mmap_read_paf_0_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
static void setup_mmap_read_paf_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(21, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_paf_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_paf_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_paf_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_paf_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_paf_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
static void setup_mmap_read_paf_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fds[1], dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_paf_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_paf_0_proc0
// static void setup_mmap_read_paf_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_paf_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_paf_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_paec_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_paec_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_paec_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_paec_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_paec_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_paec_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_paec_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_paec_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_paec_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_paec_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_paec_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_paec_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_paec_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_paec_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pae8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pae8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pae8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pae8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_2_proc0
// static void setup_mmap_read_pae8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pae8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pae8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pae8_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pae8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pae8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
static void setup_mmap_read_pae8_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_pae8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_pae8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pae8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pae0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pae0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pae0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pae0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_pae0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pae0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pae0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pae0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pae0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pae0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_pae0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_pae0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_pae0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pae0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pad_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pad_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pad_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_pad_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_proc0
// static void setup_mmap_read_pad_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pad_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pad_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pad_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pad_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pad_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
// static void setup_mmap_read_pad_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_proc0
// static void setup_mmap_read_pad_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pad_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pad_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pad_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pad_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_pad_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pad_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31621120, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pad_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pad_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pad_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pad_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pad_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pad_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pad_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pad_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pad_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pad_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pac0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pac0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_pac0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_pac0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_proc0
// static void setup_mmap_read_pac0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pac0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pac0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pac0_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pac0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pac0_1_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pac0_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pac0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pac0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_pac0_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pac0_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pac0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_pac0_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_pac0_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5091328, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pac0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pac0_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pac0_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pac0_3_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pac0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pac0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_pac0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pac0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pac0_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pac0_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_pa8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
static void setup_mmap_read_pa8_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pa8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pa8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pa8_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa7_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa7_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pa7_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_0_common
// static void setup_mmap_read_pa7_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_pa7_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pa7_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pa7_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa7_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa7_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pa7_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_1_common
// static void setup_mmap_read_pa7_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_pa7_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_pa7_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pa7_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa6c_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa6c_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pa6c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_pa6c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_pa6c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pa6c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pa6c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa6c_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa6c_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_pa6c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_pa6c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_pa6c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pa6c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pa6c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa68_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa68_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pa68_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_pa68_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_1_proc0
// static void setup_mmap_read_pa68_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pa68_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pa68_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa68_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa68_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pa68_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_pa68_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_1_proc0
// static void setup_mmap_read_pa68_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_pa68_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pa68_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa60_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa60_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pa60_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_pa60_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_pa60_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pa60_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_pa60_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa60_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa60_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pa60_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_pa60_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_pa60_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_pa60_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_pa60_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa5_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa5_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pa5_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_pa5_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pa5_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pa5_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pa5_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa5_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa5_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pa5_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
// static void setup_mmap_read_pa5_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
static void setup_mmap_read_pa5_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pa5_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pa5_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa5_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa5_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_pa5_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_pa5_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_mmap_read_pa5_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 159744, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pa5_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pa5_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa40_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa40_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pa40_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_pa40_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pa40_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_pa40_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pa40_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa40_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa40_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pa40_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_7_common
// static void setup_mmap_read_pa40_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_pa40_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_6_proc1
// static void setup_mmap_read_pa40_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pa40_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa40_2_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa40_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_pa40_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_3_common
// static void setup_mmap_read_pa40_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
static void setup_mmap_read_pa40_2_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_pa40_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_pa40_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_pa0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, 1250999402496);
//   return xerrno(r);
// }
// ^ See test_mmap_read_paf_0_0
// static int test_mmap_read_pa0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_pa0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_pa0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_pa0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_pa0_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_pa0_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p9e_0_0(void) {
  int* va = (int*) 0x12345600000UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static int test_mmap_read_p9e_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p9e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p9e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_2_proc0
// static void setup_mmap_read_p9e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p9e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p9e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p9d8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p9d8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p9d8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p9d8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_2_proc0
// static void setup_mmap_read_p9d8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p9d8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p9d8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p9d0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p9d0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p9d0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p9d0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc0
// static void setup_mmap_read_p9d0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p9d0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p9d0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p9c_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p9c_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p9c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p9c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_2_proc0
// static void setup_mmap_read_p9c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p9c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p9c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p9a_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p9a_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p9a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p9a_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p9a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p9a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p9a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p98_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p98_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p98_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p98_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_1_proc0
// static void setup_mmap_read_p98_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p98_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p98_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p90_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p90_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p90_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p90_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p90_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p90_0_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p90_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p90_1_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p90_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p90_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p90_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p90_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p90_1_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p90_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p8e_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p8e_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p8e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p8e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p8e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p8e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p8e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p8d8_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p8d8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p8d8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p8d8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p8d8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p8d8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p8d8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p8d0_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p8d0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p8d0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p8d0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p8d0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p8d0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p8d0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p8c_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p8c_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p8c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p8c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p8c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p8c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p8c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p8a_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p8a_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p8a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p8a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p8a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p8a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p8a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p88_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p88_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p88_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p88_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p88_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p88_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p88_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p80_0_0(void) {
//   int* va = (int*) 0x12345600000UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED | MAP_FIXED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p9e_0_0
// static int test_mmap_read_p80_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p80_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p80_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p80_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p80_0_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p80_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p7e_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p7e_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p7e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p7e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p7e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7e_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7e_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p7e_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p7e_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_1_proc0
// static void setup_mmap_read_p7e_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7e_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7e_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7e_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7e_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p7e_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p7e_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_2_proc0
// static void setup_mmap_read_p7e_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7e_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7e_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7e_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7e_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p7e_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p7e_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_8_proc0
// static void setup_mmap_read_p7e_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7e_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7e_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p7e_4_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p7e_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p7e_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p7e_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_1_proc0
// static void setup_mmap_read_p7e_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7e_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7e_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7e_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7e_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p7e_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p7e_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_8_proc0
// static void setup_mmap_read_p7e_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7e_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7e_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7e_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7e_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p7e_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p7e_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_2_proc0
// static void setup_mmap_read_p7e_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7e_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7e_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7e_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7e_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p7e_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p7e_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_0_proc0
// static void setup_mmap_read_p7e_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7e_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7e_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7b8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7b8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p7b8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7b8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7b8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7b8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p7b8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_p7b8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p7b8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p7b8_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7b8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7b8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_2_proc0
// static void setup_mmap_read_p7b8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7b8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7b8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7b8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7b8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p7b8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7b8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7b8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7b8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p7b8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_p7b8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p7b8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p7b8_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7b8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p7b8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_p7b8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p7b8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p7b8_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7b8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7b8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p7b8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7b8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7b8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7b8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7b8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_2_proc0
// static void setup_mmap_read_p7b8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7b8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7b8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7b8_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p7b8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_p7b8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p7b8_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p7b8_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7b8_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7b8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_p7b8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7b8_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7b8_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7b8_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7b8_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p7b8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7b8_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7b8_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7b8_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7b8_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p7b8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7b8_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_p7b8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7b8_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7b8_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7a8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p7a8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p7a8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7a8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7a8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7a8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p7a8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc0
// static void setup_mmap_read_p7a8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p7a8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7a8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7a8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p7a8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc0
// static void setup_mmap_read_p7a8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p7a8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7a8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7a8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7a8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pae8_1_proc0
// static void setup_mmap_read_p7a8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p7a8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7a8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7a8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p7a8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_8_proc0
// static void setup_mmap_read_p7a8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_p7a8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p7a8_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p7a8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p7a8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_9_proc0
// static void setup_mmap_read_p7a8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_p7a8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p7a8_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7a8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p7a8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pae8_1_proc0
// static void setup_mmap_read_p7a8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p7a8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7a8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7a8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p7a8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_8_proc0
// static void setup_mmap_read_p7a8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_p7a8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p7a8_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7a8_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p7a8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p7a8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p7a8_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p7a8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p7a8_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p7a8_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p7a8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_p7a8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_9_proc0
// static void setup_mmap_read_p7a8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_p7a8_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p7a8_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p790_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p790_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p790_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p790_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p790_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p790_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_p790_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_p790_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p790_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p790_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p790_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p790_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_2_proc0
// static void setup_mmap_read_p790_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p790_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p790_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p790_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p790_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p790_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p790_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p790_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p790_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_p790_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_p790_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p790_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p790_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p790_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p790_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p790_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p790_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p790_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p790_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p790_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_2_proc0
// static void setup_mmap_read_p790_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p790_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p790_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p790_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p790_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_p790_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p790_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p790_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p790_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_p790_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_p790_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p790_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p790_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p790_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p790_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_p790_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p790_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p790_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p790_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_p790_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_p790_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p790_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p790_10_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p790_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p790_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p790_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p790_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p790_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p790_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p790_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p76_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p76_0_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p76_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p76_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p76_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p76_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p76_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_2_proc0
// static void setup_mmap_read_p76_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p76_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p76_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p76_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p76_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p76_0_proc0
// static void setup_mmap_read_p76_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p76_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p76_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p76_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p76_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_2_proc0
// static void setup_mmap_read_p76_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p76_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p76_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p76_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
// static void setup_mmap_read_p76_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_proc0
// static void setup_mmap_read_p76_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p76_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p76_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p76_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_13_common
// static void setup_mmap_read_p76_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf4_13_proc0
// static void setup_mmap_read_p76_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p76_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p76_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p76_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_19_common
// static void setup_mmap_read_p76_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbd_1_proc0
// static void setup_mmap_read_p76_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p76_6_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_p76_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p76_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p76_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36270080, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36274176, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p76_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p76_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p76_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p76_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p76_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pad_2_proc0
// static void setup_mmap_read_p76_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p76_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p76_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p76_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
// static void setup_mmap_read_p76_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_proc0
// static void setup_mmap_read_p76_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p76_9_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p76_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p76_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_13_common
// static void setup_mmap_read_p76_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf4_13_proc0
// static void setup_mmap_read_p76_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p76_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p76_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p76_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p76_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p76_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_19_common
// static void setup_mmap_read_p76_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbd_1_proc0
// static void setup_mmap_read_p76_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p76_11_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_p76_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p72_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p72_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_proc0
// static void setup_mmap_read_p72_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p72_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p72_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p72_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p72_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_1_proc0
// static void setup_mmap_read_p72_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p72_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p72_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p72_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_10_common
// static void setup_mmap_read_p72_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_10_proc0
// static void setup_mmap_read_p72_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p72_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p72_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p72_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
// static void setup_mmap_read_p72_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_10_proc0
// static void setup_mmap_read_p72_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p72_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_p72_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p72_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p72_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_1_proc0
// static void setup_mmap_read_p72_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p72_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p72_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p72_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_13_common
// static void setup_mmap_read_p72_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf0_13_proc0
// static void setup_mmap_read_p72_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p72_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p72_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p72_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_12_common
// static void setup_mmap_read_p72_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_12_proc0
// static void setup_mmap_read_p72_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p72_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p72_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p72_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_59_common
// static void setup_mmap_read_p72_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf0_11_proc0
// static void setup_mmap_read_p72_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p72_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p72_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p72_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p72_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_proc0
// static void setup_mmap_read_p72_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p72_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p72_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p72_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_7_common
static void setup_mmap_read_p72_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p72_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p72_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p72_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p72_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_34_common
// static void setup_mmap_read_p72_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf0_13_proc0
// static void setup_mmap_read_p72_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p72_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p72_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p72_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p72_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p72_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_11_common
// static void setup_mmap_read_p72_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf0_11_proc0
// static void setup_mmap_read_p72_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p72_11_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p72_11_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p68_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p68_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p68_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p68_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p68_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p68_0_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p68_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p68_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p68_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p68_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p68_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p68_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p68_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p68_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p68_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p68_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p68_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p68_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p68_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p68_2_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p68_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p68_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p68_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p68_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p68_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p68_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p68_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p68_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5e_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5e_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p5e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p5e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p5e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p5e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5e_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5e_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p5e_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p5e_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p5e_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p5e_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5e_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5b8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p5b8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p5b8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5b8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5b8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p5b8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p5b8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5b8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5b8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p5b8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p5b8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5b8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5b8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p5b8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p5b8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5b8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5b8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p5b8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5b8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5b8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p5b8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_p5b8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p5b8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p5b8_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5b8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p5b8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p5b8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5b8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5b8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p5b8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_p5b8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p5b8_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p5b8_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5b8_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p5b8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5b8_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5b8_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p5b8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_p5b8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p5b8_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p5b8_9_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5b8_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p5b8_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p5b8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5b8_10_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5b8_10_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5b8_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5b8_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p5b8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p5b8_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_p5b8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p5b8_11_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p5b8_11_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5a8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p5a8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p5a8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p5a8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p5a8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5a8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5a8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p5a8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p5a8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_1_proc0
// static void setup_mmap_read_p5a8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p5a8_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5a8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5a8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p5a8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p5a8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p5a8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p5a8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5a8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5a8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p5a8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p5a8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_1_proc0
// static void setup_mmap_read_p5a8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p5a8_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5a8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5a8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p5a8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_p5a8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb68_1_proc0
// static void setup_mmap_read_p5a8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_p5a8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p5a8_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5a8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p5a8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_p5a8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_13_proc0
// static void setup_mmap_read_p5a8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_p5a8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p5a8_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p5a8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p5a8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p5a8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5a8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p5a8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5a8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5a8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
static void setup_mmap_read_p5a8_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 22);
  if (r != 22) setup_error("dup2");
  r = dup2(fds[1], 23);
  if (r != 23) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
  r = pipe2(fds, O_NONBLOCK);
  if (r != 0) setup_error("pipe => %d", r);
  r = dup2(fds[0], 20);
  if (r != 20) setup_error("dup2");
  r = dup2(fds[1], 21);
  if (r != 21) setup_error("dup2");
  close(fds[0]);
  close(fds[1]);
}
// static void setup_mmap_read_p5a8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_6_proc0
// static void setup_mmap_read_p5a8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_6_proc1
// static void setup_mmap_read_p5a8_7_final(void) {
//   unlink("__i0");
//   close(22);
//   close(23);
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pbe8_0_final
// static void setup_mmap_read_p5a8_7_procfinal(void) {
//   close(22);
//   close(23);
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pda0_6_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5a8_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p5a8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_p5a8_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_13_proc0
// static void setup_mmap_read_p5a8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_p5a8_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p5a8_8_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p5a8_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p5a8_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p5a8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p5a8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p5a8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p5a8_9_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p5a8_9_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p590_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p590_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p590_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p590_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p590_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p590_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p590_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p590_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p590_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p590_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p590_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p590_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p590_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p590_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p56_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p56_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p56_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p56_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p56_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p56_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p56_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p56_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p56_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p56_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p56_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p56_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p56_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p56_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p52_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p52_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p52_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p52_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p52_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p52_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p52_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p52_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p52_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p52_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p52_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p52_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p52_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p52_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p48_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_0_0
// static int test_mmap_read_p48_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p48_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p48_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p48_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p48_0_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p48_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p48_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p7e_4_0
// static int test_mmap_read_p48_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p48_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p48_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p48_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p48_1_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p48_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p3f_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(19);
  return xerrno(r);
}
// static int test_mmap_read_p3f_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p3f_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p3f_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_0_proc0
// static void setup_mmap_read_p3f_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3f_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3f_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3f_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3f_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p3f_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_5_common
// static void setup_mmap_read_p3f_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_2_proc0
// static void setup_mmap_read_p3f_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3f_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p3f_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3f_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3f_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p3f_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_2_common
// static void setup_mmap_read_p3f_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_2_proc0
// static void setup_mmap_read_p3f_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3f_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p3f_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3f_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3f_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p3f_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_5_common
// static void setup_mmap_read_p3f_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_3_proc0
// static void setup_mmap_read_p3f_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3f_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p3f_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3f_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3f_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p3f_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_2_common
// static void setup_mmap_read_p3f_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(23, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_3_proc0
// static void setup_mmap_read_p3f_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3f_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p3f_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3f_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3f_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p3f_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p3f_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_1_proc0
// static void setup_mmap_read_p3f_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3f_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3f_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3f_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3f_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p3f_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_1_common
// static void setup_mmap_read_p3f_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_1_proc0
// static void setup_mmap_read_p3f_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3f_6_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p3f_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3f_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3f_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p3f_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_1_common
// static void setup_mmap_read_p3f_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbf_0_proc0
// static void setup_mmap_read_p3f_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3f_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p3f_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3f_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3f_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p3f_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p3f_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p3f_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3f_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3f_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3ec_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3ec_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p3ec_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p3ec_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p3ec_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3ec_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3ec_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3ec_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3ec_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p3ec_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p3ec_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p3ec_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3ec_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p3ec_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3ec_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3ec_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p3ec_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_p3ec_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_p3ec_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3ec_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p3ec_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3ec_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3ec_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p3ec_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_p3ec_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_p3ec_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3ec_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p3ec_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3ec_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3ec_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p3ec_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p3ec_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_p3ec_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3ec_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p3ec_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3ec_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3ec_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p3ec_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p3ec_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_p3ec_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3ec_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p3ec_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3ec_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3ec_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p3ec_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p3ec_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_p3ec_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3ec_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3ec_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3ec_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3ec_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p3ec_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p3ec_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_p3ec_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3ec_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p3ec_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3ec_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3ec_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p3ec_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p3ec_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p3ec_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3ec_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3ec_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3e8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe8_0_common
// static void setup_mmap_read_p3e8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbe8_0_proc0
// static void setup_mmap_read_p3e8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbe8_0_proc1
// static void setup_mmap_read_p3e8_0_final(void) {
//   unlink("__i0");
//   close(22);
//   close(23);
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pbe8_0_final
// static void setup_mmap_read_p3e8_0_procfinal(void) {
//   close(22);
//   close(23);
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pda0_6_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3e8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe8_1_common
// static void setup_mmap_read_p3e8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbe8_0_proc0
// static void setup_mmap_read_p3e8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(22);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbe8_0_proc1
// static void setup_mmap_read_p3e8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(22);
//   close(23);
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pda0_6_final
// static void setup_mmap_read_p3e8_1_procfinal(void) {
//   close(22);
//   close(23);
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pda0_6_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3e8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p3e8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p3e8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3e8_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p3e8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3e8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_p3e8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_9_proc0
// static void setup_mmap_read_p3e8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_p3e8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p3e8_3_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e8_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3e8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p3e8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_9_proc0
// static void setup_mmap_read_p3e8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_5_proc1
// static void setup_mmap_read_p3e8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p3e8_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3e8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_p3e8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  r = dup2(20, 10);
  if (r < 0) setup_error("dup2");
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_p3e8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p3e8_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3e8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p3e8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p3e8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p3e8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p3e8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3e8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3e0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p3e0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p3e0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3e0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3e0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e0_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3e0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p3e0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_0_proc0
// static void setup_mmap_read_p3e0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3e0_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p3e0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e0_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3e0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_2_common
// static void setup_mmap_read_p3e0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_p3e0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3e0_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p3e0_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e0_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3e0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p3e0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_p3e0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3e0_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p3e0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e0_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e0_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3e0_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_2_common
// static void setup_mmap_read_p3e0_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_p3e0_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3e0_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p3e0_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e0_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e0_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3e0_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_p3e0_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc0
// static void setup_mmap_read_p3e0_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3e0_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p3e0_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e0_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e0_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3e0_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p3e0_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_10_proc0
// static void setup_mmap_read_p3e0_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3e0_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3e0_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e0_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e0_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3e0_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_p3e0_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup2(22, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_11_proc0
// static void setup_mmap_read_p3e0_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_1_proc1
// static void setup_mmap_read_p3e0_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p3e0_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3e0_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3e0_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p3e0_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p3e0_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p3e0_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3e0_8_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3e0_8_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3d_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3d_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3d_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_24_common
// static void setup_mmap_read_p3d_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbd_0_proc0
// static void setup_mmap_read_p3d_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3d_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3d_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3d_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3d_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3d_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_19_common
// static void setup_mmap_read_p3d_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbd_1_proc0
// static void setup_mmap_read_p3d_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3d_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_p3d_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3d_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3d_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3d_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_13_common
// static void setup_mmap_read_p3d_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbd_3_proc0
// static void setup_mmap_read_p3d_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3d_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3d_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3d_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3d_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p3d_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_19_common
// static void setup_mmap_read_p3d_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbd_2_proc0
// static void setup_mmap_read_p3d_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3d_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_p3d_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3c0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3c0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3c0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_38_common
// static void setup_mmap_read_p3c0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf0_13_proc0
// static void setup_mmap_read_p3c0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3c0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3c0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3c0_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3c0_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3c0_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_39_common
// static void setup_mmap_read_p3c0_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pf0_11_proc0
// static void setup_mmap_read_p3c0_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3c0_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_p3c0_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3c0_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3c0_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3c0_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_39_common
// static void setup_mmap_read_p3c0_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbc0_3_proc0
// static void setup_mmap_read_p3c0_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3c0_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_p3c0_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p3c0_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p3c0_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p3c0_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_13_common
// static void setup_mmap_read_p3c0_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pbc0_2_proc0
// static void setup_mmap_read_p3c0_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p3c0_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p3c0_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p38_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p38_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p38_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p38_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p38_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p38_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p38_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p38_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p38_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p38_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p38_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p38_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p38_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p38_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p37_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p37_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p37_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p37_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p37_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p37_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p37_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p37_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p37_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p37_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_1_common
// static void setup_mmap_read_p37_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p37_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p37_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p37_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p37_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p37_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p37_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_2_common
// static void setup_mmap_read_p37_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_p37_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb7_2_proc1
// static void setup_mmap_read_p37_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p37_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p37_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p37_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p37_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_1_common
// static void setup_mmap_read_p37_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p37_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p37_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p37_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p37_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p37_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p37_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_2_common
// static void setup_mmap_read_p37_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_p37_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb7_2_proc1
// static void setup_mmap_read_p37_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p37_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p37_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p37_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p37_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_5_common
// static void setup_mmap_read_p37_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_p37_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb7_2_proc1
// static void setup_mmap_read_p37_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p37_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p37_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p37_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p37_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p37_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p37_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p37_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p37_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p37_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p37_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p37_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbf_5_common
// static void setup_mmap_read_p37_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_p37_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(23, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb7_2_proc1
// static void setup_mmap_read_p37_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p37_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p36c_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p36c_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p36c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p36c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p36c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p36c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p36c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p36c_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p36c_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p36c_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p36c_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p36c_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p36c_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p36c_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p36c_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p36c_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p36c_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_p36c_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_p36c_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p36c_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p36c_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p36c_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p36c_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p36c_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p36c_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p36c_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p36c_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p36c_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p36c_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p36c_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p36c_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_7_common
// static void setup_mmap_read_p36c_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_p36c_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p36c_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p36c_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p36c_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p36c_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p36c_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p36c_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_p36c_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p36c_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p36c_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p36c_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p36c_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p36c_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p36c_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p36c_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p36c_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p36c_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p36c_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p36c_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p36c_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_1_common
// static void setup_mmap_read_p36c_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_p36c_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p36c_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p36c_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p368_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p368_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p368_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_p368_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb68_1_proc0
// static void setup_mmap_read_p368_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_p368_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p368_0_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p368_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p368_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p368_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
// static void setup_mmap_read_p368_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb68_1_proc0
// static void setup_mmap_read_p368_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_p368_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p368_1_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p368_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p368_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p368_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_8_common
// static void setup_mmap_read_p368_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_13_proc0
// static void setup_mmap_read_p368_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_p368_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p368_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p368_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p368_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p368_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_p368_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p368_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p368_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p368_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p368_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p368_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p368_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p368_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p368_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p368_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p368_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p368_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p368_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p368_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_8_common
// static void setup_mmap_read_p368_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_13_proc0
// static void setup_mmap_read_p368_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_8_proc1
// static void setup_mmap_read_p368_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p368_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p360_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p360_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p360_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p360_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p360_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p360_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p360_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p360_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p360_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p360_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p360_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p360_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p360_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p360_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p360_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p360_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p360_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_2_common
// static void setup_mmap_read_p360_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_p360_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p360_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p360_2_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p360_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p360_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p360_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p360_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p360_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p360_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p360_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p360_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p360_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p360_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_2_common
// static void setup_mmap_read_p360_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_p360_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p360_4_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pdb0_7_final
// static void setup_mmap_read_p360_4_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p360_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p360_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p360_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_p360_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc0
// static void setup_mmap_read_p360_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p360_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p360_5_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p360_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p360_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p360_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p360_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p360_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p360_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p360_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p360_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p360_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p360_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 22);
//   if (r != 22) setup_error("dup2");
//   r = dup2(fds[1], 23);
//   if (r != 23) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_1_common
// static void setup_mmap_read_p360_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_20_proc0
// static void setup_mmap_read_p360_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(22, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(23);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
//   r = dup(22);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_7_proc1
// static void setup_mmap_read_p360_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_final
// static void setup_mmap_read_p360_7_procfinal(void) {
//   close(20);
//   close(21);
//   close(22);
//   close(23);
// }
// ^ See setup_mmap_read_pfb0_1_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p35_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p35_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p35_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_51_common
// static void setup_mmap_read_p35_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p35_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p35_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p35_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p35_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p35_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p35_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_52_common
// static void setup_mmap_read_p35_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p35_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_1_proc1
// static void setup_mmap_read_p35_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_p35_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p35_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p35_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p35_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_51_common
// static void setup_mmap_read_p35_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p35_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p35_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p35_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p35_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p35_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p35_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf4_52_common
// static void setup_mmap_read_p35_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p35_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_1_proc1
// static void setup_mmap_read_p35_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_p35_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p340_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p340_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p340_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_13_common
// static void setup_mmap_read_p340_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p340_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p340_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p340_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p340_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p340_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p340_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_22_common
// static void setup_mmap_read_p340_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p340_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_1_proc1
// static void setup_mmap_read_p340_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_6_final
// static void setup_mmap_read_p340_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p340_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p340_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p340_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_31_common
// static void setup_mmap_read_p340_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p340_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_1_proc1
// static void setup_mmap_read_p340_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p340_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p340_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p340_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p340_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf0_13_common
// static void setup_mmap_read_p340_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p340_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p340_3_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p340_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p30_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p30_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p30_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p30_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p30_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p30_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p30_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p30_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(19);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p3f_0_0
// static int test_mmap_read_p30_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p30_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p30_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p30_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p30_1_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p30_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2f8_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2f8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2f8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_0_common
// static void setup_mmap_read_p2f8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_paf_0_proc0
// static void setup_mmap_read_p2f8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2f8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2f8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2f8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2f8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2f8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_1_common
// static void setup_mmap_read_p2f8_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_paf_0_proc0
// static void setup_mmap_read_p2f8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2f8_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2f8_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2f8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2f8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2f8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_0_common
// static void setup_mmap_read_p2f8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_8_proc0
// static void setup_mmap_read_p2f8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2f8_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2f8_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2f8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2f8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2f8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_1_common
// static void setup_mmap_read_p2f8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_8_proc0
// static void setup_mmap_read_p2f8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2f8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2f8_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2f8_4_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2f8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2f8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_0_common
// static void setup_mmap_read_p2f8_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_paf_0_proc0
// static void setup_mmap_read_p2f8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2f8_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2f8_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2f8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2f8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2f8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_1_common
// static void setup_mmap_read_p2f8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_paf_0_proc0
// static void setup_mmap_read_p2f8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2f8_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2f8_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2f8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2f8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2f8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_0_common
// static void setup_mmap_read_p2f8_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_8_proc0
// static void setup_mmap_read_p2f8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2f8_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2f8_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2f8_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2f8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2f8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_1_common
// static void setup_mmap_read_p2f8_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_8_proc0
// static void setup_mmap_read_p2f8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2f8_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2f8_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ee_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2ee_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p2ee_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p2ee_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p2ee_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2ee_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2ee_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ee_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2ee_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p2ee_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p2ee_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p2ee_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2ee_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2ee_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ee_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2ee_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p2ee_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p2ee_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p2ee_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2ee_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2ee_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2ee_3_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2ee_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p2ee_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
static void setup_mmap_read_p2ee_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_p2ee_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2ee_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2ee_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ee_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_3_0
// static int test_mmap_read_p2ee_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p2ee_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p2ee_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2ee_3_proc0
// static void setup_mmap_read_p2ee_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2ee_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2ee_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ee_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2ee_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p2ee_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p2ee_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p2ee_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2ee_5_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2ee_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2ee_6_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2ee_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p2ee_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p2ee_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2ee_3_proc0
// static void setup_mmap_read_p2ee_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2ee_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2ee_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ee_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_6_0
// static int test_mmap_read_p2ee_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p2ee_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p2ee_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2ee_3_proc0
// static void setup_mmap_read_p2ee_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2ee_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2ee_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ea_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2ea_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2ea_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p2ea_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_2_proc0
// static void setup_mmap_read_p2ea_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p2ea_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2ea_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ea_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2ea_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2ea_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_p2ea_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_2_proc0
// static void setup_mmap_read_p2ea_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p2ea_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2ea_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ea_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_3_0
// static int test_mmap_read_p2ea_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2ea_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
static void setup_mmap_read_p2ea_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_p2ea_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p2ea_2_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2ea_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ea_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2ea_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2ea_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
static void setup_mmap_read_p2ea_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_p2ea_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p2ea_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2ea_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ea_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_6_0
// static int test_mmap_read_p2ea_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2ea_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p2ea_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2ea_2_proc0
// static void setup_mmap_read_p2ea_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p2ea_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2ea_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ea_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_6_0
// static int test_mmap_read_p2ea_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2ea_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_p2ea_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2ea_2_proc0
// static void setup_mmap_read_p2ea_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p2ea_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2ea_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ea_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_3_0
// static int test_mmap_read_p2ea_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2ea_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p2ea_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2ea_2_proc0
// static void setup_mmap_read_p2ea_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p2ea_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2ea_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2ea_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2ea_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2ea_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p2ea_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2ea_3_proc0
// static void setup_mmap_read_p2ea_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p2ea_7_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2ea_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2e4_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2e4_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2e4_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p2e4_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p2e4_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2e4_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2e4_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2e4_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2e4_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2e4_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p2e4_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p2e4_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2e4_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2e4_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2e4_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2e4_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2e4_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p2e4_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p2e4_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2e4_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2e4_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2e4_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2e4_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2e4_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p2e4_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_5_proc0
// static void setup_mmap_read_p2e4_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2e4_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2e4_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2e4_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2e4_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2e4_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
static void setup_mmap_read_p2e4_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup2(20, 11);
  if (r < 0) setup_error("dup2");
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_p2e4_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2e4_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2e4_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2e4_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2e4_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2e4_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p2e4_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2e4_4_proc0
// static void setup_mmap_read_p2e4_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2e4_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2e4_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2e4_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2e4_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2e4_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p2e4_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2e4_4_proc0
// static void setup_mmap_read_p2e4_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2e4_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p2e4_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2e4_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2e4_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2e4_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p2e4_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p2e4_4_proc0
// static void setup_mmap_read_p2e4_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p2e4_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p2e4_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2d8_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x705000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2d8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p2d8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p76_0_proc0
// static void setup_mmap_read_p2d8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2d8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_p2d8_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_1_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p2d8_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2d8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
// static void setup_mmap_read_p2d8_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p2d8_1_proc0
// static void setup_mmap_read_p2d8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p2d8_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2d8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p2d8_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p2d8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p2d8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2d8_4_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e28000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2d8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p2d8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31612928, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2d8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p2d8_5_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 155648, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_5_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2d8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p2d8_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2d8_7_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x4d5000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2d8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p2d8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p2d8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 5062656, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2d8_8_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e29000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2d8_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_p2d8_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31625216, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p2d8_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e29000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2d8_8_0
// static int test_mmap_read_p2d8_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p2d8_9_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31625216, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2d8_10_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2298000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2d8_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p2d8_10_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36274176, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36274176, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2298000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2d8_10_0
// static int test_mmap_read_p2d8_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p2d8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
static void setup_mmap_read_p2d8_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 36274176, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2d8_12_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e29000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2d8_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p2d8_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p76_0_proc0
// static void setup_mmap_read_p2d8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_13_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e29000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2d8_12_0
// static int test_mmap_read_p2d8_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p2d8_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pad_2_proc0
// static void setup_mmap_read_p2d8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2d8_14_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e26000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2d8_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
static void setup_mmap_read_p2d8_14_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31612928, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2d8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_14_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p2d8_14_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_15_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2d8_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p2d8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p2d8_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p2d8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_15_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2d8_16_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e28000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2d8_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p2d8_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31621120, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pad_2_proc0
// static void setup_mmap_read_p2d8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_16_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2d8_17_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2d8_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p2d8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p2d8_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_proc0
// static void setup_mmap_read_p2d8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2d8_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2d8_17_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x705000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2d8_0_0
// static int test_mmap_read_p2c8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p2c8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_proc0
// static void setup_mmap_read_p2c8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2c8_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
static void setup_mmap_read_p2c8_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 163840, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2c8_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2c8_2_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2c8_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_p2c8_2_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_p2c8_2_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2c8_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_2_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p2c8_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2c8_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
static void setup_mmap_read_p2c8_3_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
// static void setup_mmap_read_p2c8_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p2d8_1_proc0
// static void setup_mmap_read_p2c8_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_p2c8_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2c8_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
static void setup_mmap_read_p2c8_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2c8_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2c8_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_p2c8_3_common
// static void setup_mmap_read_p2c8_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p2d8_1_proc0
// static void setup_mmap_read_p2c8_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_p2c8_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2c8_6_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x5000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2c8_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pac0_2_common
static void setup_mmap_read_p2c8_6_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2c8_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2c8_7_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2c8_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
static void setup_mmap_read_p2c8_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2c8_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_7_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_7_0
// static int test_mmap_read_p2c8_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_3_common
static void setup_mmap_read_p2c8_8_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2c8_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p2c8_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2c8_9_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x5000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2c8_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pac0_2_common
// static void setup_mmap_read_p2c8_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p2c8_6_proc0
// static void setup_mmap_read_p2c8_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2c8_10_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2c8_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_7_common
// static void setup_mmap_read_p2c8_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p72_9_proc0
// static void setup_mmap_read_p2c8_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2c8_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
static void setup_mmap_read_p2c8_11_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 0, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 4096, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2c8_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_12_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_10_0
// static int test_mmap_read_p2c8_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_4_common
static void setup_mmap_read_p2c8_12_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 8192, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 11);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p2c8_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_13_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2c8_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p2c8_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p2c8_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_proc0
// static void setup_mmap_read_p2c8_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_14_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2c8_14_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p2c8_14_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p2c8_14_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p2c8_14_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_14_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_14_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2c8_15_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x3000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2c8_15_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p2c8_15_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_4_common
// static void setup_mmap_read_p2c8_15_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_p2c8_15_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_15_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_15_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2c8_16_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_10_0
// static int test_mmap_read_p2c8_16_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p2c8_16_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_4_common
// static void setup_mmap_read_p2c8_16_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_p2c8_16_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_16_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_16_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p2c8_17_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p2c8_17_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p2c8_17_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_4_common
// static void setup_mmap_read_p2c8_17_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_p2c8_17_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2c8_17_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2c8_17_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2a_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2a_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p2a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_p2a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2a_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2a_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p2a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_p2a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2a_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2a_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2a_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p2a_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p2a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p2a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2a_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2a_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p2a_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p2a_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p2a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p2a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p2a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p2a_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p2a_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p278_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p278_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p278_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_0_common
// static void setup_mmap_read_p278_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p278_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p278_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p278_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p278_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p278_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p278_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_1_common
// static void setup_mmap_read_p278_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p278_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p278_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p278_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p278_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p278_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p278_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_0_common
// static void setup_mmap_read_p278_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p278_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p278_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p278_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p278_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p278_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p278_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_1_common
// static void setup_mmap_read_p278_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p278_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p278_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p278_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p278_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p278_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p278_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_0_common
// static void setup_mmap_read_p278_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p278_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p278_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p278_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p278_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p278_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p278_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_1_common
// static void setup_mmap_read_p278_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p278_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p278_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p278_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p278_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p278_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p278_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_0_common
// static void setup_mmap_read_p278_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p278_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p278_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p278_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p278_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p278_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p278_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_paf_1_common
// static void setup_mmap_read_p278_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p278_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p278_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p278_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26e_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p26e_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p26e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p26e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p26e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p26e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p26e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26e_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p26e_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p26e_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p26e_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p26e_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p26e_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p26e_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26e_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p26e_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p26e_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p26e_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p26e_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p26e_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p26e_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26e_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p26e_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p26e_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p26e_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p26e_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p26e_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p26e_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26e_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_3_0
// static int test_mmap_read_p26e_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p26e_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
static void setup_mmap_read_p26e_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
  r = dup(21);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_p26e_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p26e_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p26e_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26e_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_3_0
// static int test_mmap_read_p26e_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p26e_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p26e_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p26e_4_proc0
// static void setup_mmap_read_p26e_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p26e_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p26e_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26e_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_6_0
// static int test_mmap_read_p26e_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p26e_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p26e_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p26e_4_proc0
// static void setup_mmap_read_p26e_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p26e_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p26e_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26e_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_6_0
// static int test_mmap_read_p26e_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p26e_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pdb0_5_common
// static void setup_mmap_read_p26e_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p26e_4_proc0
// static void setup_mmap_read_p26e_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p26e_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p26e_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26a_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p26a_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p26a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p26a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_1_proc0
// static void setup_mmap_read_p26a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p26a_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p26a_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26a_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p26a_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p26a_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_p26a_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_1_proc0
// static void setup_mmap_read_p26a_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p26a_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p26a_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26a_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p26a_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p26a_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p26a_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_1_proc0
// static void setup_mmap_read_p26a_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p26a_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p26a_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26a_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p26a_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p26a_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_p26a_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_1_proc0
// static void setup_mmap_read_p26a_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p26a_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p26a_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26a_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_3_0
// static int test_mmap_read_p26a_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p26a_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
static void setup_mmap_read_p26a_4_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 31617024, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
  r = dup(20);
  if (r < 0) setup_error("dup");
}
// static void setup_mmap_read_p26a_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p26a_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p26a_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26a_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_3_0
// static int test_mmap_read_p26a_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p26a_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_p26a_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p26a_4_proc0
// static void setup_mmap_read_p26a_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p26a_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p26a_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26a_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_6_0
// static int test_mmap_read_p26a_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p26a_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p26a_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p26a_4_proc0
// static void setup_mmap_read_p26a_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p26a_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p26a_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p26a_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1e27000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2ee_6_0
// static int test_mmap_read_p26a_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p26a_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pda0_5_common
// static void setup_mmap_read_p26a_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 31617024, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_p26a_4_proc0
// static void setup_mmap_read_p26a_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p26a_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p26a_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p264_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p264_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p264_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p264_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p264_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p264_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p264_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p264_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p264_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p264_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p264_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p264_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p264_1_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p264_1_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p264_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p264_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p264_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p264_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p264_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p264_2_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p264_2_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p264_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p264_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p264_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p264_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_1_proc0
// static void setup_mmap_read_p264_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p264_3_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p264_3_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p264_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p264_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p264_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p264_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p264_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p264_4_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p264_4_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p264_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p264_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p264_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p264_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p264_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p264_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p264_5_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p264_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p264_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p264_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p264_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p264_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p264_6_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p264_6_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p264_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p264_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p264_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pbe0_1_common
// static void setup_mmap_read_p264_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pb5_0_proc1
// static void setup_mmap_read_p264_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p264_7_final(void) {
//   unlink("__i0");
//   unlink("__i1");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pf4_32_final
// static void setup_mmap_read_p264_7_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p258_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p258_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_2_0
// static int test_mmap_read_p258_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p258_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_2_0
// static int test_mmap_read_p258_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p258_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p258_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p258_3_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x28000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p258_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p258_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_2_proc0
// static void setup_mmap_read_p258_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 159744, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_2_proc1
// static void setup_mmap_read_p258_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p258_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p258_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p258_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_4_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p258_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
// static void setup_mmap_read_p258_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p258_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_1_proc1
// static void setup_mmap_read_p258_5_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p258_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p258_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p258_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_2_proc0
// static void setup_mmap_read_p258_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p258_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_7_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
// static void setup_mmap_read_p258_7_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_2_proc0
// static void setup_mmap_read_p258_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_1_proc1
// static void setup_mmap_read_p258_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p258_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_2_0
// static int test_mmap_read_p258_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
// static void setup_mmap_read_p258_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p258_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_1_proc1
// static void setup_mmap_read_p258_8_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p258_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_7_0
// static int test_mmap_read_p258_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p258_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p258_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_7_0
// static int test_mmap_read_p258_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_1_common
// static void setup_mmap_read_p258_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p258_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_1_proc1
// static void setup_mmap_read_p258_10_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p258_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x2000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_17_0
// static int test_mmap_read_p258_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p258_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p258_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_12_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_7_0
// static int test_mmap_read_p258_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p258_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p258_13_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p258_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p258_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p258_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p258_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p258_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p248_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1fa2000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p248_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p248_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p248_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p248_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p248_1_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x6000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p248_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pac0_2_common
static void setup_mmap_read_p248_1_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 24576, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_mmap_read_p248_1_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 20480, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p248_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p248_2_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x4000UL);
  
  return xerrno(r);
}
// static int test_mmap_read_p248_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_7_common
// static void setup_mmap_read_p248_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_p248_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_6_proc1
// static void setup_mmap_read_p248_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x4000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p248_2_0
// static int test_mmap_read_p248_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_45_common
static void setup_mmap_read_p248_3_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 16384, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
static void setup_mmap_read_p248_3_proc1(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i1", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 12288, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p248_3_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p248_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_4_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x5000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_9_0
// static int test_mmap_read_p248_4_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_4_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_45_common
// static void setup_mmap_read_p248_4_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p248_1_proc1
// static void setup_mmap_read_p248_4_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p248_3_proc1
// static void setup_mmap_read_p248_4_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p248_4_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_5_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_2_0
// static int test_mmap_read_p248_5_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_5_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i1", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_2_common
// static void setup_mmap_read_p248_5_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p248_5_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_1_proc1
// static void setup_mmap_read_p248_5_final(void) {
//   unlink("__i0");
//   unlink("__i1");
// }
// ^ See setup_mmap_read_pf4_9_final
// static void setup_mmap_read_p248_5_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_6_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x5000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_9_0
// static int test_mmap_read_p248_6_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_6_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_12_common
// static void setup_mmap_read_p248_6_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 16384, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p248_3_proc0
// static void setup_mmap_read_p248_6_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p248_1_proc0
// static void setup_mmap_read_p248_6_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_6_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_7_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x1000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_7_0
// static int test_mmap_read_p248_7_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
static void setup_mmap_read_p248_7_common(void) {
  int fd __attribute__((unused));
  int fds[2] __attribute__((unused));
  int r __attribute__((unused));
  char c __attribute__((unused));
  fd = open("__i1", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i1", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
  fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
  if (fd < 0) setup_error("open");
  write(fd, "x", 1);
  close(fd);
  fd = open("__i0", O_TRUNC | O_RDWR);
  if (fd < 0) setup_error("open");
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  r = write(fd, dataval0, 4096);
  if (r != 4096) setup_error("write => %d", r);
  close(fd);
}
static void setup_mmap_read_p248_7_proc0(void) {
  int fd __attribute__((unused));
  int r __attribute__((unused));
  fd = open("__i0", O_RDWR);
  if (fd < 0) setup_error("open");
  r = lseek(fd, 1847296, SEEK_SET);
  if (fd >= 0 && r < 0) setup_error("lseek");
  r = dup2(fd, 10);
  if (fd >= 0 && r < 0) setup_error("dup2");
  close(fd);
}
// static void setup_mmap_read_p248_7_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i1", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa5_1_proc1
// static void setup_mmap_read_p248_7_final(void) {
//   unlink("__i1");
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_1_final
// static void setup_mmap_read_p248_7_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_8_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x5000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_6_0
// static int test_mmap_read_p248_8_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_8_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pac0_2_common
// static void setup_mmap_read_p248_8_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 24576, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p248_1_proc0
// static void setup_mmap_read_p248_8_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 20480, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p248_1_proc1
// static void setup_mmap_read_p248_8_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_8_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_9_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x3000UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2c8_15_0
// static int test_mmap_read_p248_9_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_9_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_7_common
// static void setup_mmap_read_p248_9_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_p248_9_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 12288, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_6_proc1
// static void setup_mmap_read_p248_9_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_9_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_10_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p248_10_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_10_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p248_10_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p248_10_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p248_10_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_10_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_11_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p248_11_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_11_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p248_11_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p248_11_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p248_11_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_11_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_12_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p248_12_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_12_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p248_12_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p248_12_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 4096, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pd0_4_proc1
// static void setup_mmap_read_p248_12_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_12_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p248_13_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p248_13_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p248_13_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p248_13_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p248_13_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p248_13_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p248_13_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p22_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p22_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p22_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p22_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_p22_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p22_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p22_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p22_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p22_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p22_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p22_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 8192, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pa8_0_proc0
// static void setup_mmap_read_p22_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p22_1_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p22_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p22_2_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_0_0
// static int test_mmap_read_p22_2_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p22_2_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p22_2_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p22_2_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p22_2_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p22_2_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p22_3_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, 10, 0x0UL);
//   
//   return xerrno(r);
// }
// ^ See test_mmap_read_p2f8_4_0
// static int test_mmap_read_p22_3_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p22_3_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_29_common
// static void setup_mmap_read_p22_3_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p22_3_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p22_3_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p22_3_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
static int test_mmap_read_p1e_0_0(void) {
  int* va = (int*) 0x0UL;
  long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
  expect_result("r", r, -1);
  expect_errno(9);
  return xerrno(r);
}
// static int test_mmap_read_p1e_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p1e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p1e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_2_proc0
// static void setup_mmap_read_p1e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p1e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p1e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p1d8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p1d8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfb0_0_1
// static void setup_mmap_read_p1d8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p1d8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_2_proc0
// static void setup_mmap_read_p1d8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p1d8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p1d8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p1d0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p1d0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p1d0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p1d0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc0
// static void setup_mmap_read_p1d0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p1d0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p1d0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p1c_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p1c_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p1c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p1c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 11);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfb0_2_proc0
// static void setup_mmap_read_p1c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p1c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p1c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p1a_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p1a_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfa0_0_1
// static void setup_mmap_read_p1a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p1a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 155648, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_p9a_0_proc0
// static void setup_mmap_read_p1a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p1a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p1a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p18_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p18_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pf8_0_1
// static void setup_mmap_read_p18_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p18_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 11);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_1_proc0
// static void setup_mmap_read_p18_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p18_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p18_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p10_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p10_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(11, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_1_1
// static void setup_mmap_read_p10_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p10_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p10_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p10_0_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p10_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p10_1_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p10_1_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p10_1_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p10_1_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p10_1_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p10_1_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p10_1_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p0e_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p0e_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p0e_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfc_0_common
// static void setup_mmap_read_p0e_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p0e_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(21, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc0
// static void setup_mmap_read_p0e_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p0e_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p0d8_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p0d8_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(11);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pdb0_0_1
// static void setup_mmap_read_p0d8_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfb0_0_common
// static void setup_mmap_read_p0d8_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p0d8_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p0d8_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p0d8_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p0d0_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p0d0_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p0d0_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pfa0_1_common
// static void setup_mmap_read_p0d0_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfa0_1_proc1
// static void setup_mmap_read_p0d0_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pda0_0_proc1
// static void setup_mmap_read_p0d0_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p0d0_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p0c_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p0c_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p0c_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
//   r = pipe2(fds, O_NONBLOCK);
//   if (r != 0) setup_error("pipe => %d", r);
//   r = dup2(fds[0], 20);
//   if (r != 20) setup_error("dup2");
//   r = dup2(fds[1], 21);
//   if (r != 21) setup_error("dup2");
//   r = write(fds[1], dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fds[0]);
//   close(fds[1]);
// }
// ^ See setup_mmap_read_pf8_0_common
// static void setup_mmap_read_p0c_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pfc_0_proc1
// static void setup_mmap_read_p0c_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   r = dup2(20, 10);
//   if (r < 0) setup_error("dup2");
//   r = dup(20);
//   if (r < 0) setup_error("dup");
//   r = dup(21);
//   if (r < 0) setup_error("dup");
// }
// ^ See setup_mmap_read_pdb0_0_proc1
// static void setup_mmap_read_p0c_0_final(void) {
//   unlink("__i0");
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_final
// static void setup_mmap_read_p0c_0_procfinal(void) {
//   close(20);
//   close(21);
// }
// ^ See setup_mmap_read_pfc_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p0a_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p0a_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pda0_0_1
// static void setup_mmap_read_p0a_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   close(fd);
// }
// ^ See setup_mmap_read_pf4_0_common
// static void setup_mmap_read_p0a_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p0a_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p0a_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p0a_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p08_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p08_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, 4096);
//   expect_result("data[0]", data[0], 0);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pd8_0_1
// static void setup_mmap_read_p08_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
//   fd = open("__i0", O_CREAT | O_TRUNC | O_RDWR, 0666);
//   if (fd < 0) setup_error("open");
//   write(fd, "x", 1);
//   close(fd);
//   fd = open("__i0", O_TRUNC | O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = write(fd, dataval0, 4096);
//   if (r != 4096) setup_error("write => %d", r);
//   close(fd);
// }
// ^ See setup_mmap_read_pf0_0_common
// static void setup_mmap_read_p08_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p08_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
//   fd = open("__i0", O_RDWR);
//   if (fd < 0) setup_error("open");
//   r = lseek(fd, 0, SEEK_SET);
//   if (fd >= 0 && r < 0) setup_error("lseek");
//   r = dup2(fd, 10);
//   if (fd >= 0 && r < 0) setup_error("dup2");
//   close(fd);
// }
// ^ See setup_mmap_read_pe0_1_proc0
// static void setup_mmap_read_p08_0_final(void) {
//   unlink("__i0");
// }
// ^ See setup_mmap_read_pf4_0_final
// static void setup_mmap_read_p08_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

/*
 * calls: mmap read
 */
// static int test_mmap_read_p00_0_0(void) {
//   int* va = (int*) 0x0UL;
//   long r = (intptr_t) mmap(va, 4096, PROT_READ, MAP_SHARED, 10, 0x0UL);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   return xerrno(r);
// }
// ^ See test_mmap_read_p1e_0_0
// static int test_mmap_read_p00_0_1(void) {
//   char *data = datavalbuf;
//   ssize_t r = read(10, data, 4096);
//   expect_result("r", r, -1);
//   expect_errno(9);
//   if (r < 0) return xerrno(r);
//   return data[0];
// }
// ^ See test_mmap_read_pfc_0_1
// static void setup_mmap_read_p00_0_common(void) {
//   int fd __attribute__((unused));
//   int fds[2] __attribute__((unused));
//   int r __attribute__((unused));
//   char c __attribute__((unused));
// }
// ^ See setup_mmap_read_pe0_0_common
// static void setup_mmap_read_p00_0_proc0(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p00_0_proc1(void) {
//   int fd __attribute__((unused));
//   int r __attribute__((unused));
// }
// ^ See setup_mmap_read_pf4_0_proc1
// static void setup_mmap_read_p00_0_final(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal
// static void setup_mmap_read_p00_0_procfinal(void) {
//   
// }
// ^ See setup_mmap_read_pf4_0_procfinal

//+++ common
static void cleanup(void) {
  unlink("__f0");
  unlink("__f1");
  unlink("__f2");
  unlink("__f3");
  unlink("__f4");
  unlink("__f5");
}

struct fstest fstests[] = {
//+++ tests
  { "fs-mmap_read_pfc_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_1",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_2",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_3",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_3_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_4",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_4_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_5",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_6",
    &setup_mmap_read_pfc_6_common,
    { { &setup_mmap_read_pfc_6_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_7",
    &setup_mmap_read_pfc_6_common,
    { { &setup_mmap_read_pfc_7_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_8",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_8_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_9",
    &setup_mmap_read_pfc_6_common,
    { { &setup_mmap_read_pfc_9_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_10",
    &setup_mmap_read_pfc_6_common,
    { { &setup_mmap_read_pfc_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_11",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_11_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_12",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_12_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_13",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_13_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_14",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_14_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_15",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_15_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_16",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_16_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_17",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_17_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_18",
    &setup_mmap_read_pfc_6_common,
    { { &setup_mmap_read_pfc_18_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_19",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_19_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_20",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_20_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_21",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_21_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_22",
    &setup_mmap_read_pfc_6_common,
    { { &setup_mmap_read_pfc_22_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_23",
    &setup_mmap_read_pfc_6_common,
    { { &setup_mmap_read_pfc_23_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_24",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_24_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_25",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_25_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfc_26",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_26_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_1",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_2",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_3",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_3_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_4",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_4_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_5",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_6_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_7",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_7_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_8",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_8_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_9",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pfb0_9_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_10",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_11",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_12",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pfb0_12_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_13",
    &setup_mmap_read_pfb0_13_common,
    { { &setup_mmap_read_pfb0_13_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_14",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pfb0_14_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_15",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pfb0_15_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_16",
    &setup_mmap_read_pfb0_13_common,
    { { &setup_mmap_read_pfb0_16_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_17",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_17_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_18",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_18_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_19",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pfb0_19_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_20",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pfb0_20_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_21",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_21_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_22",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pfb0_22_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_23",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_23_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_24",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_24_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_25",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_25_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_26",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_26_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_27",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_27_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_28",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_28_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_29",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_29_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_30",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_30_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_31",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_31_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_32",
    &setup_mmap_read_pfb0_13_common,
    { { &setup_mmap_read_pfb0_32_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_33",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pfb0_33_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_34",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_34_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_35",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_35_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_36",
    &setup_mmap_read_pfb0_13_common,
    { { &setup_mmap_read_pfb0_36_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_37",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_37_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_38",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_38_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_39",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_39_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_40",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_40_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfb0_41",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_41_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_1",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_1_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_2",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_2_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_3",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_3_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_4",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_4_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_5",
    &setup_mmap_read_pfb0_13_common,
    { { &setup_mmap_read_pfa0_5_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_6",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_6_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_7",
    &setup_mmap_read_pfa0_7_common,
    { { &setup_mmap_read_pfa0_7_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_8",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pfa0_8_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_9",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pfa0_9_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_10",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfa0_10_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_11",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_11_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_12",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfa0_12_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_13",
    &setup_mmap_read_pfa0_7_common,
    { { &setup_mmap_read_pfa0_13_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_14",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_14_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_15",
    &setup_mmap_read_pfa0_7_common,
    { { &setup_mmap_read_pfa0_15_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_16",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_16_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_17",
    &setup_mmap_read_pfa0_7_common,
    { { &setup_mmap_read_pfa0_17_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_18",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pfa0_18_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_19",
    &setup_mmap_read_pfa0_19_common,
    { { &setup_mmap_read_pfa0_19_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_20",
    &setup_mmap_read_pfa0_7_common,
    { { &setup_mmap_read_pfa0_20_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_21",
    &setup_mmap_read_pfa0_19_common,
    { { &setup_mmap_read_pfa0_21_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_22",
    &setup_mmap_read_pfa0_19_common,
    { { &setup_mmap_read_pfa0_22_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_23",
    &setup_mmap_read_pfa0_7_common,
    { { &setup_mmap_read_pfa0_23_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_24",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pfa0_24_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_25",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pfa0_25_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_26",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfa0_26_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_27",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_27_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_28",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pfa0_28_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_29",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfb0_27_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_30",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfa0_30_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_31",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_31_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_32",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfa0_32_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_33",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_37_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pfa0_34",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pfa0_34_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_1",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_2",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_3",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_3_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_4",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_4_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_5",
    &setup_mmap_read_pf8_5_common,
    { { &setup_mmap_read_pfb0_13_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_6",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pfb0_9_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_7",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_8",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_9",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_10",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pfb0_14_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_11",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pfb0_15_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_12",
    &setup_mmap_read_pf8_5_common,
    { { &setup_mmap_read_pfb0_16_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_13",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pfb0_12_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_14",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_7_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_15",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_8_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_16",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_17_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_17",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_18_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_18",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pfb0_20_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_19",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_23_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_20",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_24_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_21",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_25_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_22",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_26_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_23",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_34_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_24",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pfb0_19_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_25",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pfb0_22_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_26",
    &setup_mmap_read_pf8_5_common,
    { { &setup_mmap_read_pfb0_32_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_27",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pfb0_33_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_28",
    &setup_mmap_read_pf8_5_common,
    { { &setup_mmap_read_pfb0_36_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_13_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_29",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_31_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_30",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_30_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_31",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_41_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_32",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_35_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_33",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_6_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_34",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_27_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_35",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_28_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_36",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_29_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_37",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_37_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_38",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_21_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_39",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_38_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_40",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_39_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf8_41",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_40_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_1",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_2",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_3",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_3_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_4",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_4_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_5",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_5_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_6",
    &setup_mmap_read_pf4_6_common,
    { { &setup_mmap_read_pf4_6_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_7",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_7_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_8",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_8_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_9",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pf4_9_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_10",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_10_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_11",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_11_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_12",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pf4_12_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_13",
    &setup_mmap_read_pf4_13_common,
    { { &setup_mmap_read_pf4_13_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_14",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_14_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_15",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_15_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_16",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_16_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_17",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pf4_17_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_18",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_18_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_19",
    &setup_mmap_read_pf4_19_common,
    { { &setup_mmap_read_pf4_19_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_20",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_20_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_21",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_21_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_22",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pf4_22_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_23",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pf4_23_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_24",
    &setup_mmap_read_pf4_24_common,
    { { &setup_mmap_read_pf4_24_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_25",
    &setup_mmap_read_pf4_25_common,
    { { &setup_mmap_read_pf4_25_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_26",
    &setup_mmap_read_pf4_26_common,
    { { &setup_mmap_read_pf4_26_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_26_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_27",
    &setup_mmap_read_pf4_25_common,
    { { &setup_mmap_read_pf4_27_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_28",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pf4_28_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_29",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_29_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_30",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_30_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_31",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_31_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_32",
    &setup_mmap_read_pf4_32_common,
    { { &setup_mmap_read_pf4_32_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_33",
    &setup_mmap_read_pf4_32_common,
    { { &setup_mmap_read_pf4_33_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_34",
    &setup_mmap_read_pf4_24_common,
    { { &setup_mmap_read_pf4_34_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_35",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_35_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_36",
    &setup_mmap_read_pf4_24_common,
    { { &setup_mmap_read_pf4_36_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_37",
    &setup_mmap_read_pf4_25_common,
    { { &setup_mmap_read_pf4_37_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_38",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_38_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_39",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_39_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_40",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_40_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_41",
    &setup_mmap_read_pf4_6_common,
    { { &setup_mmap_read_pf4_41_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_42",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_42_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_43",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_43_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_44",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pf4_44_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_45",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pf4_45_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_46",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pf4_46_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_47",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_47_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_48",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_48_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_49",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_49_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_50",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_50_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_51",
    &setup_mmap_read_pf4_51_common,
    { { &setup_mmap_read_pf4_51_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_52",
    &setup_mmap_read_pf4_52_common,
    { { &setup_mmap_read_pf4_52_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_53",
    &setup_mmap_read_pf4_53_common,
    { { &setup_mmap_read_pf4_53_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_26_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_54",
    &setup_mmap_read_pf4_54_common,
    { { &setup_mmap_read_pf4_54_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_55",
    &setup_mmap_read_pf4_52_common,
    { { &setup_mmap_read_pf4_55_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_56",
    &setup_mmap_read_pf4_56_common,
    { { &setup_mmap_read_pf4_56_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_57",
    &setup_mmap_read_pf4_13_common,
    { { &setup_mmap_read_pf4_57_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_58",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_58_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_59",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_59_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_60",
    &setup_mmap_read_pf4_13_common,
    { { &setup_mmap_read_pf4_60_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf4_61",
    &setup_mmap_read_pf4_19_common,
    { { &setup_mmap_read_pf4_61_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_1",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_2",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_3",
    &setup_mmap_read_pf0_3_common,
    { { &setup_mmap_read_pf0_3_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_4",
    &setup_mmap_read_pf0_4_common,
    { { &setup_mmap_read_pf0_4_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_5",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_5_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_6",
    &setup_mmap_read_pf0_6_common,
    { { &setup_mmap_read_pf0_6_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf0_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_7",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_pf0_7_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_8",
    &setup_mmap_read_pf0_8_common,
    { { &setup_mmap_read_pf0_8_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_9",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_9_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_10",
    &setup_mmap_read_pf0_10_common,
    { { &setup_mmap_read_pf0_10_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_11",
    &setup_mmap_read_pf0_11_common,
    { { &setup_mmap_read_pf0_11_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_12",
    &setup_mmap_read_pf0_12_common,
    { { &setup_mmap_read_pf0_12_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_13",
    &setup_mmap_read_pf0_13_common,
    { { &setup_mmap_read_pf0_13_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_14",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_14_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_15",
    &setup_mmap_read_pf0_10_common,
    { { &setup_mmap_read_pf0_15_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_16",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_16_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_17",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_17_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_18",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_18_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_19",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_19_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_20",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_20_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_21",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_21_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_22",
    &setup_mmap_read_pf0_22_common,
    { { &setup_mmap_read_pf0_22_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_23",
    &setup_mmap_read_pf0_23_common,
    { { &setup_mmap_read_pf0_23_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf0_23_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_24",
    &setup_mmap_read_pf0_11_common,
    { { &setup_mmap_read_pf0_24_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_25",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_25_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_26",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_26_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_27",
    &setup_mmap_read_pf0_12_common,
    { { &setup_mmap_read_pf0_27_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_28",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_28_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_29",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pf0_29_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_30",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_30_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_31",
    &setup_mmap_read_pf0_31_common,
    { { &setup_mmap_read_pf0_31_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_32",
    &setup_mmap_read_pf0_11_common,
    { { &setup_mmap_read_pf0_32_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_33",
    &setup_mmap_read_pf0_13_common,
    { { &setup_mmap_read_pf0_33_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_34",
    &setup_mmap_read_pf0_34_common,
    { { &setup_mmap_read_pf0_34_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_35",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_35_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_36",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_36_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_37",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_37_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_38",
    &setup_mmap_read_pf0_38_common,
    { { &setup_mmap_read_pf0_38_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_39",
    &setup_mmap_read_pf0_39_common,
    { { &setup_mmap_read_pf0_39_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_40",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_40_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_41",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_41_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_42",
    &setup_mmap_read_pf0_42_common,
    { { &setup_mmap_read_pf0_42_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_43",
    &setup_mmap_read_pf0_8_common,
    { { &setup_mmap_read_pf0_43_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_44",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_pf0_44_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_45",
    &setup_mmap_read_pf0_45_common,
    { { &setup_mmap_read_pf0_45_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_46",
    &setup_mmap_read_pf0_8_common,
    { { &setup_mmap_read_pf0_46_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_47",
    &setup_mmap_read_pf0_47_common,
    { { &setup_mmap_read_pf0_47_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_48",
    &setup_mmap_read_pf0_8_common,
    { { &setup_mmap_read_pf0_48_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_49",
    &setup_mmap_read_pf0_49_common,
    { { &setup_mmap_read_pf0_49_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_50",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_pf0_50_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_51",
    &setup_mmap_read_pf0_47_common,
    { { &setup_mmap_read_pf0_51_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_52",
    &setup_mmap_read_pf0_4_common,
    { { &setup_mmap_read_pf0_52_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_53",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pf0_53_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_54",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pf0_54_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_55",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_55_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_56",
    &setup_mmap_read_pf0_56_common,
    { { &setup_mmap_read_pf0_56_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf0_56_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_57",
    &setup_mmap_read_pf0_11_common,
    { { &setup_mmap_read_pf0_57_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_58",
    &setup_mmap_read_pf0_39_common,
    { { &setup_mmap_read_pf0_58_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_59",
    &setup_mmap_read_pf0_59_common,
    { { &setup_mmap_read_pf0_59_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_60",
    &setup_mmap_read_pf0_60_common,
    { { &setup_mmap_read_pf0_60_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pf0_61",
    &setup_mmap_read_pf0_34_common,
    { { &setup_mmap_read_pf0_61_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_0",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_1",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_2",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pe0_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_3",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_3_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_4",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pe0_4_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_5",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_5_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_6",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_6_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_7",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_7_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_8",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_8_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pe0_9",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_9_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pdc_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdc_1",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdc_1_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdc_2",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdc_2_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdc_3",
    &setup_mmap_read_pfc_6_common,
    { { &setup_mmap_read_pdc_3_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdc_4",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdc_4_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdc_5",
    &setup_mmap_read_pfc_6_common,
    { { &setup_mmap_read_pdc_5_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdc_6",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdc_6_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_1",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_2",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdc_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_3",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_3_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_4",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pdb0_4_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_5",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_5_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_6",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_7",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_8",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_8_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_9",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdc_4_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_10",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_10_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_11",
    &setup_mmap_read_pfb0_9_common,
    { { &setup_mmap_read_pdb0_11_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_12",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_12_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_13",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_13_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_14",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_13_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_15",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_15_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_16",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_16_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_17",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_17_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_18",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_18_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_19",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_20",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_21",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_5_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_22",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_8_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_23",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_15_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_24",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_24_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_25",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_25_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_26",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_24_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_27",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_25_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_28",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_28_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_29",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_28_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_30",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_30_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_31",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_31_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_32",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_32_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_33",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_33_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_34",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_34_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_35",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_34_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_36",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_36_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_37",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_36_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_38",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_33_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_39",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_14_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_40",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_40_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pdb0_41",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_41_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_1_proc1 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_1",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_1_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_2",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_2_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_3",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pda0_3_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_4",
    &setup_mmap_read_pfa0_7_common,
    { { &setup_mmap_read_pda0_4_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_5",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pda0_5_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_6",
    &setup_mmap_read_pda0_6_common,
    { { &setup_mmap_read_pda0_6_proc0 }, { &setup_mmap_read_pda0_6_proc1 } },
    &setup_mmap_read_pda0_6_procfinal,
    &setup_mmap_read_pda0_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_7",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_8",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pda0_8_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_9",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_9_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_10",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_10_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_11",
    &setup_mmap_read_pfa0_7_common,
    { { &setup_mmap_read_pda0_11_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_12",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_12_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_13",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_13_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_14",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_14_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_15",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pda0_14_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_16",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_16_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_17",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pda0_16_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_18",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pda0_18_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_19",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_5_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_20",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_8_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_21",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_18_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_22",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_22_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_23",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pda0_22_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_24",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pda0_24_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_25",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pda0_25_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_26",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pda0_26_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_27",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pdb0_30_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_28",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_28_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_29",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_29_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_30",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pda0_29_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_31",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_31_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_32",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pda0_31_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_33",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pdb0_41_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pda0_34",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_34_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd8_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd8_1",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdc_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd8_2",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdb0_3_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd8_3",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pdb0_4_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd8_4",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdc_4_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd8_5",
    &setup_mmap_read_pf8_6_common,
    { { &setup_mmap_read_pdb0_11_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd8_6",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdb0_10_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd4_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd4_1",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_2_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd4_2",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pd4_2_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd4_3",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pd4_3_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd4_4",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_4_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd4_5",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pd4_5_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd4_6",
    &setup_mmap_read_pf4_9_common,
    { { &setup_mmap_read_pd4_6_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd4_7",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_3_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd4_8",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_5_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd0_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd0_1",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pe0_2_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd0_2",
    &setup_mmap_read_pf0_10_common,
    { { &setup_mmap_read_pd0_2_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd0_3",
    &setup_mmap_read_pf0_10_common,
    { { &setup_mmap_read_pd0_3_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd0_4",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pd0_4_proc0 }, { &setup_mmap_read_pd0_4_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd0_5",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pe0_3_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd0_6",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_pd0_6_proc0 }, { &setup_mmap_read_pd0_6_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd0_7",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_pe0_4_proc0 }, { &setup_mmap_read_pd0_6_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pd0_8",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pe0_5_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pc0_0",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pc0_1",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pe0_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pc0_2",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_3_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pc0_3",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pe0_4_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pc0_4",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_5_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_pfc_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pbf_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pbf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbf_1",
    &setup_mmap_read_pbf_1_common,
    { { &setup_mmap_read_pbf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbf_2",
    &setup_mmap_read_pbf_2_common,
    { { &setup_mmap_read_pbf_2_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbf_3",
    &setup_mmap_read_pbf_2_common,
    { { &setup_mmap_read_pbf_3_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbf_4",
    &setup_mmap_read_pbf_1_common,
    { { &setup_mmap_read_pfc_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbf_5",
    &setup_mmap_read_pbf_5_common,
    { { &setup_mmap_read_pbf_2_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbf_6",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbf_7",
    &setup_mmap_read_pbf_5_common,
    { { &setup_mmap_read_pbf_3_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbf_8",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbec_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbec_1",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbec_2",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbec_3",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbec_4",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbec_5",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbec_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbec_7",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbec_8",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe8_0",
    &setup_mmap_read_pbe8_0_common,
    { { &setup_mmap_read_pbe8_0_proc0 }, { &setup_mmap_read_pbe8_0_proc1 } },
    &setup_mmap_read_pda0_6_procfinal,
    &setup_mmap_read_pbe8_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe8_1",
    &setup_mmap_read_pbe8_1_common,
    { { &setup_mmap_read_pbe8_0_proc0 }, { &setup_mmap_read_pbe8_0_proc1 } },
    &setup_mmap_read_pda0_6_procfinal,
    &setup_mmap_read_pda0_6_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe8_2",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe8_3",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe8_4",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe8_5",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pfa0_9_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe8_6",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pfa0_9_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe0_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe0_1",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe0_2",
    &setup_mmap_read_pbe0_2_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe0_3",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe0_4",
    &setup_mmap_read_pbe0_2_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe0_5",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe0_6",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe0_7",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbe0_8",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbd_0",
    &setup_mmap_read_pf4_24_common,
    { { &setup_mmap_read_pbd_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbd_1",
    &setup_mmap_read_pf4_19_common,
    { { &setup_mmap_read_pbd_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbd_2",
    &setup_mmap_read_pf4_19_common,
    { { &setup_mmap_read_pbd_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbd_3",
    &setup_mmap_read_pf4_13_common,
    { { &setup_mmap_read_pbd_3_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbc0_0",
    &setup_mmap_read_pf0_13_common,
    { { &setup_mmap_read_pf0_13_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbc0_1",
    &setup_mmap_read_pf0_39_common,
    { { &setup_mmap_read_pf0_11_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbc0_2",
    &setup_mmap_read_pf0_38_common,
    { { &setup_mmap_read_pbc0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pbc0_3",
    &setup_mmap_read_pf0_22_common,
    { { &setup_mmap_read_pbc0_3_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pb8_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pb8_1",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pb7_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb7_1",
    &setup_mmap_read_pbf_1_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb7_2",
    &setup_mmap_read_pbf_2_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pb7_2_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb7_3",
    &setup_mmap_read_pbf_1_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb7_4",
    &setup_mmap_read_pbf_2_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pb7_2_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb7_5",
    &setup_mmap_read_pbf_5_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pb7_2_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb7_6",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb7_7",
    &setup_mmap_read_pbf_5_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pb7_2_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb6c_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb6c_1",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb6c_2",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb6c_3",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb6c_4",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb6c_5",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb6c_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb6c_7",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb68_0",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pb68_0_proc0 }, { &setup_mmap_read_pb68_0_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb68_1",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pb68_1_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb68_2",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_13_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb68_3",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pda0_13_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb68_4",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_0_proc1 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb68_5",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pda0_0_proc1 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb60_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb60_1",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb60_2",
    &setup_mmap_read_pbe0_2_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb60_3",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb60_4",
    &setup_mmap_read_pbe0_2_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb60_5",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb60_6",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb60_7",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb5_0",
    &setup_mmap_read_pf4_51_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pb5_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb5_1",
    &setup_mmap_read_pf4_52_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pb5_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb5_2",
    &setup_mmap_read_pf4_51_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pb5_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb5_3",
    &setup_mmap_read_pf4_52_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pb5_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb40_0",
    &setup_mmap_read_pf0_13_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pb5_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb40_1",
    &setup_mmap_read_pf0_31_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pb5_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb40_2",
    &setup_mmap_read_pf0_31_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pb5_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb40_3",
    &setup_mmap_read_pf0_34_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pb5_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb0_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pb0_1",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_pbf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_paf_0",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_paf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_paf_1",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_paf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_paec_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_paec_1",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pae8_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_2_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pae8_1",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pae8_1_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pae0_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pae0_1",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pad_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pad_1",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pad_2",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pad_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pad_3",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pad_3_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pac0_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pac0_1",
    &setup_mmap_read_pac0_1_common,
    { { &setup_mmap_read_pac0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pac0_2",
    &setup_mmap_read_pac0_2_common,
    { { &setup_mmap_read_pac0_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pac0_3",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pa8_0",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_pa7_0",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa7_1",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa6c_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa6c_1",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa68_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_1_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa68_1",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pda0_1_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa60_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa60_1",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa5_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa5_1",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pa5_1_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa5_2",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pa5_2_proc0 }, { &setup_mmap_read_pa5_2_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa40_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa40_1",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pd0_6_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa40_2",
    &setup_mmap_read_pf0_3_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pa40_2_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_pa0_0",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_paf_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p9e_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p9d8_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p9d0_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_1_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p9c_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p9a_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p9a_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p98_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p90_0",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p90_1",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p8e_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p8d8_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p8d0_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_1_proc1 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p8c_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p8a_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p88_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p80_0",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p9e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p7e_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7e_1",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7e_2",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7e_3",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_8_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7e_4",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7e_5",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_8_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7e_6",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7e_7",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pbf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_1",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_2",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_3",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_4",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_5",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_7",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_8",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_9",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_10",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7b8_11",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_1",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_1_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_2",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_1_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_3",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pae8_1_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_4",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfa0_8_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_5",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfa0_9_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pae8_1_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_7",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfa0_8_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_8",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p7a8_9",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pfa0_9_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_1",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_2",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_3",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_4",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_5",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_6",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_7",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_8",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_9",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_10",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p790_11",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p76_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_1",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_2",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p76_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_3",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_4",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_5",
    &setup_mmap_read_pf4_13_common,
    { { &setup_mmap_read_pf4_13_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_6",
    &setup_mmap_read_pf4_19_common,
    { { &setup_mmap_read_pbd_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_7",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p76_7_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_8",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pad_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_9",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pf4_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_10",
    &setup_mmap_read_pf4_13_common,
    { { &setup_mmap_read_pf4_13_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p76_11",
    &setup_mmap_read_pf4_19_common,
    { { &setup_mmap_read_pbd_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_1",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_2",
    &setup_mmap_read_pf0_10_common,
    { { &setup_mmap_read_pf0_10_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_3",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pf0_10_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_4",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_5",
    &setup_mmap_read_pf0_13_common,
    { { &setup_mmap_read_pf0_13_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_6",
    &setup_mmap_read_pf0_12_common,
    { { &setup_mmap_read_pf0_12_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_7",
    &setup_mmap_read_pf0_59_common,
    { { &setup_mmap_read_pf0_11_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_8",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_9",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_p72_9_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_10",
    &setup_mmap_read_pf0_34_common,
    { { &setup_mmap_read_pf0_13_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p72_11",
    &setup_mmap_read_pf0_11_common,
    { { &setup_mmap_read_pf0_11_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p68_0",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p68_1",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p68_2",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p68_3",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p5e_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5e_1",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_1",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_2",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_3",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_4",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_5",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_7",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_8",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_9",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_10",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5b8_11",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_1_proc1 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_1",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_1_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_2",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfa0_1_proc1 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_3",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_1_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_4",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pb68_1_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_5",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_13_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_6",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_7",
    &setup_mmap_read_p5a8_7_common,
    { { &setup_mmap_read_pda0_6_proc0 }, { &setup_mmap_read_pda0_6_proc1 } },
    &setup_mmap_read_pda0_6_procfinal,
    &setup_mmap_read_pbe8_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_8",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_13_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p5a8_9",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_0_proc1 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p590_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p590_1",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p56_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p56_1",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p52_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p52_1",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p48_0",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p7e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p48_1",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p7e_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p3f_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pbf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3f_1",
    &setup_mmap_read_pbf_5_common,
    { { &setup_mmap_read_pbf_2_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3f_2",
    &setup_mmap_read_pbf_2_common,
    { { &setup_mmap_read_pbf_2_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3f_3",
    &setup_mmap_read_pbf_5_common,
    { { &setup_mmap_read_pbf_3_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3f_4",
    &setup_mmap_read_pbf_2_common,
    { { &setup_mmap_read_pbf_3_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3f_5",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3f_6",
    &setup_mmap_read_pbf_1_common,
    { { &setup_mmap_read_pfc_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3f_7",
    &setup_mmap_read_pbf_1_common,
    { { &setup_mmap_read_pbf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3f_8",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3ec_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3ec_1",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3ec_2",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3ec_3",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3ec_4",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3ec_5",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3ec_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3ec_7",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3ec_8",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e8_0",
    &setup_mmap_read_pbe8_0_common,
    { { &setup_mmap_read_pbe8_0_proc0 }, { &setup_mmap_read_pbe8_0_proc1 } },
    &setup_mmap_read_pda0_6_procfinal,
    &setup_mmap_read_pbe8_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e8_1",
    &setup_mmap_read_pbe8_1_common,
    { { &setup_mmap_read_pbe8_0_proc0 }, { &setup_mmap_read_pbe8_0_proc1 } },
    &setup_mmap_read_pda0_6_procfinal,
    &setup_mmap_read_pda0_6_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e8_2",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e8_3",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pfa0_9_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e8_4",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pfa0_9_proc0 }, { &setup_mmap_read_pfa0_5_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e8_5",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_p3e8_5_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e8_6",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_0_proc1 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e0_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e0_1",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pfb0_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e0_2",
    &setup_mmap_read_pbe0_2_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e0_3",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e0_4",
    &setup_mmap_read_pbe0_2_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e0_5",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_1_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e0_6",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_10_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e0_7",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pfb0_11_proc0 }, { &setup_mmap_read_pfb0_1_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3e0_8",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3d_0",
    &setup_mmap_read_pf4_24_common,
    { { &setup_mmap_read_pbd_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3d_1",
    &setup_mmap_read_pf4_19_common,
    { { &setup_mmap_read_pbd_1_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3d_2",
    &setup_mmap_read_pf4_13_common,
    { { &setup_mmap_read_pbd_3_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3d_3",
    &setup_mmap_read_pf4_19_common,
    { { &setup_mmap_read_pbd_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3c0_0",
    &setup_mmap_read_pf0_38_common,
    { { &setup_mmap_read_pf0_13_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3c0_1",
    &setup_mmap_read_pf0_39_common,
    { { &setup_mmap_read_pf0_11_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3c0_2",
    &setup_mmap_read_pf0_39_common,
    { { &setup_mmap_read_pbc0_3_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p3c0_3",
    &setup_mmap_read_pf0_13_common,
    { { &setup_mmap_read_pbc0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p38_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p38_1",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p37_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p37_1",
    &setup_mmap_read_pbf_1_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p37_2",
    &setup_mmap_read_pbf_2_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pb7_2_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p37_3",
    &setup_mmap_read_pbf_1_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p37_4",
    &setup_mmap_read_pbf_2_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pb7_2_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p37_5",
    &setup_mmap_read_pbf_5_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pb7_2_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p37_6",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p37_7",
    &setup_mmap_read_pbf_5_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pb7_2_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p36c_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p36c_1",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p36c_2",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p36c_3",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p36c_4",
    &setup_mmap_read_pdb0_7_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p36c_5",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p36c_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p36c_7",
    &setup_mmap_read_pfb0_1_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p368_0",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pb68_1_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p368_1",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pb68_1_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p368_2",
    &setup_mmap_read_pda0_8_common,
    { { &setup_mmap_read_pda0_13_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p368_3",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p368_4",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p368_5",
    &setup_mmap_read_pfa0_8_common,
    { { &setup_mmap_read_pda0_13_proc0 }, { &setup_mmap_read_pda0_8_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p360_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p360_1",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p360_2",
    &setup_mmap_read_pbe0_2_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p360_3",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p360_4",
    &setup_mmap_read_pbe0_2_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pdb0_7_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p360_5",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pdb0_7_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p360_6",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p360_7",
    &setup_mmap_read_pf8_1_common,
    { { &setup_mmap_read_pdb0_20_proc0 }, { &setup_mmap_read_pdb0_7_proc1 } },
    &setup_mmap_read_pfb0_1_procfinal,
    &setup_mmap_read_pfb0_1_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p35_0",
    &setup_mmap_read_pf4_51_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pb5_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p35_1",
    &setup_mmap_read_pf4_52_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pb5_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p35_2",
    &setup_mmap_read_pf4_51_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pb5_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p35_3",
    &setup_mmap_read_pf4_52_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pb5_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p340_0",
    &setup_mmap_read_pf0_13_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pb5_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p340_1",
    &setup_mmap_read_pf0_22_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pb5_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_6_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p340_2",
    &setup_mmap_read_pf0_31_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pb5_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p340_3",
    &setup_mmap_read_pf0_13_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pb5_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p30_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pdb0_0_proc1 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p30_1",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p3f_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p2f8_0",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_paf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2f8_1",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_paf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2f8_2",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_pfc_8_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2f8_3",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_pfc_8_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2f8_4",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_paf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2f8_5",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_paf_0_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2f8_6",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_pfc_8_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2f8_7",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_pfc_8_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ee_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ee_1",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ee_2",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ee_3",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_p2ee_3_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2ee_3_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ee_4",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_p2ee_3_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2ee_3_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ee_5",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ee_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_p2ee_3_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2ee_6_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ee_7",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_p2ee_3_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2ee_6_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ea_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_2_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ea_1",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pfa0_2_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ea_2",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_p2ea_2_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2ee_3_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ea_3",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_p2ea_3_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ea_4",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_p2ea_2_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2ee_6_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ea_5",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_p2ea_2_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2ee_6_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ea_6",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_p2ea_2_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2ee_3_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2ea_7",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_p2ea_3_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2e4_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2e4_1",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2e4_2",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2e4_3",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pfb0_5_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2e4_4",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_p2e4_4_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2e4_5",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_p2e4_4_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2e4_6",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_p2e4_4_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2e4_7",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_p2e4_4_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p76_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_1",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_p2d8_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_2",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_p2d8_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_3",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pd0_4_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_4",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p2d8_4_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_5",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p2d8_5_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_6",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p2d8_6_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_7",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p2d8_7_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_7_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_8",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_p2d8_8_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2d8_8_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_9",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p2d8_9_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_8_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_10",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p2d8_10_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_10_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_11",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p2d8_11_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_10_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_12",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p76_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_12_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_13",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pad_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_12_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_14",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_p2d8_14_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2d8_14_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_15",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_16",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pad_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_16_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2d8_17",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf0_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2d8_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_1",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_p2c8_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_2",
    &setup_mmap_read_p2c8_2_common,
    { { &setup_mmap_read_p2c8_2_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2c8_2_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_3",
    &setup_mmap_read_p2c8_3_common,
    { { &setup_mmap_read_p2d8_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_4",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_p2c8_4_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_5",
    &setup_mmap_read_p2c8_3_common,
    { { &setup_mmap_read_p2d8_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_6",
    &setup_mmap_read_pac0_2_common,
    { { &setup_mmap_read_p2c8_6_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_6_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_7",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_p2c8_7_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_7_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_8",
    &setup_mmap_read_pf0_3_common,
    { { &setup_mmap_read_p2c8_8_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2c8_7_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_9",
    &setup_mmap_read_pac0_2_common,
    { { &setup_mmap_read_p2c8_6_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_9_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_10",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_p72_9_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_10_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_11",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_p2c8_11_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_12",
    &setup_mmap_read_pf0_4_common,
    { { &setup_mmap_read_p2c8_12_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_10_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_13",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_14",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pd0_4_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_15",
    &setup_mmap_read_pf0_4_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_15_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_16",
    &setup_mmap_read_pf0_4_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_10_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2c8_17",
    &setup_mmap_read_pf0_4_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_17_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2a_0",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2a_1",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2a_2",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p2a_3",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p278_0",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p278_1",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p278_2",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p278_3",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p278_4",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_pb5_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p278_5",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_pb5_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p278_6",
    &setup_mmap_read_paf_0_common,
    { { &setup_mmap_read_pb5_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p278_7",
    &setup_mmap_read_paf_1_common,
    { { &setup_mmap_read_pb5_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26e_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26e_1",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26e_2",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26e_3",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26e_4",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_p26e_4_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2ee_3_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26e_5",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_p26e_4_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2ee_3_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26e_6",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_p26e_4_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2ee_6_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26e_7",
    &setup_mmap_read_pdb0_5_common,
    { { &setup_mmap_read_p26e_4_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2ee_6_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26a_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_1_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26a_1",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pda0_1_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26a_2",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pda0_1_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26a_3",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_pda0_1_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26a_4",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_p26a_4_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2ee_3_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26a_5",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_p26a_4_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2ee_3_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26a_6",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_p26a_4_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2ee_6_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p26a_7",
    &setup_mmap_read_pda0_5_common,
    { { &setup_mmap_read_p26a_4_proc0 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2ee_6_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p264_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p264_1",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p264_2",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p264_3",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pdb0_1_proc0 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p264_4",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pb5_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p264_5",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pb5_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p264_6",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pb5_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p264_7",
    &setup_mmap_read_pbe0_1_common,
    { { &setup_mmap_read_pb5_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pf4_32_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_1",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_2_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_2",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pd0_4_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_2_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_3",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pa5_2_proc0 }, { &setup_mmap_read_pa5_2_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p258_3_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_4",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pd0_4_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_5",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pd0_4_proc1 }, { &setup_mmap_read_pa5_1_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_6",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pa5_2_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_7",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pa5_2_proc0 }, { &setup_mmap_read_pa5_1_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_8",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pd0_4_proc1 }, { &setup_mmap_read_pa5_1_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2c8_2_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_9",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pd0_4_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_7_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_10",
    &setup_mmap_read_pf4_1_common,
    { { &setup_mmap_read_pd0_4_proc1 }, { &setup_mmap_read_pa5_1_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2c8_7_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_11",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pd0_4_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_17_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_12",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_7_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p258_13",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p248_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_1",
    &setup_mmap_read_pac0_2_common,
    { { &setup_mmap_read_p248_1_proc0 }, { &setup_mmap_read_p248_1_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p248_1_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_2",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pd0_6_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p248_2_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_3",
    &setup_mmap_read_pf0_45_common,
    { { &setup_mmap_read_p248_3_proc0 }, { &setup_mmap_read_p248_3_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p248_2_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_4",
    &setup_mmap_read_pf0_45_common,
    { { &setup_mmap_read_p248_1_proc1 }, { &setup_mmap_read_p248_3_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2c8_9_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_5",
    &setup_mmap_read_pf0_2_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pa5_1_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_9_final,
    { { &test_mmap_read_p2c8_2_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_6",
    &setup_mmap_read_pf0_12_common,
    { { &setup_mmap_read_p248_3_proc0 }, { &setup_mmap_read_p248_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_9_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_7",
    &setup_mmap_read_p248_7_common,
    { { &setup_mmap_read_p248_7_proc0 }, { &setup_mmap_read_pa5_1_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_1_final,
    { { &test_mmap_read_p2c8_7_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_8",
    &setup_mmap_read_pac0_2_common,
    { { &setup_mmap_read_p248_1_proc0 }, { &setup_mmap_read_p248_1_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_6_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_9",
    &setup_mmap_read_pf0_7_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pd0_6_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2c8_15_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_10",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pd0_4_proc1 }, { &setup_mmap_read_pd0_4_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_11",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_12",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pd0_4_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p248_13",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p22_0",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p22_1",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pa8_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p22_2",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p22_3",
    &setup_mmap_read_pf0_29_common,
    { { &setup_mmap_read_pe0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p2f8_4_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p1e_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p1d8_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pfb0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p1d0_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_1_proc0 }, { &setup_mmap_read_pfa0_1_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p1c_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfb0_2_proc0 }, { &setup_mmap_read_pfc_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p1a_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_p9a_0_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pfa0_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p18_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf0_1_proc0 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pf8_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p10_0",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_1_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p10_1",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 0, "read" } },
    &cleanup },
  { "fs-mmap_read_p0e_0",
    &setup_mmap_read_pfc_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pfc_0_proc0 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p0d8_0",
    &setup_mmap_read_pfb0_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pdb0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p0d0_0",
    &setup_mmap_read_pfa0_1_common,
    { { &setup_mmap_read_pfa0_1_proc1 }, { &setup_mmap_read_pda0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p0c_0",
    &setup_mmap_read_pf8_0_common,
    { { &setup_mmap_read_pfc_0_proc1 }, { &setup_mmap_read_pdb0_0_proc1 } },
    &setup_mmap_read_pfc_0_procfinal,
    &setup_mmap_read_pfc_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p0a_0",
    &setup_mmap_read_pf4_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pda0_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p08_0",
    &setup_mmap_read_pf0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pe0_1_proc0 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_final,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pd8_0_1, 1, "read" } },
    &cleanup },
  { "fs-mmap_read_p00_0",
    &setup_mmap_read_pe0_0_common,
    { { &setup_mmap_read_pf4_0_proc1 }, { &setup_mmap_read_pf4_0_proc1 } },
    &setup_mmap_read_pf4_0_procfinal,
    &setup_mmap_read_pf4_0_procfinal,
    { { &test_mmap_read_p1e_0_0, 0, "mmap" },
      { &test_mmap_read_pfc_0_1, 1, "read" } },
    &cleanup },
//+++ common
  {}
};
